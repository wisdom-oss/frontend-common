var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/Breadcrumb.html",[0,0.459,1,1.546]],["body/interfaces/Breadcrumb.html",[0,0.55,1,2.731,2,1.464,3,0.634,4,0.634,5,0.55,6,2.424,7,0.417,8,0.921,9,1.532,10,2.731,11,2.156,12,2.731,13,3.569,14,1.044,15,0.585,16,0.045,17,3.103,18,0.887,19,1.662,20,0.926,21,1.855,22,2.424,23,1.644,24,3.391,25,2.681,26,3.083,27,1.464,28,0.807,29,1.855,30,1.855,31,1.041,32,1.855,33,2.424,34,1.167,35,1.464,36,2.847,37,1.041,38,1.484,39,2.847,40,1.644,41,2.847,42,2.847,43,2.847,44,1.167,45,2.847,46,0.034,47,0.034]],["title/components/BreadcrumbsComponent.html",[48,0.973,49,1.221]],["body/components/BreadcrumbsComponent.html",[1,2.385,3,0.534,4,0.534,5,0.463,7,0.276,8,0.823,9,0.876,13,2.753,15,0.511,16,0.045,18,0.873,20,0.779,21,1.561,23,1.384,27,1.232,28,0.534,31,0.876,32,2.554,33,3.117,34,1.5,38,1.325,44,0.982,46,0.03,47,0.03,48,1.5,49,2.016,50,2.394,51,2.039,52,2.039,53,2.039,54,2.039,55,2.753,56,3.661,57,4.488,58,1.773,59,3.122,60,3.965,61,3.965,62,3.965,63,4.488,64,1.868,65,4.806,66,4.806,67,3.92,68,1.384,69,2.396,70,2.17,71,3.965,72,1.099,73,1.275,74,2.107,75,2.937,76,1.68,77,2.264,78,2.937,79,2.016,80,2.937,81,1.484,82,1.868,83,2.937,84,1.868,85,2.937,86,2.937,87,2.039,88,1.773,89,1.384,90,2.937,91,2.937,92,3.965,93,2.937,94,2.937,95,2.937,96,2.937,97,1.232,98,3.234,99,2.039,100,2.753,101,2.753,102,1.232,103,3.337,104,2.039,105,2.039,106,1.232,107,1.561,108,2.039,109,1.232,110,1.232,111,1.773,112,1.099,113,1.773,114,2.039]],["title/injectables/BreadcrumbsService.html",[19,1.089,32,1.546]],["body/injectables/BreadcrumbsService.html",[0,0.529,1,2.852,3,0.61,4,0.61,5,0.529,6,2.33,7,0.45,8,0.898,9,1,10,1.783,11,1.408,12,1.783,13,2.33,14,0.92,15,0.546,16,0.045,17,2.614,18,0.871,19,1.621,20,0.89,21,1.783,22,2.33,23,1.581,24,3.64,25,2.894,26,3.517,27,1.408,28,0.787,29,1.783,30,1.783,31,1,32,2.3,33,3.328,34,1.602,35,1.816,36,3.532,37,1.429,38,1.794,39,2.737,40,1.581,41,2.737,42,2.737,43,4.131,44,1.122,45,2.737,46,0.033,47,0.033,64,2.04,70,2.124,72,1.256,73,0.89,76,1.621,79,1.408,81,1.621,115,2.33,116,2.3,117,3.355,118,3.355,119,3.355,120,3.355]],["title/directives/BulmaIsToggleableDirective.html",[102,1.221,112,1.089]],["body/directives/BulmaIsToggleableDirective.html",[3,0.489,4,0.489,5,0.424,7,0.252,8,0.774,9,0.801,14,0.957,15,0.527,16,0.045,18,0.489,20,0.713,28,0.489,31,1.57,34,1.683,38,1.247,44,0.898,46,0.028,47,0.028,58,1.623,59,2.253,64,1.758,70,2.166,72,1.006,73,0.713,76,1.605,77,1.758,79,1.565,81,1.397,97,1.565,102,2.112,111,1.623,112,1.397,113,2.796,116,2.278,121,4.294,122,2.193,123,0.898,124,3.731,125,3.731,126,3.731,127,3.731,128,5.516,129,4.361,130,5.346,131,5.469,132,4.286,133,2.591,134,3.731,135,3.731,136,2.591,137,4.286,138,3.731,139,5.624,140,3.731,141,2.019,142,4.286,143,4.286,144,2.193,145,2.688,146,2.688,147,2.688,148,2.591,149,2.688,150,2.688,151,2.688,152,2.688,153,1.623,154,2.688,155,2.688,156,2.688,157,2.688,158,2.688,159,2.688,160,2.688,161,2.688,162,4.286,163,2.688,164,3.731,165,2.688,166,1.866]],["title/components/IonIconComponent.html",[48,0.973,106,1.221]],["body/components/IonIconComponent.html",[3,0.461,4,0.461,5,0.4,7,0.238,9,1.068,10,2.757,11,1.063,14,0.82,15,0.473,16,0.045,18,0.461,20,0.673,28,0.461,31,0.756,46,0.027,47,0.027,48,1.698,49,1.063,50,2.162,51,1.76,52,1.76,53,1.76,58,1.531,59,2.984,68,1.957,70,1.742,72,1.341,73,1.495,76,0.949,79,1.063,84,2.126,89,1.194,99,1.76,100,2.487,101,3.527,102,1.063,103,3.134,104,1.76,105,1.76,106,1.893,107,2.626,108,1.76,109,1.063,110,1.063,111,1.531,112,0.949,113,1.531,114,1.76,116,1.347,123,1.197,133,2.487,136,2.487,153,2.162,167,3.682,168,3.134,169,2.068,170,1.419,171,3.582,172,5.275,173,4.513,174,2.162,175,3.582,176,2.922,177,3.582,178,2.922,179,2.922,180,3.582,181,2.922,182,3.582,183,2.535,184,3.682,185,2.535,186,4.153,187,3.582,188,3.582,189,3.582,190,4.942,191,4.942,192,4.153,193,4.153,194,4.153,195,4.153,196,4.153,197,4.153,198,4.031,199,4.153,200,4.153,201,3.388,202,3.388,203,4.153,204,4.153,205,3.388,206,4.153,207,4.153,208,4.153,209,2.535,210,1.347,211,2.535,212,2.535]],["title/interfaces/LayerData.html",[0,0.459,213,1.221]],["body/interfaces/LayerData.html",[0,0.724,2,1.543,3,0.668,4,0.668,5,0.58,7,0.345,8,0.952,14,0.909,15,0.614,16,0.045,18,0.668,28,0.952,34,1.229,37,1.68,46,0.035,47,0.035,73,0.976,81,1.377,170,1.096,213,2.098,214,2.22,215,2.22,216,3.162,217,2.783,218,2.467,219,2.22,220,1.534,221,1.925,222,1.872,223,2.162,224,2.553,225,3,226,1.543,227,3,228,1.954,229,1.954,230,1.954,231,2.22]],["title/components/MapComponent.html",[48,0.973,109,1.221]],["body/components/MapComponent.html",[3,0.15,4,0.15,5,0.13,7,0.078,8,0.488,9,1.064,11,1.889,14,0.761,15,0.579,16,0.045,18,0.648,20,0.219,24,2.68,25,1.784,26,2.478,27,0.346,28,0.15,31,0.246,34,1.724,35,1.562,37,0.581,38,1.457,40,0.389,46,0.011,47,0.011,48,0.895,49,0.346,50,0.878,51,1.01,52,0.573,53,0.573,55,1.01,56,1.59,58,0.499,59,1.784,64,0.685,67,1.916,68,0.919,69,0.674,70,2.11,72,0.73,73,1.112,74,1.802,76,1.003,77,1.107,79,1.423,81,1.531,82,1.262,88,0.499,89,0.389,97,0.346,99,0.573,100,2.215,101,1.631,102,0.346,103,1.631,104,0.573,105,0.573,106,0.346,107,0.439,108,0.573,109,0.986,110,2.221,111,0.499,112,0.309,113,0.499,114,0.573,116,1.423,123,0.486,133,1.01,136,1.01,141,0.685,144,0.674,148,2.764,153,2.882,166,0.573,170,1.3,176,3.49,178,0.674,179,2.185,181,1.187,184,1.59,198,1.59,202,0.674,205,1.187,210,0.439,213,1.338,217,2.174,219,0.499,220,0.785,221,0.61,222,1.632,223,0.389,224,0.573,226,2.154,228,2.051,229,0.773,230,2.226,232,0.826,233,0.573,234,1.455,235,1.455,236,1.95,237,1.455,238,1.95,239,3.617,240,3.722,241,3.148,242,1.95,243,1.95,244,3.859,245,1.95,246,1.95,247,2.349,248,2.679,249,2.909,250,2.349,251,2.349,252,2.911,253,1.455,254,1.95,255,1.95,256,1.95,257,2.349,258,4.623,259,1.455,260,1.455,261,1.248,262,0.826,263,1.01,264,0.826,265,1.01,266,0.826,267,1.455,268,3.392,269,2.47,270,1.95,271,2.349,272,1.177,273,2.911,274,1.59,275,2.41,276,3.392,277,1.95,278,1.95,279,2.174,280,2.355,281,2.121,282,1.95,283,1.631,284,1.95,285,1.95,286,1.423,287,1.354,288,1.354,289,1.95,290,1.95,291,1.95,292,1.95,293,1.95,294,1.95,295,3.568,296,2.349,297,1.59,298,1.95,299,1.95,300,1.95,301,0.826,302,1.455,303,1.926,304,1.455,305,0.826,306,1.455,307,2.349,308,1.455,309,1.187,310,1.455,311,1.455,312,1.455,313,0.826,314,2.349,315,2.349,316,0.826,317,2.349,318,1.248,319,1.455,320,0.826,321,1.455,322,0.826,323,2.349,324,1.95,325,0.826,326,0.826,327,1.916,328,1.455,329,2.349,330,0.826,331,1.455,332,0.826,333,1.455,334,1.455,335,1.455,336,1.455,337,1.455,338,0.826,339,2.767,340,1.455,341,1.455,342,1.455,343,2.349,344,0.826,345,0.826,346,0.826,347,1.455,348,3.148,349,0.826,350,1.455,351,1.187,352,0.826,353,0.826,354,0.826,355,1.455,356,0.826,357,1.95,358,0.826,359,1.01,360,0.826,361,1.01,362,0.826,363,2.349,364,1.455,365,1.455,366,0.826,367,1.455,368,2.349,369,0.826,370,0.826,371,1.187,372,0.826,373,0.826,374,0.826,375,0.826,376,0.826,377,0.674,378,1.455,379,0.826,380,0.826,381,0.826,382,0.674,383,0.826,384,0.826,385,1.455,386,1.455,387,0.826,388,0.826,389,0.674,390,0.826,391,0.826,392,0.826,393,0.826,394,0.826,395,0.826,396,0.826,397,0.826,398,0.826,399,0.674,400,0.674,401,0.674,402,1.187,403,0.674,404,0.826,405,0.826,406,0.826,407,0.826,408,0.826,409,0.826,410,0.826,411,0.826,412,0.826,413,0.826,414,0.826,415,0.826,416,0.826,417,0.826,418,0.826,419,0.826,420,0.826,421,0.826,422,0.826,423,0.826,424,0.826,425,0.826,426,1.455,427,0.826,428,1.455,429,0.826,430,1.455,431,1.455,432,0.826,433,1.455,434,0.826,435,0.826,436,0.674,437,1.455,438,0.826,439,1.455,440,0.826,441,0.826,442,0.826,443,0.826,444,0.573,445,0.826,446,0.826,447,0.573,448,0.826,449,1.01,450,0.826,451,0.826,452,0.826,453,0.826,454,0.826,455,0.826,456,0.826,457,0.826,458,0.826,459,1.187,460,0.826,461,0.826,462,1.95,463,1.455,464,0.826,465,1.95,466,0.826,467,1.95,468,0.573,469,0.826,470,0.826,471,1.95,472,0.826,473,0.826,474,0.826,475,1.95,476,0.826,477,0.826,478,0.826,479,0.826,480,0.826,481,0.826,482,0.826,483,0.826,484,0.439,485,0.826,486,0.826,487,1.455,488,0.826,489,1.455,490,0.674,491,0.826,492,0.826,493,0.826,494,1.455,495,0.826,496,0.826,497,0.826,498,0.826,499,0.826,500,1.455,501,0.826,502,0.826,503,0.826,504,0.826,505,0.826,506,1.455,507,0.826,508,0.826,509,0.826,510,0.826,511,0.573,512,0.826,513,1.95,514,0.826,515,0.826,516,0.826,517,0.826,518,0.826,519,0.826,520,0.826,521,0.826,522,0.826,523,0.826,524,0.826,525,0.826,526,1.455,527,1.455,528,0.826,529,0.826,530,0.826,531,0.826,532,0.826,533,0.826,534,0.826,535,0.826,536,1.455,537,0.826,538,0.826,539,0.826,540,1.455,541,0.826,542,0.826,543,0.674]],["title/interfaces/MapDB.html",[0,0.459,544,1.757]],["body/interfaces/MapDB.html",[0,0.291,2,0.773,3,0.335,4,0.335,5,0.291,7,0.173,8,0.588,11,1.446,12,2.341,14,0.758,15,0.523,16,0.046,17,2.335,18,0.882,19,1.06,20,0.489,27,0.773,28,0.335,29,0.98,30,0.98,31,0.55,34,0.616,35,1.446,37,0.844,38,1.472,40,1.624,44,1.293,46,0.021,47,0.021,68,0.868,74,1.504,77,0.868,82,1.822,84,1.334,89,0.868,97,0.773,110,1.848,123,0.616,170,1.153,174,1.709,210,2.055,213,1.848,216,2.081,217,2.752,218,2.161,220,0.616,221,0.773,222,1.887,223,0.868,226,1.622,228,1.832,229,0.98,230,2.437,231,1.113,261,0.98,263,1.28,272,2.335,279,2.782,280,1.966,281,2.375,283,2.685,286,1.832,287,1.28,288,1.28,318,0.98,359,1.28,444,1.28,447,2.898,449,2.393,484,0.98,511,1.28,544,1.709,545,1.113,546,2.31,547,3.441,548,2.31,549,2.812,550,3.593,551,3.867,552,3.155,553,2.31,554,2.812,555,2.31,556,3.155,557,2.812,558,2.812,559,2.812,560,2.31,561,2.31,562,2.31,563,2.31,564,2.31,565,2.31,566,1.504,567,1.504,568,2.812,569,1.504,570,1.113,571,3.155,572,1.709,573,2.081,574,1.113,575,1.28,576,1.113,577,1.28,578,1.113,579,1.709,580,1.504,581,2.812,582,2.31,583,1.28,584,1.504,585,1.504,586,2.31,587,2.31,588,2.812,589,2.31,590,1.504,591,1.504,592,2.31,593,1.504,594,1.504,595,1.504,596,1.504,597,1.504,598,1.504,599,1.504,600,3.155,601,2.31,602,1.28,603,1.504,604,1.504,605,1.28,606,1.504,607,2.31,608,2.812,609,1.504,610,2.812,611,1.28,612,2.31,613,1.504,614,2.31,615,1.504,616,2.31,617,2.31,618,2.31,619,1.504,620,1.504,621,1.504,622,1.504,623,2.31,624,1.504,625,1.504,626,1.504,627,1.504,628,1.504,629,1.504,630,1.504,631,1.504,632,2.31,633,1.504,634,1.28,635,1.113,636,1.504,637,1.504,638,1.504,639,1.504,640,1.504,641,1.504,642,1.504,643,1.504,644,1.504,645,1.504,646,1.504,647,1.504,648,1.504,649,1.504,650,1.504,651,1.504,652,2.31,653,1.504,654,1.504,655,1.504,656,1.504,657,1.504,658,1.504,659,1.504]],["title/injectables/MapService.html",[19,1.089,261,1.546]],["body/injectables/MapService.html",[0,0.274,3,0.316,4,0.316,5,0.274,7,0.163,8,0.562,9,0.807,11,1.395,12,1.766,14,0.816,15,0.379,16,0.045,17,2.265,18,0.867,19,1.014,20,0.462,27,0.73,28,0.316,29,0.925,30,0.925,31,0.519,34,1.111,35,1.395,37,0.807,38,1.358,40,1.276,44,1.254,46,0.021,47,0.021,64,1.276,68,1.566,70,1.395,72,1.014,73,0.719,74,1.993,76,0.652,77,1.566,81,0.652,82,1.915,84,1.767,89,0.82,97,1.136,110,1.949,115,1.208,123,1.111,170,0.807,174,1.051,210,1.993,213,1.705,216,2.007,217,2.64,218,1.915,220,0.582,221,0.73,222,1.974,223,0.82,226,1.395,228,2.287,229,0.925,230,2.159,231,1.051,261,1.439,263,1.88,272,1.635,279,2.802,280,2.988,281,2.377,283,2.308,286,1.766,287,1.208,288,1.88,318,0.925,359,1.208,444,1.88,447,2.822,449,2.308,484,0.925,511,1.208,544,1.051,545,1.051,546,1.42,547,3.226,548,1.42,549,2.209,550,2.209,552,3.06,553,1.42,554,2.712,555,1.42,556,2.209,557,2.712,558,2.712,559,2.712,560,1.42,561,1.42,562,3.06,563,2.209,564,2.209,565,2.209,566,1.42,567,1.42,568,3.315,569,1.42,570,1.051,571,3.315,572,1.635,573,2.454,574,1.051,575,1.208,576,1.051,577,1.208,578,1.051,579,1.635,580,1.42,581,3.51,582,3.06,583,1.88,584,2.209,585,2.209,586,3.06,587,3.06,588,3.315,589,2.209,590,1.42,591,1.42,592,2.209,593,1.42,594,1.42,595,1.42,596,1.42,597,2.209,598,2.209,599,2.209,600,3.51,601,2.712,602,1.88,603,2.712,604,2.712,605,1.88,606,1.42,607,2.209,608,2.712,609,1.42,610,2.712,611,1.208,612,2.209,613,1.42,614,2.209,615,1.42,616,2.209,617,2.209,618,2.209,619,1.42,620,1.42,621,1.42,622,1.42,623,2.209,624,1.42,625,1.42,626,1.42,627,1.42,628,1.42,629,1.42,630,1.42,631,1.42,632,2.209,633,1.42,634,1.208,635,1.051,636,1.42,637,1.42,638,1.42,639,1.42,640,1.42,641,1.42,642,1.42,643,1.42,644,1.42,645,1.42,646,1.42,647,1.42,648,1.42,649,1.42,650,1.42,651,1.42,652,2.209,653,1.42,654,1.42,655,1.42,656,1.42,657,1.42,658,1.42,659,1.42,660,1.74,661,2.708,662,1.74,663,1.74,664,1.42]],["title/interfaces/Marker.html",[0,0.459,303,1.757]],["body/interfaces/Marker.html",[0,0.58,2,1.543,3,0.668,4,0.668,5,0.58,7,0.345,8,0.952,9,1.639,10,2.783,15,0.597,16,0.045,18,0.834,28,0.668,37,1.639,46,0.035,47,0.035,79,1.543,141,2.162,219,2.22,220,1.534,226,2.098,265,3.637,303,2.77,635,3.254,665,3,666,5.237,667,5.636,668,5.001,669,5.001,670,4.588,671,3.677]],["title/guards/QueryParameterGuard.html",[672,1.757,673,2.021]],["body/guards/QueryParameterGuard.html",[3,0.772,4,0.481,5,0.417,7,0.248,9,1.371,11,2.029,12,1.961,14,0.879,15,0.42,16,0.045,18,0.772,19,1.381,20,0.702,21,2.443,22,3.358,23,1.246,25,2.92,27,1.11,28,0.481,29,1.405,30,1.405,31,0.789,44,1.233,46,0.028,47,0.028,55,1.837,64,1.738,68,2.002,70,1.548,72,1.721,73,0.979,76,0.99,77,1.738,82,1.246,84,1.246,89,1.246,97,1.11,116,1.961,123,1.42,148,2.562,170,1.371,201,3.01,210,2.443,222,1.381,272,2.228,281,1.738,309,3.01,605,3.193,611,3.641,672,2.228,673,3.193,674,2.157,675,3.466,676,2.157,677,3.69,678,3.699,679,3.69,680,3.69,681,4.598,682,3.69,683,3.69,684,4.598,685,3.01,686,5.243,687,3.69,688,3.69,689,4.836,690,2.645,691,5.452,692,2.645,693,3.69,694,3.69,695,2.645,696,4.086,697,4.598,698,2.645,699,3.69,700,3.751,701,3.69,702,3.01,703,3.69,704,2.645,705,2.645,706,2.645,707,2.645,708,2.645,709,2.645]],["title/interfaces/ShapeData.html",[0,0.459,218,1.371]],["body/interfaces/ShapeData.html",[0,0.707,2,1.486,3,0.644,4,0.644,5,0.559,7,0.333,8,0.93,14,1.026,15,0.637,16,0.045,18,0.644,28,0.939,34,1.184,37,1.668,46,0.034,47,0.034,73,1.371,81,1.326,123,1.184,170,1.056,213,1.88,214,2.139,215,2.139,216,2.139,217,1.883,218,2.316,219,2.139,220,1.498,221,2.236,222,1.996,223,2.434,224,2.46,225,3.656,226,1.88,227,3.656,228,2.382,229,2.382,230,2.746,231,3.12]],["title/interfaces/WisdomInterface.html",[0,0.459,710,2.021]],["body/interfaces/WisdomInterface.html",[0,0.822,2,1.382,3,0.599,4,0.599,5,0.52,7,0.309,8,0.888,14,0.864,15,0.541,16,0.045,18,0.599,23,1.552,28,0.599,46,0.032,47,0.032,48,1.786,73,1.135,123,1.101,174,2.583,269,2.869,274,3.49,275,3.49,281,2.369,297,3.49,490,3.49,674,4.103,678,3.903,710,3.492,711,2.688,712,5.029,713,3.037,714,3.492,715,4.279,716,4.279,717,3.492,718,4.279,719,4.279,720,4.279,721,5.342,722,5.342,723,4.279,724,4.279,725,4.279,726,4.279,727,4.279,728,4.279,729,4.279,730,4.279]],["title/modules/WisdomModule.html",[714,2.021,731,1.757]],["body/modules/WisdomModule.html",[3,0.611,4,0.611,5,0.53,16,0.045,18,1.006,20,0.892,23,1.584,28,0.611,31,1.002,46,0.033,47,0.033,49,2.396,106,2.396,107,1.787,109,2.396,112,2.138,168,2.335,249,3.01,468,2.335,713,2.03,731,3.504,732,2.617,733,2.743,734,2.743,735,2.743,736,2.743,737,3.362,738,4.335,739,4.335,740,4.335,741,4.335,742,3.362,743,3.362,744,3.362,745,3.362,746,3.362,747,3.362,748,3.362,749,4.335,750,2.743,751,4.335,752,3.362]],["title/coverage.html",[753,3.214]],["body/coverage.html",[0,0.813,1,1.547,5,0.459,6,2.737,15,0.332,16,0.045,19,1.475,32,1.547,35,1.221,46,0.03,47,0.03,48,1.494,49,1.221,54,2.737,87,2.021,88,3.397,102,1.221,106,1.221,109,1.221,112,1.09,121,2.375,122,2.375,141,2.485,167,2.375,168,2.021,169,2.375,213,1.221,214,2.379,215,2.379,218,1.371,233,2.021,261,1.547,303,1.758,361,2.021,459,4.657,544,1.758,545,3.021,570,1.758,572,3.021,573,1.758,574,1.758,576,1.758,578,1.758,579,1.758,665,2.375,672,1.758,673,2.021,675,2.375,676,2.375,710,2.021,711,2.375,753,2.375,754,2.911,755,2.911,756,2.911,757,3.941,758,2.911,759,5.497,760,5.365,761,4.468,762,2.911,763,4.468,764,4.082,765,3.215,766,5.438,767,2.375,768,2.375,769,2.375,770,2.375,771,2.375,772,2.375,773,2.375,774,2.375,775,2.375,776,2.375,777,2.911,778,2.911,779,2.911,780,2.911,781,2.737,782,2.375,783,2.375,784,4.082,785,2.375,786,2.375,787,2.375,788,2.375,789,2.375,790,2.911,791,2.911]],["title/dependencies.html",[732,2.108,792,1.995]],["body/dependencies.html",[16,0.043,20,1.184,46,0.039,47,0.039,732,3.112,750,3.641,793,4.463,794,4.463,795,4.463,796,5.155]],["title/miscellaneous/enumerations.html",[797,0.916,798,2.848]],["body/miscellaneous/enumerations.html",[7,0.407,16,0.043,38,1.85,46,0.038,47,0.038,279,2.693,377,4.134,389,4.134,696,4.134,781,3.01,797,1.623,798,3.536,799,3.536,800,5.068]],["title/miscellaneous/functions.html",[797,0.916,801,2.848]],["body/miscellaneous/functions.html",[7,0.283,9,1.587,14,0.947,15,0.594,16,0.044,21,2.146,37,1.587,44,1.009,46,0.031,47,0.031,48,1.009,72,1.993,73,1.412,74,2.418,76,1.993,84,1.422,98,4.132,110,1.694,123,1.624,141,2.144,170,0.9,220,1.009,221,1.266,222,1.13,265,2.095,269,2.438,273,3.294,279,2.418,286,1.603,318,1.603,327,2.462,371,2.462,664,2.462,678,3.16,685,2.462,700,2.462,702,3.294,717,2.804,781,2.095,782,3.294,783,3.294,784,2.462,785,3.294,786,3.294,787,3.294,788,3.294,789,3.294,797,1.13,799,3.294,801,2.462,802,5.065,803,3.017,804,3.017,805,3.017,806,3.017,807,3.017,808,3.017,809,3.017,810,3.017,811,3.017,812,3.017,813,3.017,814,3.017,815,3.017,816,3.017,817,3.017,818,3.017,819,3.017,820,3.017,821,3.017,822,3.017,823,3.017,824,3.017,825,4.038,826,4.038,827,4.55,828,4.038,829,3.017,830,3.017,831,3.017,832,3.017,833,3.017,834,3.017,835,3.017,836,2.462,837,3.017,838,3.017,839,4.55,840,2.462,841,3.017,842,3.017,843,3.017,844,3.017,845,3.017,846,3.017,847,3.017,848,3.017]],["title/index.html",[7,0.273,849,2.374]],["body/index.html",[2,1.611,16,0.044,40,2.402,46,0.036,47,0.036,49,2.36,50,2.318,102,1.611,106,2.36,109,2.36,112,2.106,115,2.666,249,3.273,468,2.666,484,2.04,672,2.318,714,2.666,731,3.534,732,2.845,733,3.132,734,3.132,735,3.132,736,3.132,849,3.132,850,3.84,851,3.84]],["title/modules.html",[713,2.379]],["body/modules.html",[16,0.04,46,0.04,47,0.04,713,2.739,731,2.739,852,4.537,853,4.537,854,4.537,855,4.537]],["title/properties.html",[8,0.725,792,1.995]],["body/properties.html",[8,0.947,16,0.042,46,0.04,47,0.04,856,4.562,857,4.562]],["title/miscellaneous/typealiases.html",[797,0.916,858,3.491]],["body/miscellaneous/typealiases.html",[7,0.388,14,0.75,15,0.621,16,0.037,46,0.037,47,0.037,153,2.492,170,1.468,214,2.492,215,2.973,220,1.646,221,2.066,222,1.843,223,2.567,226,2.066,233,2.867,241,4.017,269,2.492,281,1.945,348,4.017,399,3.368,400,3.368,401,3.368,402,3.368,403,3.368,797,1.545,859,4.128,860,4.128,861,5.262]],["title/miscellaneous/variables.html",[797,0.916,862,2.848]],["body/miscellaneous/variables.html",[7,0.235,10,2.194,14,0.75,15,0.54,16,0.045,35,2.066,37,1.06,38,1.783,44,1.188,46,0.027,47,0.027,54,1.742,79,1.052,81,1.998,82,2.32,87,2.468,88,1.514,97,1.884,107,1.333,110,1.491,129,2.046,141,1.675,166,1.742,170,1.51,220,1.38,239,3.368,252,2.9,286,1.333,318,1.889,339,3.868,351,2.046,361,3.293,382,2.046,436,2.046,484,1.333,543,3.868,545,1.514,547,1.742,570,2.146,572,2.863,573,2.493,574,2.146,575,1.742,576,2.146,577,1.742,578,2.146,579,2.146,583,1.742,602,1.742,634,1.742,635,2.146,717,1.742,764,3.868,765,3.664,767,3.368,768,2.9,769,2.9,770,2.9,771,3.664,772,2.9,773,2.9,774,2.9,775,2.046,776,2.9,797,0.939,836,2.046,840,2.046,862,2.046,863,4.129,864,2.508,865,2.508,866,4.742,867,3.554,868,3.554,869,2.508,870,2.508,871,4.492,872,2.508,873,2.508,874,2.508,875,2.508,876,2.508,877,2.508,878,2.508,879,3.554,880,2.508,881,3.554,882,2.508,883,2.508,884,4.129,885,2.508,886,3.554,887,2.508,888,3.554,889,2.508,890,3.554,891,2.508,892,2.508,893,2.508,894,2.508,895,2.508,896,2.508,897,2.508,898,2.508,899,2.508,900,5.336,901,4.742,902,2.508,903,2.508,904,2.508,905,2.508,906,2.508,907,2.508,908,2.508,909,2.508,910,2.508,911,2.508,912,2.508,913,2.508,914,2.508,915,2.508,916,2.508,917,2.508,918,2.508,919,2.508]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":88,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":857,"title":{},"body":{"properties.html":{}}}],["0/1",{"_index":760,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":777,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":761,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":758,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":40,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"index.html":{}}}],["1/1",{"_index":766,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":779,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":459,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["14.0.3",{"_index":796,"title":{},"body":{"dependencies.html":{}}}],["1f5aec",{"_index":319,"title":{},"body":{"components/MapComponent.html":{}}}],["2",{"_index":484,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["2.4.0",{"_index":794,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":778,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":481,"title":{},"body":{"components/MapComponent.html":{}}}],["29/29",{"_index":780,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":850,"title":{},"body":{"index.html":{}}}],["3/3",{"_index":763,"title":{},"body":{"coverage.html":{}}}],["39;01&#39",{"_index":385,"title":{},"body":{"components/MapComponent.html":{}}}],["39;034030000000&#39",{"_index":386,"title":{},"body":{"components/MapComponent.html":{}}}],["39;all",{"_index":376,"title":{},"body":{"components/MapComponent.html":{}}}],["39;only",{"_index":381,"title":{},"body":{"components/MapComponent.html":{}}}],["39;show",{"_index":388,"title":{},"body":{"components/MapComponent.html":{}}}],["4/4",{"_index":757,"title":{},"body":{"coverage.html":{}}}],["500px",{"_index":343,"title":{},"body":{"components/MapComponent.html":{}}}],["53.1434501",{"_index":336,"title":{},"body":{"components/MapComponent.html":{}}}],["6",{"_index":851,"title":{},"body":{"index.html":{}}}],["6/6",{"_index":762,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":368,"title":{},"body":{"components/MapComponent.html":{}}}],["8.2145521",{"_index":337,"title":{},"body":{"components/MapComponent.html":{}}}],["a0a0a0",{"_index":898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accessors",{"_index":136,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["activated",{"_index":700,"title":{},"body":{"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["activatedroutesnapshot",{"_index":21,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["active",{"_index":130,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["actual_component",{"_index":114,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["actually",{"_index":277,"title":{},"body":{"components/MapComponent.html":{}}}],["adds",{"_index":180,"title":{},"body":{"components/IonIconComponent.html":{}}}],["administration",{"_index":800,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["afterviewinit",{"_index":236,"title":{},"body":{"components/MapComponent.html":{}}}],["alias",{"_index":399,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":859,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alive",{"_index":63,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["allow",{"_index":177,"title":{},"body":{"components/IonIconComponent.html":{}}}],["already",{"_index":554,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["always",{"_index":310,"title":{},"body":{"components/MapComponent.html":{}}}],["angular",{"_index":190,"title":{},"body":{"components/IonIconComponent.html":{}}}],["angular/common",{"_index":750,"title":{},"body":{"modules/WisdomModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":566,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["angular/core",{"_index":20,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"modules/WisdomModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":23,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["any).options.padding",{"_index":458,"title":{},"body":{"components/MapComponent.html":{}}}],["api",{"_index":573,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["api_url",{"_index":576,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["application/json",{"_index":636,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["arg0",{"_index":869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":272,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["array.from(this.selectedshapes[layerkey",{"_index":541,"title":{},"body":{"components/MapComponent.html":{}}}],["async",{"_index":603,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["asynchronously",{"_index":597,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["attention",{"_index":290,"title":{},"body":{"components/MapComponent.html":{}}}],["attribute",{"_index":201,"title":{},"body":{"components/IonIconComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["attribution",{"_index":477,"title":{},"body":{"components/MapComponent.html":{}}}],["automatically",{"_index":725,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["await",{"_index":447,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["back",{"_index":648,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["base",{"_index":767,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["behaviorsubject",{"_index":24,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{}}}],["beware",{"_index":834,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bkg",{"_index":480,"title":{},"body":{"components/MapComponent.html":{}}}],["boolean",{"_index":77,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["box",{"_index":216,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["breadcrumb",{"_index":1,"title":{"interfaces/Breadcrumb.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"coverage.html":{}}}],["breadcrumbs",{"_index":60,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["breadcrumbs'},{'name",{"_index":105,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["breadcrumbs.component.html",{"_index":62,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["breadcrumbs.service",{"_index":85,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["breadcrumbs/breadcrumbs.component",{"_index":748,"title":{},"body":{"modules/WisdomModule.html":{}}}],["breadcrumbscomponent",{"_index":49,"title":{"components/BreadcrumbsComponent.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["breadcrumbsservice",{"_index":32,"title":{"injectables/BreadcrumbsService.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"coverage.html":{}}}],["browse",{"_index":855,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":852,"title":{},"body":{"modules.html":{}}}],["bulma",{"_index":126,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["bulma/bulma",{"_index":744,"title":{},"body":{"modules/WisdomModule.html":{}}}],["bulmaistoggleabledirective",{"_index":112,"title":{"directives/BulmaIsToggleableDirective.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["button",{"_index":888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["button.style.backgroundimage",{"_index":889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cache",{"_index":602,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["cache.ts",{"_index":769,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cached",{"_index":552,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedkeys",{"_index":625,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedquery",{"_index":612,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedquery.box",{"_index":624,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedquery.shapes",{"_index":619,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["callback",{"_index":868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":689,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["canactivate(route",{"_index":695,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["causing",{"_index":832,"title":{},"body":{"miscellaneous/functions.html":{}}}],["center",{"_index":239,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["centercontent",{"_index":879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["certain",{"_index":677,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["check",{"_index":611,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["class",{"_index":31,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"modules/WisdomModule.html":{}}}],["classes",{"_index":131,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["classes.trim().split(/\\s",{"_index":160,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["clear",{"_index":464,"title":{},"body":{"components/MapComponent.html":{}}}],["click",{"_index":135,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["clicked",{"_index":143,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["clicking",{"_index":127,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["client",{"_index":586,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cluster_wisdommodule",{"_index":733,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["cluster_wisdommodule_declarations",{"_index":735,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["cluster_wisdommodule_exports",{"_index":734,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["code",{"_index":315,"title":{},"body":{"components/MapComponent.html":{}}}],["color",{"_index":486,"title":{},"body":{"components/MapComponent.html":{}}}],["commonmodule",{"_index":749,"title":{},"body":{"modules/WisdomModule.html":{}}}],["complaining",{"_index":196,"title":{},"body":{"components/IonIconComponent.html":{}}}],["component",{"_index":48,"title":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["component_template",{"_index":104,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["components",{"_index":50,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"index.html":{}}}],["config",{"_index":402,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["const",{"_index":449,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["constructor",{"_index":68,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["constructor(elref",{"_index":183,"title":{},"body":{"components/IonIconComponent.html":{}}}],["constructor(http",{"_index":660,"title":{},"body":{"injectables/MapService.html":{}}}],["constructor(private",{"_index":89,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["constructor(router",{"_index":690,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["constructor(service",{"_index":69,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{}}}],["container",{"_index":543,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["container.addeventlistener(\"click",{"_index":887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["containing",{"_index":681,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["content",{"_index":635,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":638,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["context/use",{"_index":572,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["control",{"_index":361,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["coordinates",{"_index":265,"title":{},"body":{"components/MapComponent.html":{},"interfaces/Marker.html":{},"miscellaneous/functions.html":{}}}],["correct",{"_index":193,"title":{},"body":{"components/IonIconComponent.html":{}}}],["counter",{"_index":87,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":753,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covering",{"_index":905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":703,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["currently",{"_index":148,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["curtain",{"_index":904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["curtain.ts",{"_index":772,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["d35a0c",{"_index":312,"title":{},"body":{"components/MapComponent.html":{}}}],["data",{"_index":222,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["data.box[0",{"_index":515,"title":{},"body":{"components/MapComponent.html":{}}}],["data.box[2",{"_index":516,"title":{},"body":{"components/MapComponent.html":{}}}],["data.shapes",{"_index":508,"title":{},"body":{"components/MapComponent.html":{}}}],["data.ts",{"_index":215,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["db",{"_index":547,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["db.createobjectstore(\"queries",{"_index":595,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db.createobjectstore(\"shapes",{"_index":596,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db.deleteobjectstore(\"queries",{"_index":593,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db.deleteobjectstore(\"shapes",{"_index":594,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db_name",{"_index":578,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbschema",{"_index":549,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["de",{"_index":479,"title":{},"body":{"components/MapComponent.html":{}}}],["de/by",{"_index":483,"title":{},"body":{"components/MapComponent.html":{}}}],["declarations",{"_index":738,"title":{},"body":{"modules/WisdomModule.html":{}}}],["decorators",{"_index":144,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{}}}],["default",{"_index":81,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":339,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":70,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["dependencies",{"_index":732,"title":{"dependencies.html":{}},"body":{"modules/WisdomModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":123,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{}}}],["determine",{"_index":901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["digit",{"_index":812,"title":{},"body":{"miscellaneous/functions.html":{}}}],["direct",{"_index":682,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["direction",{"_index":493,"title":{},"body":{"components/MapComponent.html":{}}}],["directive",{"_index":102,"title":{"directives/BulmaIsToggleableDirective.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"coverage.html":{},"index.html":{}}}],["directives",{"_index":111,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["directly",{"_index":198,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["disable",{"_index":908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["display",{"_index":176,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["displayed",{"_index":268,"title":{},"body":{"components/MapComponent.html":{}}}],["displaying",{"_index":234,"title":{},"body":{"components/MapComponent.html":{}}}],["displaylayer",{"_index":467,"title":{},"body":{"components/MapComponent.html":{}}}],["displayname",{"_index":437,"title":{},"body":{"components/MapComponent.html":{}}}],["district",{"_index":389,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/enumerations.html":{}}}],["div",{"_index":885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dl",{"_index":482,"title":{},"body":{"components/MapComponent.html":{}}}],["docs",{"_index":296,"title":{},"body":{"components/MapComponent.html":{}}}],["documentation",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":52,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["dot",{"_index":815,"title":{},"body":{"miscellaneous/functions.html":{}}}],["e.g",{"_index":843,"title":{},"body":{"miscellaneous/functions.html":{}}}],["element",{"_index":101,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["elementclasses",{"_index":137,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["elementclasses(classes",{"_index":158,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["elementref",{"_index":184,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["elements",{"_index":364,"title":{},"body":{"components/MapComponent.html":{}}}],["elref",{"_index":186,"title":{},"body":{"components/IonIconComponent.html":{}}}],["emit",{"_index":328,"title":{},"body":{"components/MapComponent.html":{}}}],["emitselection",{"_index":250,"title":{},"body":{"components/MapComponent.html":{}}}],["emitted",{"_index":270,"title":{},"body":{"components/MapComponent.html":{}}}],["empty",{"_index":287,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["end",{"_index":813,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enforce",{"_index":400,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["entries",{"_index":694,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["entry",{"_index":729,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["enumerations",{"_index":798,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":771,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eventemitter",{"_index":324,"title":{},"body":{"components/MapComponent.html":{}}}],["everything",{"_index":288,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["evt",{"_index":671,"title":{},"body":{"interfaces/Marker.html":{}}}],["exactly",{"_index":383,"title":{},"body":{"components/MapComponent.html":{}}}],["example",{"_index":371,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["executed",{"_index":142,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["expects",{"_index":679,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["export",{"_index":28,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["exported",{"_index":719,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["exports",{"_index":739,"title":{},"body":{"modules/WisdomModule.html":{}}}],["extends",{"_index":548,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["extension",{"_index":893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fails",{"_index":687,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["false",{"_index":97,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/variables.html":{}}}],["feature",{"_index":489,"title":{},"body":{"components/MapComponent.html":{}}}],["feature.properties.key",{"_index":497,"title":{},"body":{"components/MapComponent.html":{}}}],["fetch",{"_index":581,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetched",{"_index":444,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetched[layerkey",{"_index":446,"title":{},"body":{"components/MapComponent.html":{}}}],["fetchlayerdata",{"_index":604,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetchlayerdata(resolution",{"_index":662,"title":{},"body":{"injectables/MapService.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{}}}],["find",{"_index":204,"title":{},"body":{"components/IonIconComponent.html":{}}}],["firstvaluefrom",{"_index":569,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["firstvaluefrom(this.http.get(`${api_url",{"_index":633,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["flat",{"_index":708,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["flex",{"_index":880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["following",{"_index":274,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["force",{"_index":600,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fragments",{"_index":33,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{}}}],["full_res",{"_index":375,"title":{},"body":{"components/MapComponent.html":{}}}],["fully",{"_index":804,"title":{},"body":{"miscellaneous/functions.html":{}}}],["function",{"_index":141,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":801,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["geo",{"_index":228,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["geobasis",{"_index":478,"title":{},"body":{"components/MapComponent.html":{}}}],["geodata",{"_index":577,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["geojson",{"_index":221,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["geojsonlayer",{"_index":475,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonlayer.adddata(object.assign(shape.geojson",{"_index":509,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonlayer.addto(map",{"_index":512,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonobject",{"_index":223,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/typealiases.html":{}}}],["getelementclasses",{"_index":149,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["getresolvedurl",{"_index":785,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getresolvedurl(route",{"_index":803,"title":{},"body":{"miscellaneous/functions.html":{}}}],["give",{"_index":289,"title":{},"body":{"components/MapComponent.html":{}}}],["given",{"_index":286,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["gt",{"_index":820,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gt;&lt;/map&gt",{"_index":392,"title":{},"body":{"components/MapComponent.html":{}}}],["guard",{"_index":672,"title":{"guards/QueryParameterGuard.html":{}},"body":{"guards/QueryParameterGuard.html":{},"coverage.html":{},"index.html":{}}}],["guards",{"_index":674,"title":{},"body":{"guards/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{}}}],["handle",{"_index":910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":634,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["height",{"_index":240,"title":{},"body":{"components/MapComponent.html":{}}}],["height=&quot;70vh&quot",{"_index":373,"title":{},"body":{"components/MapComponent.html":{}}}],["here",{"_index":179,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["hex",{"_index":314,"title":{},"body":{"components/MapComponent.html":{}}}],["holds",{"_index":363,"title":{},"body":{"components/MapComponent.html":{}}}],["host",{"_index":139,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostbinding",{"_index":152,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostbinding(\"class",{"_index":156,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener",{"_index":154,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener(\"click",{"_index":161,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener('click",{"_index":145,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlisteners",{"_index":134,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["html",{"_index":100,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["http",{"_index":571,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpclient",{"_index":562,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpcontext",{"_index":563,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpcontexttoken",{"_index":900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpheaders",{"_index":564,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpparams",{"_index":565,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["https://ionic.io/ionicons",{"_index":208,"title":{},"body":{"components/IonIconComponent.html":{}}}],["https://tile.openstreetmap.org/{z}/{x}/{y}.png",{"_index":365,"title":{},"body":{"components/MapComponent.html":{}}}],["https://wisdom04.vlba.uni",{"_index":298,"title":{},"body":{"components/MapComponent.html":{}}}],["icon",{"_index":10,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"interfaces/Marker.html":{},"miscellaneous/variables.html":{}}}],["icon'},{'name",{"_index":108,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["icon.component",{"_index":746,"title":{},"body":{"modules/WisdomModule.html":{}}}],["icon.component.ts",{"_index":169,"title":{},"body":{"components/IonIconComponent.html":{},"coverage.html":{}}}],["icon.component.ts:12",{"_index":185,"title":{},"body":{"components/IonIconComponent.html":{}}}],["icon.component.ts:31",{"_index":189,"title":{},"body":{"components/IonIconComponent.html":{}}}],["icon.setattribute(\"name",{"_index":892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon.setattribute(\"size",{"_index":895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon.style.color",{"_index":897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon.style.pointerevents",{"_index":891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon/ion",{"_index":168,"title":{},"body":{"components/IonIconComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{}}}],["icons",{"_index":172,"title":{},"body":{"components/IonIconComponent.html":{}}}],["idb",{"_index":568,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["idb.get(\"queries",{"_index":613,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["idb.transaction(\"shapes",{"_index":615,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["idb.transaction([\"queries",{"_index":649,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["identifier",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":553,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["ignore",{"_index":601,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["implement",{"_index":278,"title":{},"body":{"components/MapComponent.html":{}}}],["implementing",{"_index":718,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["implements",{"_index":55,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["import",{"_index":18,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["imports",{"_index":752,"title":{},"body":{"modules/WisdomModule.html":{}}}],["include",{"_index":724,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexed",{"_index":559,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["indexeddb",{"_index":582,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["init",{"_index":333,"title":{},"body":{"components/MapComponent.html":{}}}],["initialize",{"_index":876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":171,"title":{},"body":{"components/IonIconComponent.html":{}}}],["injectable",{"_index":19,"title":{"injectables/BreadcrumbsService.html":{},"injectables/MapService.html":{}},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":115,"title":{},"body":{"injectables/BreadcrumbsService.html":{},"injectables/MapService.html":{},"index.html":{}}}],["injected",{"_index":490,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["inner",{"_index":335,"title":{},"body":{"components/MapComponent.html":{}}}],["input",{"_index":153,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["input(\"center",{"_index":409,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"class",{"_index":155,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["input(\"height",{"_index":405,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"layers",{"_index":417,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"layerselectable",{"_index":420,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"markers",{"_index":422,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"scrollwheelzoom",{"_index":413,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"selectedcolor",{"_index":416,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"tileurl",{"_index":407,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"unselectedcolor",{"_index":415,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"zoom",{"_index":411,"title":{},"body":{"components/MapComponent.html":{}}}],["inputcenter",{"_index":410,"title":{},"body":{"components/MapComponent.html":{}}}],["inputheight",{"_index":406,"title":{},"body":{"components/MapComponent.html":{}}}],["inputlayers",{"_index":259,"title":{},"body":{"components/MapComponent.html":{}}}],["inputlayers(layerconfig",{"_index":418,"title":{},"body":{"components/MapComponent.html":{}}}],["inputlayerselectable",{"_index":421,"title":{},"body":{"components/MapComponent.html":{}}}],["inputmarkers",{"_index":260,"title":{},"body":{"components/MapComponent.html":{}}}],["inputmarkers(markers",{"_index":423,"title":{},"body":{"components/MapComponent.html":{}}}],["inputs",{"_index":133,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["inputscrollwheelzoom",{"_index":414,"title":{},"body":{"components/MapComponent.html":{}}}],["inputtileurl",{"_index":408,"title":{},"body":{"components/MapComponent.html":{}}}],["inputzoom",{"_index":412,"title":{},"body":{"components/MapComponent.html":{}}}],["instant",{"_index":830,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interact",{"_index":263,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Breadcrumb.html":{},"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{}},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Breadcrumb.html":{},"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"index.html":{}}}],["internally",{"_index":327,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["intersection",{"_index":284,"title":{},"body":{"components/MapComponent.html":{}}}],["invert",{"_index":397,"title":{},"body":{"components/MapComponent.html":{}}}],["invertselection",{"_index":867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invertselection(options",{"_index":899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invertselectioncontrol",{"_index":465,"title":{},"body":{"components/MapComponent.html":{}}}],["invertselectioncontrol.addto(map",{"_index":525,"title":{},"body":{"components/MapComponent.html":{}}}],["ion",{"_index":107,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"miscellaneous/variables.html":{}}}],["ioniconcomponent",{"_index":106,"title":{"components/IonIconComponent.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["ionicons",{"_index":173,"title":{},"body":{"components/IonIconComponent.html":{}}}],["isactive",{"_index":132,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["isallset",{"_index":65,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["items",{"_index":882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iterate",{"_index":835,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iterated",{"_index":688,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["itself",{"_index":188,"title":{},"body":{"components/IonIconComponent.html":{}}}],["join",{"_index":166,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["js",{"_index":182,"title":{},"body":{"components/IonIconComponent.html":{}}}],["json",{"_index":359,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["justify",{"_index":883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["k",{"_index":631,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["k.split",{"_index":443,"title":{},"body":{"components/MapComponent.html":{}}}],["k.substring(0",{"_index":630,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["key",{"_index":230,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["key[0",{"_index":555,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keys",{"_index":281,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/typealiases.html":{}}}],["keys.length",{"_index":627,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keys.map(k",{"_index":629,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keys?.map(k",{"_index":442,"title":{},"body":{"components/MapComponent.html":{}}}],["l",{"_index":219,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{}}}],["l.control.extend",{"_index":873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.control.layers",{"_index":463,"title":{},"body":{"components/MapComponent.html":{}}}],["l.controloptions",{"_index":872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.divicon",{"_index":669,"title":{},"body":{"interfaces/Marker.html":{}}}],["l.domutil.create",{"_index":884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.geojson(undefined",{"_index":476,"title":{},"body":{"components/MapComponent.html":{}}}],["l.icon",{"_index":668,"title":{},"body":{"interfaces/Marker.html":{}}}],["l.layer",{"_index":357,"title":{},"body":{"components/MapComponent.html":{}}}],["l.map",{"_index":351,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["l.map(nativemapelement",{"_index":452,"title":{},"body":{"components/MapComponent.html":{}}}],["l.marker(marker.coordinates",{"_index":531,"title":{},"body":{"components/MapComponent.html":{}}}],["l.markerclustergroup",{"_index":527,"title":{},"body":{"components/MapComponent.html":{}}}],["l.path",{"_index":498,"title":{},"body":{"components/MapComponent.html":{}}}],["l.tilelayer(this.tileurl).addto(map",{"_index":460,"title":{},"body":{"components/MapComponent.html":{}}}],["l.util.setoptions(this",{"_index":877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["large",{"_index":896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["later",{"_index":491,"title":{},"body":{"components/MapComponent.html":{}}}],["latitude",{"_index":341,"title":{},"body":{"components/MapComponent.html":{}}}],["layer",{"_index":226,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/typealiases.html":{}}}],["layer.bindtooltip(feature.properties.name",{"_index":492,"title":{},"body":{"components/MapComponent.html":{}}}],["layer.fire(\"click",{"_index":524,"title":{},"body":{"components/MapComponent.html":{}}}],["layer.on(\"click",{"_index":495,"title":{},"body":{"components/MapComponent.html":{}}}],["layerconfig",{"_index":241,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["layerdata",{"_index":213,"title":{"interfaces/LayerData.html":{}},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"coverage.html":{}}}],["layerdata.box",{"_index":659,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["layerdata.shapes",{"_index":653,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["layerdata[\"box",{"_index":580,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["layerkey",{"_index":348,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["layername",{"_index":540,"title":{},"body":{"components/MapComponent.html":{}}}],["layernames",{"_index":242,"title":{},"body":{"components/MapComponent.html":{}}}],["layers",{"_index":252,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["layers.push(layer",{"_index":507,"title":{},"body":{"components/MapComponent.html":{}}}],["layers]=&quot",{"_index":374,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol",{"_index":462,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.addbaselayer(geojsonlayer",{"_index":517,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.addto(map",{"_index":521,"title":{},"body":{"components/MapComponent.html":{}}}],["layerselectable",{"_index":253,"title":{},"body":{"components/MapComponent.html":{}}}],["lazily",{"_index":585,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["leads",{"_index":723,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["leaflet",{"_index":220,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["leaflet.markercluster",{"_index":398,"title":{},"body":{"components/MapComponent.html":{}}}],["leafletmouseevent",{"_index":670,"title":{},"body":{"interfaces/Marker.html":{}}}],["legend",{"_index":99,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["length",{"_index":846,"title":{},"body":{"miscellaneous/functions.html":{}}}],["level",{"_index":323,"title":{},"body":{"components/MapComponent.html":{}}}],["link",{"_index":11,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["literal",{"_index":551,"title":{},"body":{"interfaces/MapDB.html":{}}}],["lmarker",{"_index":530,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.addto(markerlayer",{"_index":538,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.bindtooltip(marker.tooltip",{"_index":535,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.on(\"click",{"_index":537,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.seticon(marker.icon",{"_index":533,"title":{},"body":{"components/MapComponent.html":{}}}],["loader",{"_index":575,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["loader.ts",{"_index":774,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["loading",{"_index":918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["longer",{"_index":917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["longitude",{"_index":340,"title":{},"body":{"components/MapComponent.html":{}}}],["look",{"_index":599,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["lt;map",{"_index":372,"title":{},"body":{"components/MapComponent.html":{}}}],["lx",{"_index":396,"title":{},"body":{"components/MapComponent.html":{}}}],["lx.control.invertselection",{"_index":523,"title":{},"body":{"components/MapComponent.html":{}}}],["main",{"_index":907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["make",{"_index":202,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["making",{"_index":124,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["map",{"_index":110,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["map(str",{"_index":455,"title":{},"body":{"components/MapComponent.html":{}}}],["map.component.css",{"_index":238,"title":{},"body":{"components/MapComponent.html":{}}}],["map.fitbounds",{"_index":514,"title":{},"body":{"components/MapComponent.html":{}}}],["map.getrenderer(map",{"_index":457,"title":{},"body":{"components/MapComponent.html":{}}}],["map.on(\"baselayerchange",{"_index":519,"title":{},"body":{"components/MapComponent.html":{}}}],["map.removecontrol(invertselectioncontrol",{"_index":522,"title":{},"body":{"components/MapComponent.html":{}}}],["map.removecontrol(layerscontrol",{"_index":470,"title":{},"body":{"components/MapComponent.html":{}}}],["map.removelayer(this.selectedgeojsonlayer",{"_index":472,"title":{},"body":{"components/MapComponent.html":{}}}],["map.service",{"_index":395,"title":{},"body":{"components/MapComponent.html":{}}}],["map/map.component",{"_index":747,"title":{},"body":{"modules/WisdomModule.html":{}}}],["mapcomponent",{"_index":109,"title":{"components/MapComponent.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["mapcomponent.inputlayers",{"_index":403,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["mapdb",{"_index":544,"title":{"interfaces/MapDB.html":{}},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{}}}],["mapelement",{"_index":243,"title":{},"body":{"components/MapComponent.html":{}}}],["mapped",{"_index":350,"title":{},"body":{"components/MapComponent.html":{}}}],["maps",{"_index":235,"title":{},"body":{"components/MapComponent.html":{}}}],["mapservice",{"_index":261,"title":{"injectables/MapService.html":{}},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{}}}],["marker",{"_index":303,"title":{"interfaces/Marker.html":{}},"body":{"components/MapComponent.html":{},"interfaces/Marker.html":{},"coverage.html":{}}}],["marker.icon",{"_index":532,"title":{},"body":{"components/MapComponent.html":{}}}],["marker.onclick",{"_index":536,"title":{},"body":{"components/MapComponent.html":{}}}],["marker.tooltip",{"_index":534,"title":{},"body":{"components/MapComponent.html":{}}}],["markerlayer",{"_index":526,"title":{},"body":{"components/MapComponent.html":{}}}],["markerlayer.addto(map",{"_index":539,"title":{},"body":{"components/MapComponent.html":{}}}],["markerlayer.removefrom(map",{"_index":529,"title":{},"body":{"components/MapComponent.html":{}}}],["markers",{"_index":244,"title":{},"body":{"components/MapComponent.html":{}}}],["marker}s",{"_index":425,"title":{},"body":{"components/MapComponent.html":{}}}],["matching",{"_index":47,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["meaning",{"_index":401,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["message",{"_index":903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":58,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["method",{"_index":831,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methods",{"_index":64,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["miscellaneous",{"_index":797,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mixed",{"_index":387,"title":{},"body":{"components/MapComponent.html":{}}}],["modifies",{"_index":199,"title":{},"body":{"components/IonIconComponent.html":{}}}],["module",{"_index":714,"title":{"modules/WisdomModule.html":{}},"body":{"interfaces/WisdomInterface.html":{},"index.html":{}}}],["modules",{"_index":713,"title":{"modules.html":{}},"body":{"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"modules.html":{}}}],["more",{"_index":701,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["mouse",{"_index":308,"title":{},"body":{"components/MapComponent.html":{}}}],["mouseevent",{"_index":870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["municipal",{"_index":377,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/enumerations.html":{}}}],["name",{"_index":73,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{}}}],["name(name",{"_index":211,"title":{},"body":{"components/IonIconComponent.html":{}}}],["names",{"_index":205,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["namespace",{"_index":730,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["native",{"_index":200,"title":{},"body":{"components/IonIconComponent.html":{}}}],["nativemapelement",{"_index":450,"title":{},"body":{"components/MapComponent.html":{}}}],["necessary",{"_index":194,"title":{},"body":{"components/IonIconComponent.html":{}}}],["needed",{"_index":191,"title":{},"body":{"components/IonIconComponent.html":{}}}],["needs",{"_index":291,"title":{},"body":{"components/MapComponent.html":{}}}],["new",{"_index":35,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":95,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["ngafterviewinit",{"_index":251,"title":{},"body":{"components/MapComponent.html":{}}}],["ngmodule",{"_index":740,"title":{},"body":{"modules/WisdomModule.html":{}}}],["ngondestroy",{"_index":66,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["ngoninit",{"_index":67,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{}}}],["ngx",{"_index":742,"title":{},"body":{"modules/WisdomModule.html":{}}}],["node",{"_index":128,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["none",{"_index":890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["null",{"_index":280,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["num",{"_index":816,"title":{},"body":{"miscellaneous/functions.html":{}}}],["number",{"_index":37,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nutskey",{"_index":231,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["obj",{"_index":826,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":717,"title":{},"body":{"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.entries(config",{"_index":438,"title":{},"body":{"components/MapComponent.html":{}}}],["object.entries(layerdata",{"_index":473,"title":{},"body":{"components/MapComponent.html":{}}}],["object.entries(requests",{"_index":445,"title":{},"body":{"components/MapComponent.html":{}}}],["object.keys(layerdata).length",{"_index":520,"title":{},"body":{"components/MapComponent.html":{}}}],["observable",{"_index":25,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["observe",{"_index":43,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["official",{"_index":206,"title":{},"body":{"components/IonIconComponent.html":{}}}],["oldenburg",{"_index":342,"title":{},"body":{"components/MapComponent.html":{}}}],["oldenburg.de/repos/service",{"_index":299,"title":{},"body":{"components/MapComponent.html":{}}}],["oldv",{"_index":592,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["onadd",{"_index":878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onclick",{"_index":666,"title":{},"body":{"interfaces/Marker.html":{}}}],["ondestroy",{"_index":57,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["one",{"_index":292,"title":{},"body":{"components/MapComponent.html":{}}}],["oneachfeature",{"_index":488,"title":{},"body":{"components/MapComponent.html":{}}}],["oninit",{"_index":56,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{}}}],["only_keys",{"_index":380,"title":{},"body":{"components/MapComponent.html":{}}}],["onto",{"_index":311,"title":{},"body":{"components/MapComponent.html":{}}}],["opendb",{"_index":567,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["opendb(db_name",{"_index":590,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations",{"_index":618,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(querystore.put",{"_index":658,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(shapestore.put(shape",{"_index":654,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(store.get(key).then(shape",{"_index":620,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(tx.done",{"_index":622,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["option",{"_index":306,"title":{},"body":{"components/MapComponent.html":{}}}],["optional",{"_index":9,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["order",{"_index":842,"title":{},"body":{"miscellaneous/functions.html":{}}}],["osm",{"_index":367,"title":{},"body":{"components/MapComponent.html":{}}}],["out",{"_index":736,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["output",{"_index":329,"title":{},"body":{"components/MapComponent.html":{}}}],["outputs",{"_index":257,"title":{},"body":{"components/MapComponent.html":{}}}],["overview",{"_index":849,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":792,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pairs",{"_index":347,"title":{},"body":{"components/MapComponent.html":{}}}],["param",{"_index":210,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["parameter.guard.ts",{"_index":676,"title":{},"body":{"guards/QueryParameterGuard.html":{},"coverage.html":{}}}],["parameter.guard.ts:19",{"_index":692,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["parameter.guard.ts:35",{"_index":698,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["parameters",{"_index":72,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["parameters[0",{"_index":224,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/ShapeData.html":{}}}],["params",{"_index":17,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["params.appendall({key",{"_index":628,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["params.set(\"resolution",{"_index":626,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["parse",{"_index":693,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["parsefloat(str",{"_index":456,"title":{},"body":{"components/MapComponent.html":{}}}],["parseint(this.inputzoom",{"_index":434,"title":{},"body":{"components/MapComponent.html":{}}}],["passed",{"_index":309,"title":{},"body":{"components/MapComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["path",{"_index":496,"title":{},"body":{"components/MapComponent.html":{}}}],["path.bringtoback",{"_index":501,"title":{},"body":{"components/MapComponent.html":{}}}],["path.bringtofront",{"_index":504,"title":{},"body":{"components/MapComponent.html":{}}}],["path.setstyle({color",{"_index":500,"title":{},"body":{"components/MapComponent.html":{}}}],["peer",{"_index":795,"title":{},"body":{"dependencies.html":{}}}],["pipe(takewhile",{"_index":91,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["position",{"_index":874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prepare",{"_index":606,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["presentation",{"_index":810,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pretty",{"_index":817,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prettyprintnum",{"_index":786,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["prettyprintnum(12345678",{"_index":819,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prettyprintnum(num",{"_index":809,"title":{},"body":{"miscellaneous/functions.html":{}}}],["print",{"_index":818,"title":{},"body":{"miscellaneous/functions.html":{}}}],["private",{"_index":34,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["promise",{"_index":605,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["promise.all(operations",{"_index":623,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["properly",{"_index":293,"title":{},"body":{"components/MapComponent.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"properties.html":{}}}],["provide",{"_index":715,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["providedin",{"_index":29,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["provides",{"_index":727,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["puzzle",{"_index":894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queries",{"_index":550,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["query",{"_index":12,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["querykey",{"_index":610,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["queryparameterguard",{"_index":673,"title":{"guards/QueryParameterGuard.html":{}},"body":{"guards/QueryParameterGuard.html":{},"coverage.html":{}}}],["queryparams",{"_index":684,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["querystore",{"_index":656,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["quot",{"_index":391,"title":{},"body":{"components/MapComponent.html":{}}}],["quot;12.345.678&quot",{"_index":821,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rawlayerdata",{"_index":632,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawlayerdata.shapes",{"_index":641,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawlayerdata.shapes.map(rawshape",{"_index":642,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawshape",{"_index":645,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawshape.geojson",{"_index":644,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawshape.nuts_key",{"_index":643,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["readonly",{"_index":587,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["readwrite",{"_index":650,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["received",{"_index":227,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["reconstruct",{"_index":561,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["record",{"_index":269,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["recreated",{"_index":806,"title":{},"body":{"miscellaneous/functions.html":{}}}],["redirect",{"_index":686,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["redirectto",{"_index":680,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["ref",{"_index":355,"title":{},"body":{"components/MapComponent.html":{}}}],["reference",{"_index":187,"title":{},"body":{"components/IonIconComponent.html":{}}}],["render",{"_index":192,"title":{},"body":{"components/IonIconComponent.html":{}}}],["renders",{"_index":331,"title":{},"body":{"components/MapComponent.html":{}}}],["represent",{"_index":225,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["represents",{"_index":556,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["request",{"_index":588,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["requested",{"_index":647,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["requests",{"_index":436,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["requests[layerkey",{"_index":440,"title":{},"body":{"components/MapComponent.html":{}}}],["required",{"_index":726,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["res",{"_index":848,"title":{},"body":{"miscellaneous/functions.html":{}}}],["reset",{"_index":468,"title":{},"body":{"components/MapComponent.html":{},"modules/WisdomModule.html":{},"index.html":{}}}],["resolution",{"_index":279,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["resolution&#39",{"_index":378,"title":{},"body":{"components/MapComponent.html":{}}}],["resolution.district",{"_index":390,"title":{},"body":{"components/MapComponent.html":{}}}],["resolution.municipal",{"_index":379,"title":{},"body":{"components/MapComponent.html":{}}}],["resolution.tokeylength(resolution",{"_index":609,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["resolutionnum",{"_index":608,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["resolved",{"_index":805,"title":{},"body":{"miscellaneous/functions.html":{}}}],["resolving",{"_index":285,"title":{},"body":{"components/MapComponent.html":{}}}],["respond",{"_index":294,"title":{},"body":{"components/MapComponent.html":{}}}],["responsetype",{"_index":637,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rest",{"_index":557,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rest/main/api/get",{"_index":300,"title":{},"body":{"components/MapComponent.html":{}}}],["results",{"_index":46,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":584,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["return",{"_index":44,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":558,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["returns",{"_index":76,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["root",{"_index":30,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["route",{"_index":678,"title":{},"body":{"guards/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{}}}],["route.data[\"queryparams",{"_index":707,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["route.data[\"redirect",{"_index":704,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["route.queryparams[param",{"_index":709,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["router",{"_index":691,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["router#parseurl",{"_index":683,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["routermodule",{"_index":751,"title":{},"body":{"modules/WisdomModule.html":{}}}],["routerstatesnapshot",{"_index":697,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["run",{"_index":914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":27,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["schema",{"_index":546,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["schema_v",{"_index":579,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["scopes",{"_index":721,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["scroll",{"_index":307,"title":{},"body":{"components/MapComponent.html":{}}}],["scrollwheelzoom",{"_index":254,"title":{},"body":{"components/MapComponent.html":{}}}],["see",{"_index":297,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["select",{"_index":886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["selectable",{"_index":302,"title":{},"body":{"components/MapComponent.html":{}}}],["selected",{"_index":258,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedcolor",{"_index":255,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedgeojsonlayer",{"_index":245,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedlayer",{"_index":246,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes",{"_index":247,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes.add(key",{"_index":505,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes.delete(key",{"_index":502,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes.has(key",{"_index":499,"title":{},"body":{"components/MapComponent.html":{}}}],["selection",{"_index":271,"title":{},"body":{"components/MapComponent.html":{}}}],["selection.ts",{"_index":776,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selector",{"_index":59,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["sent",{"_index":902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["separated",{"_index":814,"title":{},"body":{"miscellaneous/functions.html":{}}}],["server",{"_index":229,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["service",{"_index":74,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":116,"title":{},"body":{"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["set(index",{"_index":36,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["set(use_api_url",{"_index":639,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["set(use_loader",{"_index":640,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["setelementclasses(classes",{"_index":150,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["setinputlayers(layerconfig",{"_index":370,"title":{},"body":{"components/MapComponent.html":{}}}],["setinputmarkers(markers",{"_index":393,"title":{},"body":{"components/MapComponent.html":{}}}],["setname(name",{"_index":209,"title":{},"body":{"components/IonIconComponent.html":{}}}],["sets",{"_index":334,"title":{},"body":{"components/MapComponent.html":{}}}],["setter",{"_index":197,"title":{},"body":{"components/IonIconComponent.html":{}}}],["shape",{"_index":283,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shape.key",{"_index":511,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shape.name",{"_index":510,"title":{},"body":{"components/MapComponent.html":{}}}],["shapedata",{"_index":218,"title":{"interfaces/ShapeData.html":{}},"body":{"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"coverage.html":{}}}],["shapekeys",{"_index":652,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapekeys.push(shape.key",{"_index":655,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapes",{"_index":217,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["shapes.push(shape",{"_index":621,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapestore",{"_index":651,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["show",{"_index":382,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["shown",{"_index":913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["simply",{"_index":560,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["snapshot",{"_index":702,"title":{},"body":{"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["solution",{"_index":807,"title":{},"body":{"miscellaneous/functions.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["split",{"_index":454,"title":{},"body":{"components/MapComponent.html":{}}}],["split(\"is",{"_index":165,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["src/.../breadcrumbs.component.ts",{"_index":865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../invert",{"_index":864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../layer",{"_index":860,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../map.component.ts",{"_index":861,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../map.service.ts",{"_index":863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../resolution.ts",{"_index":799,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../use",{"_index":866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../util.ts",{"_index":802,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts",{"_index":54,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:13",{"_index":83,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:14",{"_index":71,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:18",{"_index":80,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:26",{"_index":75,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:30",{"_index":78,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts",{"_index":6,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"coverage.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:16",{"_index":119,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:17",{"_index":120,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:20",{"_index":118,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:26",{"_index":117,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/bulma/bulma",{"_index":121,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"coverage.html":{}}}],["src/lib/guards/query",{"_index":675,"title":{},"body":{"guards/QueryParameterGuard.html":{},"coverage.html":{}}}],["src/lib/http",{"_index":764,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/ion",{"_index":167,"title":{},"body":{"components/IonIconComponent.html":{},"coverage.html":{}}}],["src/lib/map/invert",{"_index":775,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/map/layer",{"_index":214,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/map/map.component.ts",{"_index":233,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/map/map.component.ts:131",{"_index":267,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:139",{"_index":345,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:145",{"_index":346,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:150",{"_index":349,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:153",{"_index":301,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:156",{"_index":304,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:160",{"_index":356,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:163",{"_index":352,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:170",{"_index":362,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:176",{"_index":360,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:178",{"_index":358,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:181",{"_index":325,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:185",{"_index":262,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:196",{"_index":332,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:226",{"_index":330,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:352",{"_index":326,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:53",{"_index":354,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:56",{"_index":266,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:58",{"_index":344,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:61",{"_index":316,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:63",{"_index":366,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:66",{"_index":264,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:68",{"_index":338,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:71",{"_index":322,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:73",{"_index":369,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:79",{"_index":305,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:82",{"_index":320,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:84",{"_index":313,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.service.ts",{"_index":545,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/map/map.service.ts:67",{"_index":661,"title":{},"body":{"injectables/MapService.html":{}}}],["src/lib/map/map.service.ts:94",{"_index":663,"title":{},"body":{"injectables/MapService.html":{}}}],["src/lib/map/marker.ts",{"_index":665,"title":{},"body":{"interfaces/Marker.html":{},"coverage.html":{}}}],["src/lib/map/resolution.ts",{"_index":781,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/lib/util.ts",{"_index":784,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/wisdom.module.ts",{"_index":737,"title":{},"body":{"modules/WisdomModule.html":{}}}],["src/wisdominterface.ts",{"_index":711,"title":{},"body":{"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["stackoverflow",{"_index":808,"title":{},"body":{"miscellaneous/functions.html":{}}}],["state",{"_index":696,"title":{},"body":{"guards/QueryParameterGuard.html":{},"miscellaneous/enumerations.html":{}}}],["statements",{"_index":756,"title":{},"body":{"coverage.html":{}}}],["stops",{"_index":195,"title":{},"body":{"components/IonIconComponent.html":{}}}],["store",{"_index":616,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["stored",{"_index":598,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["str",{"_index":823,"title":{},"body":{"miscellaneous/functions.html":{}}}],["string",{"_index":14,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":685,"title":{},"body":{"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["stringtocolor",{"_index":787,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stringtocolor(str",{"_index":822,"title":{},"body":{"miscellaneous/functions.html":{}}}],["style",{"_index":485,"title":{},"body":{"components/MapComponent.html":{}}}],["styles",{"_index":232,"title":{},"body":{"components/MapComponent.html":{}}}],["styleurls",{"_index":237,"title":{},"body":{"components/MapComponent.html":{}}}],["subject",{"_index":26,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{}}}],["subscribe(next",{"_index":93,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["such",{"_index":716,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["support",{"_index":853,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":854,"title":{},"body":{"modules.html":{}}}],["swap",{"_index":838,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sync",{"_index":833,"title":{},"body":{"miscellaneous/functions.html":{}}}],["t",{"_index":827,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":791,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":790,"title":{},"body":{"coverage.html":{}}}],["takewhile",{"_index":86,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["template",{"_index":51,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["templateurl",{"_index":61,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["text",{"_index":13,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{}}}],["therefore",{"_index":583,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["these&#39",{"_index":384,"title":{},"body":{"components/MapComponent.html":{}}}],["things",{"_index":125,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["third",{"_index":811,"title":{},"body":{"miscellaneous/functions.html":{}}}],["this.alive",{"_index":92,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.center",{"_index":431,"title":{},"body":{"components/MapComponent.html":{}}}],["this.classes",{"_index":159,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.classes.join",{"_index":157,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.classes.push(\"is",{"_index":163,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.elementclasses",{"_index":164,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.elref.nativeelement?.setattribute(\"name",{"_index":212,"title":{},"body":{"components/IonIconComponent.html":{}}}],["this.emitselection",{"_index":506,"title":{},"body":{"components/MapComponent.html":{}}}],["this.fragments",{"_index":94,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.fragments.includes(undefined",{"_index":96,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.fragments.length",{"_index":39,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.fragments[index",{"_index":41,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.height",{"_index":427,"title":{},"body":{"components/MapComponent.html":{}}}],["this.idb",{"_index":589,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["this.inputcenter",{"_index":430,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputheight",{"_index":426,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputlayerselectable",{"_index":494,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputscrollwheelzoom",{"_index":453,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputtileurl",{"_index":428,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputzoom",{"_index":432,"title":{},"body":{"components/MapComponent.html":{}}}],["this.isactive",{"_index":162,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.layerconfig.next(layerconfig",{"_index":419,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerconfig.subscribe(async",{"_index":435,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerdata.next(fetched",{"_index":448,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerdata.subscribe(layerdata",{"_index":466,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layernames[key",{"_index":518,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layernames[layerkey",{"_index":439,"title":{},"body":{"components/MapComponent.html":{}}}],["this.map",{"_index":461,"title":{},"body":{"components/MapComponent.html":{}}}],["this.mapelement.nativeelement",{"_index":451,"title":{},"body":{"components/MapComponent.html":{}}}],["this.markers.next(markers",{"_index":424,"title":{},"body":{"components/MapComponent.html":{}}}],["this.markers.subscribe(markers",{"_index":528,"title":{},"body":{"components/MapComponent.html":{}}}],["this.router.parseurl(redirect",{"_index":706,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["this.selected.emit",{"_index":542,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedcolor",{"_index":503,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedgeojsonlayer",{"_index":471,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedlayer",{"_index":513,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedshapes",{"_index":469,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedshapes[key",{"_index":474,"title":{},"body":{"components/MapComponent.html":{}}}],["this.service.fetchlayerdata",{"_index":441,"title":{},"body":{"components/MapComponent.html":{}}}],["this.service.observe",{"_index":90,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.subject.asobservable",{"_index":45,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.subject.next(this.fragments",{"_index":42,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.tileurl",{"_index":429,"title":{},"body":{"components/MapComponent.html":{}}}],["this.unselectedcolor",{"_index":487,"title":{},"body":{"components/MapComponent.html":{}}}],["this.zoom",{"_index":433,"title":{},"body":{"components/MapComponent.html":{}}}],["through",{"_index":836,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["tile",{"_index":317,"title":{},"body":{"components/MapComponent.html":{}}}],["tileurl",{"_index":248,"title":{},"body":{"components/MapComponent.html":{}}}],["times",{"_index":919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todo",{"_index":276,"title":{},"body":{"components/MapComponent.html":{}}}],["toenum",{"_index":782,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["toenum(length",{"_index":845,"title":{},"body":{"miscellaneous/functions.html":{}}}],["toggle",{"_index":129,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"miscellaneous/variables.html":{}}}],["toggleable",{"_index":113,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["toggleable.directive",{"_index":745,"title":{},"body":{"modules/WisdomModule.html":{}}}],["toggleable.directive.ts",{"_index":122,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"coverage.html":{}}}],["toggleable.directive.ts:15",{"_index":147,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:17",{"_index":146,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:22",{"_index":138,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:26",{"_index":151,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:36",{"_index":140,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["tokeylength",{"_index":783,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tokeylength(res",{"_index":847,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tooltip",{"_index":667,"title":{},"body":{"interfaces/Marker.html":{}}}],["top",{"_index":728,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["topright",{"_index":875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["translate",{"_index":98,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"miscellaneous/functions.html":{}}}],["translate/core",{"_index":743,"title":{},"body":{"modules/WisdomModule.html":{}}}],["translated",{"_index":916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["translatemodule",{"_index":741,"title":{},"body":{"modules/WisdomModule.html":{}}}],["translateobject",{"_index":788,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["translateobject(service",{"_index":824,"title":{},"body":{"miscellaneous/functions.html":{}}}],["translateservice",{"_index":825,"title":{},"body":{"miscellaneous/functions.html":{}}}],["translation",{"_index":275,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["translations",{"_index":722,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["translator",{"_index":915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":53,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["trimmedkeys",{"_index":607,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["true",{"_index":82,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["tuple",{"_index":839,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tupleswap",{"_index":789,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tupleswap(tuple",{"_index":837,"title":{},"body":{"miscellaneous/functions.html":{}}}],["two",{"_index":844,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tx",{"_index":614,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["tx.objectstore(\"queries",{"_index":657,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["tx.objectstore(\"shapes",{"_index":617,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["type",{"_index":15,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":858,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":705,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["undefined",{"_index":84,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["under",{"_index":720,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["unknown",{"_index":646,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["unselected",{"_index":321,"title":{},"body":{"components/MapComponent.html":{}}}],["unselectedcolor",{"_index":256,"title":{},"body":{"components/MapComponent.html":{}}}],["update",{"_index":295,"title":{},"body":{"components/MapComponent.html":{}}}],["upgrade(db",{"_index":591,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["url",{"_index":318,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["url.ts",{"_index":765,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["urltree",{"_index":22,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"guards/QueryParameterGuard.html":{}}}],["use",{"_index":178,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["use_api_url",{"_index":570,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_base_url",{"_index":768,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_cache",{"_index":770,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_error_curtain",{"_index":773,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_loader",{"_index":574,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":170,"title":{},"body":{"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":840,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["uses",{"_index":174,"title":{},"body":{"components/IonIconComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{}}}],["using",{"_index":829,"title":{},"body":{"miscellaneous/functions.html":{}}}],["utility",{"_index":828,"title":{},"body":{"miscellaneous/functions.html":{}}}],["value",{"_index":38,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":273,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["var",{"_index":103,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["variable",{"_index":759,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":862,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":856,"title":{},"body":{"properties.html":{}}}],["via",{"_index":181,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["viewchild",{"_index":394,"title":{},"body":{"components/MapComponent.html":{}}}],["viewchild(\"map",{"_index":404,"title":{},"body":{"components/MapComponent.html":{}}}],["viewchild('map",{"_index":353,"title":{},"body":{"components/MapComponent.html":{}}}],["void",{"_index":79,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"miscellaneous/variables.html":{}}}],["want",{"_index":909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webcomponents",{"_index":175,"title":{},"body":{"components/IonIconComponent.html":{}}}],["website",{"_index":207,"title":{},"body":{"components/IonIconComponent.html":{}}}],["whether",{"_index":699,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["whole",{"_index":906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wisdom",{"_index":712,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["wisdominterface",{"_index":710,"title":{"interfaces/WisdomInterface.html":{}},"body":{"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["wisdommodule",{"_index":731,"title":{"modules/WisdomModule.html":{}},"body":{"modules/WisdomModule.html":{},"index.html":{},"modules.html":{}}}],["without",{"_index":282,"title":{},"body":{"components/MapComponent.html":{}}}],["work",{"_index":203,"title":{},"body":{"components/IonIconComponent.html":{}}}],["wrong",{"_index":841,"title":{},"body":{"miscellaneous/functions.html":{}}}],["yes",{"_index":664,"title":{},"body":{"injectables/MapService.html":{},"miscellaneous/functions.html":{}}}],["yourself",{"_index":912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":249,"title":{},"body":{"components/MapComponent.html":{},"modules/WisdomModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Breadcrumb.html":{"url":"interfaces/Breadcrumb.html","title":"interface - Breadcrumb","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Breadcrumb\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/breadcrumbs/breadcrumbs.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                        \n                                            link\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            query\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:         Params\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Params\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {ActivatedRouteSnapshot, Params, UrlTree} from \"@angular/router\";\nimport {BehaviorSubject, Observable, Subject} from \"rxjs\";\n\nexport interface Breadcrumb {\n  icon?: string,\n  text: string | string[],\n  link: string,\n  query?: Params\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BreadcrumbsService {\n  fragments: Breadcrumb[] = [];\n  private subject: BehaviorSubject\n    = new BehaviorSubject([]);\n\n  set(index: number, value: Breadcrumb) {\n    this.fragments.length = index + 1;\n    this.fragments[index] = value;\n    this.subject.next(this.fragments);\n  }\n\n  observe(): Observable {\n    return this.subject.asObservable();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BreadcrumbsComponent.html":{"url":"components/BreadcrumbsComponent.html","title":"component - BreadcrumbsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BreadcrumbsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/breadcrumbs/breadcrumbs.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                breadcrumbs\n            \n\n\n\n\n            \n                templateUrl\n                ./breadcrumbs.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                alive\n                            \n                            \n                                fragments\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isAllSet\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: BreadcrumbsService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        BreadcrumbsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isAllSet\n                        \n                    \n                \n            \n            \n                \nisAllSet()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        alive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fragments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         (Breadcrumb | undefined)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Breadcrumb, BreadcrumbsService} from \"./breadcrumbs.service\";\nimport {ActivatedRouteSnapshot} from \"@angular/router\";\nimport {takeWhile} from \"rxjs\";\n\nlet counter = 0;\n\n@Component({\n  selector: 'breadcrumbs',\n  templateUrl: './breadcrumbs.component.html'\n})\nexport class BreadcrumbsComponent implements OnInit, OnDestroy {\n  private alive: boolean = true;\n  fragments: (Breadcrumb | undefined)[] = [];\n\n  constructor(private service: BreadcrumbsService) { }\n\n  ngOnInit(): void {\n    this.service.observe()\n      .pipe(takeWhile(() => this.alive))\n      .subscribe(next => {\n      this.fragments = next\n    });\n  }\n\n  isAllSet(): boolean {\n    return !this.fragments.includes(undefined);\n  }\n\n  ngOnDestroy(): void {\n    this.alive = false;\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n          \n            \n          \n          \n            \n              {{text | translate}}\n            \n          \n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                        {{text | translate}}                                          '\n    var COMPONENTS = [{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'BreadcrumbsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BreadcrumbsService.html":{"url":"injectables/BreadcrumbsService.html","title":"injectable - BreadcrumbsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BreadcrumbsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/breadcrumbs/breadcrumbs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fragments\n                            \n                            \n                                    Private\n                                subject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                observe\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        observe\n                        \n                    \n                \n            \n            \n                \nobserve()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(index: number, value: Breadcrumb)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                Breadcrumb\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fragments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Breadcrumb[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {ActivatedRouteSnapshot, Params, UrlTree} from \"@angular/router\";\nimport {BehaviorSubject, Observable, Subject} from \"rxjs\";\n\nexport interface Breadcrumb {\n  icon?: string,\n  text: string | string[],\n  link: string,\n  query?: Params\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BreadcrumbsService {\n  fragments: Breadcrumb[] = [];\n  private subject: BehaviorSubject\n    = new BehaviorSubject([]);\n\n  set(index: number, value: Breadcrumb) {\n    this.fragments.length = index + 1;\n    this.fragments[index] = value;\n    this.subject.next(this.fragments);\n  }\n\n  observe(): Observable {\n    return this.subject.asObservable();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/BulmaIsToggleableDirective.html":{"url":"directives/BulmaIsToggleableDirective.html","title":"directive - BulmaIsToggleableDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  BulmaIsToggleableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/bulma/bulma-is-toggleable.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Directive for making things toggleable with bulma.\nClicking on the node that has this directive will toggle the \"is-active\"\nclass.\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        .is-toggleable\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                classes\n                            \n                            \n                                    Private\n                                isActive\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toggle\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    elementClasses\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        class\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:22\n                            \n                        \n                \n                    \n                        The classes of the host node.\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:36\n                \n            \n\n\n            \n                \n                    Function to be executed when the host is clicked.\nWill toggle the \"is-active\" class on the host node.\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toggle\n                        \n                    \n                \n            \n            \n                \ntoggle()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click')\n                \n            \n\n            \n                \n                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:36\n                \n            \n\n\n            \n                \n                    Function to be executed when the host is clicked.\nWill toggle the \"is-active\" class on the host node.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        classes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:17\n                        \n                    \n\n            \n                \n                    The classes of the host node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:15\n                        \n                    \n\n            \n                \n                    Is the host currently active.\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        elementClasses\n                    \n                \n\n                \n                    \n                        getelementClasses()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:22\n                                \n                            \n                    \n                        \n                                The classes of the host node.\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        setelementClasses(classes: string)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:26\n                                \n                            \n                    \n                        \n                                Set the classes of the host node.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            classes\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import {HostBinding, Directive, Input, HostListener} from \"@angular/core\";\n\n/**\n * Directive for making things toggleable with bulma.\n *\n * Clicking on the node that has this directive will toggle the \"is-active\"\n * class.\n */\n@Directive({\n  selector: \".is-toggleable\"\n})\nexport class BulmaIsToggleableDirective {\n\n  /** Is the host currently active. */\n  private isActive: boolean = false;\n  /** The classes of the host node. */\n  private classes: string[] = [];\n\n  /** The classes of the host node. */\n  @Input(\"class\")\n  @HostBinding(\"class\")\n  get elementClasses(): string {\n    return this.classes.join(\" \");\n  }\n  /** Set the classes of the host node. */\n  set elementClasses(classes: string) {\n    this.classes = classes.trim().split(/\\s+/);\n  }\n\n  /**\n   * Function to be executed when the host is clicked.\n   *\n   * Will toggle the \"is-active\" class on the host node.\n   */\n  @HostListener(\"click\")\n  toggle() {\n    this.isActive = !this.isActive;\n    if (this.isActive) this.classes.push(\"is-active\")\n    else {\n      this.elementClasses = this.elementClasses\n        .split(\"is-active\")\n        .join(\"\");\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/IonIconComponent.html":{"url":"components/IonIconComponent.html","title":"component - IonIconComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  IonIconComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/ion-icon/ion-icon.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component is used to inject the icons from IonIcons.\nIonIcons uses WebComponents to display the icons.\nTo allow to use them here, this component adds the icons via js.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ion-icon\n            \n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(elRef: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ion-icon/ion-icon.component.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elRef\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Element reference to itself\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ion-icon/ion-icon.component.ts:31\n                            \n                        \n                \n                    \n                        The name of the icon.\nIs not used by angular but needed to render the correct icon and necessary\nso that angular stops complaining.\nThis setter also directly modifies the native element to have the \"name\"\ndirectly as an attribute which is needed to make ion icons work.\nYou can find the names at the official website\nhttps://ionic.io/ionicons.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n\n                \n                    \n                        setname(name: string | undefined)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/ion-icon/ion-icon.component.ts:31\n                                \n                            \n                    \n                        \n                                The name of the icon.\nIs not used by angular but needed to render the correct icon and necessary\nso that angular stops complaining.\nThis setter also directly modifies the native element to have the \"name\"\ndirectly as an attribute which is needed to make ion icons work.\nYou can find the names at the official website\nhttps://ionic.io/ionicons.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            name\n                                                    \n                                                            \n                                                                        string | undefined\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {Component, ElementRef, Input} from \"@angular/core\";\n\n/**\n * This component is used to inject the icons from IonIcons.\n * IonIcons uses WebComponents to display the icons.\n * To allow to use them here, this component adds the icons via js.\n */\n@Component({\n  selector: \"ion-icon\",\n  template: \"\"\n})\nexport class IonIconComponent {\n\n  /**\n   * Constructor.\n   * @param elRef Element reference to itself\n   */\n  constructor(private elRef: ElementRef) {}\n\n  /**\n   * The name of the icon.\n   * Is not used by angular but needed to render the correct icon and necessary\n   * so that angular stops complaining.\n   *\n   * This setter also directly modifies the native element to have the \"name\"\n   * directly as an attribute which is needed to make ion icons work.\n   *\n   * You can find the names at the official website\n   * {@link https://ionic.io/ionicons}.\n   */\n  @Input() set name(name: string | undefined) {\n    this.elRef.nativeElement?.setAttribute(\"name\", name);\n  };\n\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'IonIconComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LayerData.html":{"url":"interfaces/LayerData.html","title":"interface - LayerData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LayerData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/layer-data.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            box\n                                        \n                                \n                                \n                                        \n                                            shapes\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        box\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        box:     [, , , ]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [, , , ]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shapes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shapes:         ShapeData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ShapeData[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as L from \"leaflet\";\n\n/**\n * GeoJSON data type used by Leaflet.\n * @private\n */\nexport type GeoJsonObject = Parameters[0];\n/** Type to represent layer data received from the geo data server. */\nexport interface ShapeData {\n  name: string,\n  key: string,\n  nutsKey: string,\n  geoJson: GeoJsonObject\n};\n\nexport interface LayerData {\n  box: [[number, number], [number, number], [number, number], [number, number]],\n  shapes: ShapeData[]\n};\n\nexport default LayerData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MapComponent.html":{"url":"components/MapComponent.html","title":"component - MapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/map/map.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component for displaying maps.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                map\n            \n\n            \n                styleUrls\n                ./map.component.css\n            \n\n\n            \n                template\n                \n  \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                center\n                            \n                            \n                                height\n                            \n                            \n                                    Private\n                                layerConfig\n                            \n                            \n                                    Private\n                                layerData\n                            \n                            \n                                    Private\n                                layerNames\n                            \n                            \n                                    Optional\n                                map\n                            \n                            \n                                    Private\n                                mapElement\n                            \n                            \n                                    Private\n                                markers\n                            \n                            \n                                    Private\n                                    Optional\n                                selectedGeoJsonLayer\n                            \n                            \n                                    Private\n                                    Optional\n                                selectedLayer\n                            \n                            \n                                    Private\n                                selectedShapes\n                            \n                            \n                                tileUrl\n                            \n                            \n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                emitSelection\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                center\n                            \n                            \n                                height\n                            \n                            \n                                layers\n                            \n                            \n                                layerSelectable\n                            \n                            \n                                markers\n                            \n                            \n                                scrollWheelZoom\n                            \n                            \n                                selectedColor\n                            \n                            \n                                tileUrl\n                            \n                            \n                                unselectedColor\n                            \n                            \n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                selected\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    inputLayers\n                                \n                                \n                                    inputMarkers\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: MapService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/map/map.component.ts:185\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        MapService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to interact with the server for geo data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        center\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:66\n                            \n                        \n                \n                    \n                        Input for the center coordinates of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:56\n                            \n                        \n                \n                    \n                        Input for the height of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        layers\n                    \n                \n                \n                    \n                        Type :         LayerConfig\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:131\n                            \n                        \n                \n                    \n                        Input for the layers that should be displayed.\nThe key of the record is layer key and is also emitted on the selection.\nThe value of the record is an array and the values of that should be the\nfollowing:\n\n  \n    The name of the layer, this will be only used to display a name of\n    the layer (may also be a translation key).\n    // TODO: actually implement translation here\n  \n  \n    This should be the resolution to display the layer at, this may also\nbe\n    null to display the keys directly without any shape intersection\n    resolving.\n  \n  \n    These should be the keys used to display the shapes from.\n    If the given keys are empty or null, this will display everything from\n    the give resolution.\n  \n\n\nAttention: The service needs at least one of the resolution or the\nkeys\nto properly respond.\n```html\n// TODO: update link when geo data docs update\nSee https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n```\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        layerSelectable\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:153\n                            \n                        \n                \n                    \n                        Should the layers be selectable.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        markers\n                    \n                \n                \n                    \n                        Type :         Marker[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:156\n                            \n                        \n                \n                    \n                        Markers that should be displayed on the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        scrollWheelZoom\n                    \n                \n                \n                    \n                        Type :     boolean | \"center\"\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:79\n                            \n                        \n                \n                    \n                        Input for the option if the map should scroll zoom on mouse scroll.\nIf \"center\" is passed, the map will always zoom onto the center.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#d35a0c\"\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:84\n                            \n                        \n                \n                    \n                        Input for a hex code selected shapes.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        tileUrl\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:61\n                            \n                        \n                \n                    \n                        Input for the tile url of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        unselectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#1f5aec\"\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:82\n                            \n                        \n                \n                    \n                        Input for a hex code for unselected shapes.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        zoom\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:71\n                            \n                        \n                \n                    \n                        Input for the map zoom level.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        selected\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:181\n                            \n                        \n                \n                    \n                        Outputs the currently selected shapes.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        emitSelection\n                        \n                    \n                \n            \n            \n                \n                    \n                    emitSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:352\n                \n            \n\n\n            \n                \n                    Internally used function to emit the currently selected shapes via the\nselected output.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:226\n                \n            \n\n\n            \n                \n                    Renders the map with the given input values.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:196\n                \n            \n\n\n            \n                \n                    While init this sets the input values to the inner, private values.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        center\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"53.1434501, 8.2145521\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:68\n                        \n                    \n\n            \n                \n                    Center of the map, defaults to longitude and latitude of Oldenburg.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"500px\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:58\n                        \n                    \n\n            \n                \n                    Height of map, defaults to 500px.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        layerConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject({})\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:139\n                        \n                    \n\n            \n                \n                    Subject of the LayerConfig, to be used as\nObservable.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        layerData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject>\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject({})\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:145\n                        \n                    \n\n            \n                \n                    Subject of the pairs of Layerkey and LayerData,\nto be used as Observable.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        layerNames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:150\n                        \n                    \n\n            \n                \n                    Subject of the layer names mapped by the LayerKey.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        map\n                        \n                    \n                \n            \n                \n                    \n                        Type :     L.Map\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:163\n                        \n                    \n\n            \n                \n                    The leaflet map that is displayed here.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mapElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('map')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:53\n                        \n                    \n\n            \n                \n                    The ref to the map html element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        markers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:160\n                        \n                    \n\n            \n                \n                    Markers Subject to be used as Observable.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        selectedGeoJsonLayer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     L.Layer\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:178\n                        \n                    \n\n            \n                \n                    The currently selected geo json layer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        selectedLayer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LayerKey\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:176\n                        \n                    \n\n            \n                \n                    The currently selected layer in the map control.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedShapes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record>\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:170\n                        \n                    \n\n            \n                \n                    Internally holds all elements that are currently selected.\nThe set holds all keys of shapes currently selected.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tileUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:63\n                        \n                    \n\n            \n                \n                    Tile url of the map, defaults to the osm.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 7\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:73\n                        \n                    \n\n            \n                \n                    Zoom level of the map, defaults to 7.\n\n                \n            \n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        inputLayers\n                    \n                \n\n\n                \n                    \n                        setinputLayers(layerConfig: LayerConfig)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/map/map.component.ts:131\n                                \n                            \n                    \n                        \n                                Input for the layers that should be displayed.\nThe key of the record is layer key and is also emitted on the selection.\nThe value of the record is an array and the values of that should be the\nfollowing:\n\n  \n    The name of the layer, this will be only used to display a name of\n    the layer (may also be a translation key).\n    // TODO: actually implement translation here\n  \n  \n    This should be the resolution to display the layer at, this may also\nbe\n    null to display the keys directly without any shape intersection\n    resolving.\n  \n  \n    These should be the keys used to display the shapes from.\n    If the given keys are empty or null, this will display everything from\n    the give resolution.\n  \n\n\nAttention: The service needs at least one of the resolution or the\nkeys\nto properly respond.\n```html\n// TODO: update link when geo data docs update\nSee https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n```\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            layerConfig\n                                                    \n                                                            \n                                                                            LayerConfig\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                        Example :\n                                            \n                                                &lt;map\n  height=&quot;70vh&quot;\n  [layers]=&quot;{\n    full_res: [&#39;All of municipal resolution&#39;, Resolution.MUNICIPAL, null],\n    only_keys: [&#39;Only show exactly these&#39;, null, [&#39;01&#39;, &#39;034030000000&#39;]],\n    mixed: [&#39;Show district resolution&#39;, Resolution.DISTRICT, [&#39;01&#39;,\n  &#39;034030000000&#39;]]\n  }&quot;\n&gt;&lt;/map&gt;\n\n// TODO: update link when geo data docs update\n                                            \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        inputMarkers\n                    \n                \n\n\n                \n                    \n                        setinputMarkers(markers: Marker[])\n                    \n                \n                            \n                                \n                                    Defined in src/lib/map/map.component.ts:156\n                                \n                            \n                    \n                        \n                                Markers that should be displayed on the map.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            markers\n                                                    \n                                                            \n                                                                            Marker[]\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n  ViewChild,\n  Component,\n  EventEmitter,\n  OnInit,\n  AfterViewInit,\n  Input,\n  Output,\n  ElementRef\n} from \"@angular/core\";\nimport {BehaviorSubject, Subject} from \"rxjs\";\n\nimport * as L from \"leaflet\";\n\nimport {MapService} from \"./map.service\";\nimport LayerData from \"./layer-data\";\nimport {Resolution} from \"./resolution\";\nimport {Marker} from \"./marker\";\n\nimport * as LX from \"./invert-selection\";\n\nimport \"leaflet.markercluster\";\n\n/**\n * GeoJSON data type used by Leaflet.\n * @private\n */\ntype GeoJsonObject = Parameters[0];\n\n/** Type alias to enforce the meaning of the layer keys. */\ntype LayerKey = string;\n\n/** A layer config for the input of {@link MapComponent.inputLayers}. */\ntype LayerConfig = Record;\n\n/**\n * Component for displaying maps.\n */\n@Component({\n  selector: \"map\",\n  template: `\n    \n      \n    \n  `,\n  styleUrls: [\n    \"./map.component.css\"\n  ]\n})\nexport class MapComponent implements OnInit, AfterViewInit {\n\n  /** The ref to the map html element. */\n  @ViewChild(\"map\") private mapElement!: ElementRef;\n\n  /** Input for the height of the map. */\n  @Input(\"height\") inputHeight?: string;\n  /** Height of map, defaults to 500px. */\n  height = \"500px\";\n\n  /** Input for the tile url of the map. */\n  @Input(\"tileUrl\") inputTileUrl?: string;\n  /** Tile url of the map, defaults to the osm. */\n  tileUrl = \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\";\n\n  /** Input for the center coordinates of the map. */\n  @Input(\"center\") inputCenter?: string;\n  /** Center of the map, defaults to longitude and latitude of Oldenburg. */\n  center = \"53.1434501, 8.2145521\";\n\n  /** Input for the map zoom level. */\n  @Input(\"zoom\") inputZoom?: string;\n  /** Zoom level of the map, defaults to 7. */\n  zoom = 7;\n\n  /**\n   * Input for the option if the map should scroll zoom on mouse scroll.\n   * If \"center\" is passed, the map will always zoom onto the center.\n   */\n  @Input(\"scrollWheelZoom\") inputScrollWheelZoom: boolean | \"center\" = true;\n\n  /** Input for a hex code for unselected shapes. */\n  @Input(\"unselectedColor\") unselectedColor = \"#1f5aec\";\n  /** Input for a hex code selected shapes. */\n  @Input(\"selectedColor\") selectedColor = \"#d35a0c\";\n\n  /**\n   * Input for the layers that should be displayed.\n   *\n   * The key of the record is layer key and is also emitted on the selection.\n   * The value of the record is an array and the values of that should be the\n   * following:\n   * \n   *   \n   *     The name of the layer, this will be only used to display a name of\n   *     the layer (may also be a translation key).\n   *     // TODO: actually implement translation here\n   *   \n   *   \n   *     This should be the resolution to display the layer at, this may also\n   * be\n   *     null to display the keys directly without any shape intersection\n   *     resolving.\n   *   \n   *   \n   *     These should be the keys used to display the shapes from.\n   *     If the given keys are empty or null, this will display everything from\n   *     the give resolution.\n   *   \n   * \n   *\n   * **Attention**: The service needs at least one of the resolution or the\n   * keys\n   * to properly respond.\n   *\n   * @example\n   * ```html\n   * \n   * ```\n   * // TODO: update link when geo data docs update\n   * @see https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n   */\n  @Input(\"layers\")\n  set inputLayers(layerConfig: LayerConfig) {\n    this.layerConfig.next(layerConfig);\n  };\n  /**\n   * {@link Subject} of the {@link LayerConfig}, to be used as\n   * {@link Observable}.\n   * @private\n   */\n  private layerConfig: BehaviorSubject = new BehaviorSubject({});\n  /**\n   * {@link Subject} of the pairs of {@link Layerkey} and {@link LayerData},\n   * to be used as {@link Observable}.\n   * @private\n   */\n  private layerData: BehaviorSubject> = new BehaviorSubject({});\n  /**\n   * {@link Subject} of the layer names mapped by the {@link LayerKey}.\n   * @private\n   */\n  private layerNames: Record = {};\n\n  /** Should the layers be selectable. */\n  @Input(\"layerSelectable\") inputLayerSelectable: boolean = true;\n\n  /** Markers that should be displayed on the map. */\n  @Input(\"markers\") set inputMarkers(markers: Marker[]) {\n    this.markers.next(markers);\n  };\n  /** {@link Marker}s {@link Subject} to be used as {@link Observable}. */\n  private markers = new BehaviorSubject([]);\n\n  /** The leaflet map that is displayed here. */\n  map?: L.Map;\n\n  /**\n   * Internally holds all elements that are currently selected.\n   *\n   * The set holds all keys of shapes currently selected.\n   */\n  private selectedShapes: Record> = {};\n\n  /**\n   * The currently selected layer in the map control.\n   * @private\n   */\n  private selectedLayer?: LayerKey;\n  /** The currently selected geo json layer. */\n  private selectedGeoJsonLayer?: L.Layer;\n\n  /** Outputs the currently selected shapes. */\n  @Output() selected = new EventEmitter();\n\n  /**\n   * Constructor.\n   * @param service Service to interact with the server for geo data\n   */\n  constructor(private service: MapService) {}\n\n  /**\n   * While init this sets the input values to the inner, private values.\n   */\n  ngOnInit(): void {\n    if (this.inputHeight) this.height = this.inputHeight;\n    if (this.inputTileUrl) this.tileUrl = this.inputTileUrl;\n    if (this.inputCenter) this.center = this.inputCenter;\n    if (this.inputZoom) this.zoom = parseInt(this.inputZoom);\n\n    this.layerConfig.subscribe(async config => {\n      let layerData = {};\n      let requests: Record> = {};\n      for (\n        let [layerKey, [displayName, resolution, keys]]\n        of Object.entries(config)\n      ) {\n        this.layerNames[layerKey] = displayName;\n        requests[layerKey] = this.service.fetchLayerData(\n          resolution,\n          keys?.map(k => k.split(\" \").join(\"\"))\n        );\n      }\n      let fetched: Record = {};\n      for (let [layerKey, data] of Object.entries(requests)) {\n        fetched[layerKey] = await data;\n      }\n      this.layerData.next(fetched);\n    });\n  }\n\n  /**\n   * Renders the map with the given input values.\n   */\n  ngAfterViewInit(): void {\n    const nativeMapElement = this.mapElement.nativeElement;\n\n    const map = L.map(nativeMapElement, {\n      scrollWheelZoom: this.inputScrollWheelZoom,\n      center: this.center\n        .split(\", \")\n        .map(str => parseFloat(str)) as [number, number],\n      zoom: this.zoom\n    });\n    map.getRenderer(map as any).options.padding = 100;\n\n    L.tileLayer(this.tileUrl).addTo(map);\n\n    this.map = map;\n    let layersControl: L.Control.Layers;\n    // TODO: make a clear type from this\n    let invertSelectionControl: any;\n\n    this.layerData.subscribe(layerData => {\n      let displayLayer = true;\n\n      // reset selected data\n      this.selectedShapes = {};\n\n      if (layersControl) map.removeControl(layersControl);\n      layersControl = L.control.layers();\n      let layers: L.Layer[] = [];\n\n      if (this.selectedGeoJsonLayer) map.removeLayer(this.selectedGeoJsonLayer);\n\n      // update map with new layer data\n      for (let [key, data] of Object.entries(layerData)) {\n        let selectedShapes = this.selectedShapes[key] = new Set();\n        // use for every layer a new geoJSON layer\n        let geoJsonLayer = L.geoJSON(undefined, {\n          attribution: `\n            \n              📐 © GeoBasis-DE / BKG 2022\n            \n            |\n            \n              🔖 dl-de/by-2-0\n            \n          `,\n          style: {color: this.unselectedColor},\n          onEachFeature: (feature, layer) => {\n            // used properties are injected later into the feature\n            layer.bindTooltip(feature.properties.name, {direction: \"center\"});\n            if (this.inputLayerSelectable) {\n              layer.on(\"click\", () => {\n                let [key, path] = [feature.properties.key, layer as L.Path];\n                if (selectedShapes.has(key)) {\n                  path.setStyle({color: this.unselectedColor});\n                  path.bringToBack();\n                  selectedShapes.delete(key);\n                }\n                else {\n                  path.setStyle({color: this.selectedColor});\n                  path.bringToFront();\n                  selectedShapes.add(key);\n                }\n                this.emitSelection();\n              });\n            }\n            layers.push(layer);\n          }\n        });\n        for (let shape of data.shapes) {\n          geoJsonLayer.addData(Object.assign(shape.geoJson, {properties: {\n            name: shape.name,\n            key: shape.key\n          }}));\n          if (displayLayer) {\n            geoJsonLayer.addTo(map);\n            displayLayer = false;\n            this.selectedLayer = key;\n            this.selectedGeoJsonLayer = geoJsonLayer;\n            map.fitBounds([\n              data.box[0],\n              data.box[2]\n            ]);\n          }\n        }\n        layersControl.addBaseLayer(geoJsonLayer, this.layerNames[key]);\n        map.on(\"baselayerchange\", ({layer}) => {\n          if (layer == geoJsonLayer) {\n            this.selectedGeoJsonLayer = layer;\n            this.selectedLayer = key;\n            this.emitSelection();\n          }\n        })\n      }\n      if (Object.keys(layerData).length > 1) layersControl.addTo(map);\n\n      if (this.inputLayerSelectable) {\n        if (invertSelectionControl) map.removeControl(invertSelectionControl);\n        invertSelectionControl = LX.control.invertSelection(() => {\n          for (let layer of layers) {\n            layer.fire(\"click\");\n          }\n        });\n        invertSelectionControl.addTo(map);\n      }\n    });\n\n    let markerLayer = L.markerClusterGroup();\n    this.markers.subscribe(markers => {\n      markerLayer.removeFrom(map);\n      markerLayer = L.markerClusterGroup();\n      for (let marker of markers) {\n        let lMarker = L.marker(marker.coordinates);\n        if (marker.icon) lMarker.setIcon(marker.icon);\n        if (marker.tooltip) lMarker.bindTooltip(marker.tooltip);\n        if (marker.onClick) lMarker.on(\"click\", marker.onClick)\n        lMarker.addTo(markerLayer);\n      }\n      markerLayer.addTo(map);\n    });\n  }\n\n  /**\n   * Internally used function to emit the currently selected shapes via the\n   * {@link selected} output.\n   * @private\n   */\n  private emitSelection(): void {\n    let layerKey = this.selectedLayer!;\n    let layerName = this.layerNames[layerKey]!;\n    let keys = Array.from(this.selectedShapes[layerKey]);\n    this.selected.emit({\n      layer: layerKey,\n      name: layerName,\n      keys\n    });\n  }\n}\n\n    \n\n\n    \n                \n                    ./map.component.css\n                \n                .map-container {}\n\n.map {\n  height: 100%;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'MapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MapDB.html":{"url":"interfaces/MapDB.html","title":"interface - MapDB","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MapDB\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/map.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The schema the map db uses.\n\n            \n\n            \n                Extends\n            \n            \n                    DBSchema\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            queries\n                                        \n                                \n                                \n                                        \n                                            shapes\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        queries\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queries:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    All cached queries, used to identify if a query is already in the db.\nThe key[0] represents the resolution of the query, a -1 represents no\nresolution.\nThe rest are the given keys.\nThe value is an array of all the keys the query returned.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shapes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shapes:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    All shapes in the indexed db.\nThe key is the key of the shape.\nThe value is some ShapeData.\nSince LayerData is simply an array of ShapeData, this may\nbe used to reconstruct some layer data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  HttpClient,\n  HttpContext,\n  HttpHeaders,\n  HttpParams\n} from \"@angular/common/http\";\nimport {Injectable} from \"@angular/core\";\nimport {openDB, DBSchema} from \"idb\";\nimport {Layer} from \"leaflet\";\nimport {firstValueFrom} from \"rxjs\";\n\nimport {Resolution} from \"./resolution\";\nimport {LayerData, ShapeData, GeoJsonObject} from \"./layer-data\";\nimport {USE_API_URL} from \"../http-context/use-api-url\";\nimport {USE_LOADER} from \"../http-context/use-loader\";\n\nconst API_URL = \"geodata\";\nconst DB_NAME = \"map-db\";\nconst SCHEMA_V = 2;\n\n/** The schema the map db uses. */\ninterface MapDB extends DBSchema {\n  /**\n   * All cached queries, used to identify if a query is already in the db.\n   *\n   * The key[0] represents the resolution of the query, a -1 represents no\n   * resolution.\n   * The rest are the given keys.\n   *\n   * The value is an array of all the keys the query returned.\n   */\n  queries: {\n    key: [number, ...string[]],\n    value: {\n      box: LayerData[\"box\"],\n      shapes: string[]\n    }\n  },\n\n  /**\n   * All shapes in the indexed db.\n   *\n   * The key is the key of the shape.\n   *\n   * The value is some {@link ShapeData}.\n   * Since {@link LayerData} is simply an array of {@link ShapeData}, this may\n   * be used to reconstruct some layer data.\n   */\n  shapes: {\n    key: string,\n    value: ShapeData\n  }\n}\n\n/**\n * Service to interact with the geo data api to fetch map data.\n *\n * Fetched map data is cached in the indexedDB and therefore only retrieved\n * lazily.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n\n  /** Indexed DB client. */\n  private readonly idb;\n\n  /**\n   * Constructor.\n   * @param http Client to request geo data\n   */\n  constructor(private http: HttpClient) {\n    this.idb = openDB(DB_NAME, SCHEMA_V, {\n      upgrade(db, oldV) {\n        if (oldV) {\n          db.deleteObjectStore(\"queries\");\n          db.deleteObjectStore(\"shapes\");\n        }\n        db.createObjectStore(\"queries\");\n        db.createObjectStore(\"shapes\");\n      }\n    });\n  }\n\n  /**\n   * Asynchronously fetch the map from the geo data rest api.\n   *\n   * Will only fetch data if not already stored in the indexedDB.\n   * @param resolution The resolution the of the shapes returned by the service\n   * @param keys The keys given to look for shapes\n   * @param force If true, this will ignore the cache and request everything\n   */\n  async fetchLayerData(\n    resolution: Resolution | null | undefined,\n    keys?: string[] | null,\n    force: boolean = false\n  ): Promise {\n    // prepare db and keys\n    let idb = await this.idb;\n    let trimmedKeys = keys ?? [];\n    let resolutionNum = resolution ? Resolution.toKeyLength(resolution) : -1;\n    let queryKey = [resolutionNum, ...trimmedKeys] as [number, ...string[]];\n\n    // check for cached keys or ignore if is force is true\n    let cachedQuery = force ? undefined : await idb.get(\"queries\", queryKey);\n    if (cachedQuery) {\n      let tx = idb.transaction(\"shapes\", \"readonly\");\n      let store = tx.objectStore(\"shapes\");\n      let shapes: ShapeData[] = [];\n      let operations = [];\n      for (let key of cachedQuery.shapes) {\n        operations.push(store.get(key).then(shape => {\n          if (shape) shapes.push(shape);\n        }));\n      }\n      operations.push(tx.done);\n      await Promise.all(operations);\n      return {\n        box: cachedQuery.box,\n        shapes\n      };\n    }\n\n    // if cachedKeys was empty, request data from the server\n    let params = new HttpParams();\n    if (resolution) params = params.set(\"resolution\", resolution);\n    if (keys && keys.length) params = params.appendAll({key: keys.map(k => {\n      if (resolution) return k.substring(0, resolutionNum);\n      return k;\n    })});\n\n    let rawLayerData = await firstValueFrom(this.http.get(`${API_URL}/`, {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      }),\n      params,\n      responseType: \"json\",\n      context: new HttpContext()\n        .set(USE_API_URL, true)\n        .set(USE_LOADER, true)\n    }));\n\n    rawLayerData.shapes = rawLayerData.shapes.map(rawShape => ({\n      nutsKey: rawShape.nuts_key,\n      geoJson: rawShape.geojson,\n      ...rawShape\n    }));\n\n    let layerData = rawLayerData as unknown as LayerData;\n\n    // store the requested data back into the db\n    let tx = idb.transaction([\"queries\", \"shapes\"], \"readwrite\");\n    let operations = [];\n    let shapeStore = tx.objectStore(\"shapes\");\n    let shapeKeys = [];\n    for (let shape of layerData.shapes) {\n      operations.push(shapeStore.put(shape, shape.key));\n      shapeKeys.push(shape.key);\n    }\n    let queryStore = tx.objectStore(\"queries\");\n    operations.push(queryStore.put({\n      box: layerData.box,\n      shapes: shapeKeys\n    }, queryKey));\n    await Promise.all(operations);\n\n    return layerData;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MapService.html":{"url":"injectables/MapService.html","title":"injectable - MapService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MapService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/map.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to interact with the geo data api to fetch map data.\nFetched map data is cached in the indexedDB and therefore only retrieved\nlazily.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                idb\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                fetchLayerData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/lib/map/map.service.ts:67\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Client to request geo data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchLayerData\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchLayerData(resolution: Resolution | null | undefined, keys?: string[] | null, force: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.service.ts:94\n                \n            \n\n\n            \n                \n                    Asynchronously fetch the map from the geo data rest api.\nWill only fetch data if not already stored in the indexedDB.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    resolution\n                                    \n                                                Resolution | null | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The resolution the of the shapes returned by the service\n\n                                    \n                                \n                                \n                                    keys\n                                    \n                                            string[] | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The keys given to look for shapes\n\n                                    \n                                \n                                \n                                    force\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        If true, this will ignore the cache and request everything\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        idb\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/lib/map/map.service.ts:67\n                        \n                    \n\n            \n                \n                    Indexed DB client.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpClient,\n  HttpContext,\n  HttpHeaders,\n  HttpParams\n} from \"@angular/common/http\";\nimport {Injectable} from \"@angular/core\";\nimport {openDB, DBSchema} from \"idb\";\nimport {Layer} from \"leaflet\";\nimport {firstValueFrom} from \"rxjs\";\n\nimport {Resolution} from \"./resolution\";\nimport {LayerData, ShapeData, GeoJsonObject} from \"./layer-data\";\nimport {USE_API_URL} from \"../http-context/use-api-url\";\nimport {USE_LOADER} from \"../http-context/use-loader\";\n\nconst API_URL = \"geodata\";\nconst DB_NAME = \"map-db\";\nconst SCHEMA_V = 2;\n\n/** The schema the map db uses. */\ninterface MapDB extends DBSchema {\n  /**\n   * All cached queries, used to identify if a query is already in the db.\n   *\n   * The key[0] represents the resolution of the query, a -1 represents no\n   * resolution.\n   * The rest are the given keys.\n   *\n   * The value is an array of all the keys the query returned.\n   */\n  queries: {\n    key: [number, ...string[]],\n    value: {\n      box: LayerData[\"box\"],\n      shapes: string[]\n    }\n  },\n\n  /**\n   * All shapes in the indexed db.\n   *\n   * The key is the key of the shape.\n   *\n   * The value is some {@link ShapeData}.\n   * Since {@link LayerData} is simply an array of {@link ShapeData}, this may\n   * be used to reconstruct some layer data.\n   */\n  shapes: {\n    key: string,\n    value: ShapeData\n  }\n}\n\n/**\n * Service to interact with the geo data api to fetch map data.\n *\n * Fetched map data is cached in the indexedDB and therefore only retrieved\n * lazily.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n\n  /** Indexed DB client. */\n  private readonly idb;\n\n  /**\n   * Constructor.\n   * @param http Client to request geo data\n   */\n  constructor(private http: HttpClient) {\n    this.idb = openDB(DB_NAME, SCHEMA_V, {\n      upgrade(db, oldV) {\n        if (oldV) {\n          db.deleteObjectStore(\"queries\");\n          db.deleteObjectStore(\"shapes\");\n        }\n        db.createObjectStore(\"queries\");\n        db.createObjectStore(\"shapes\");\n      }\n    });\n  }\n\n  /**\n   * Asynchronously fetch the map from the geo data rest api.\n   *\n   * Will only fetch data if not already stored in the indexedDB.\n   * @param resolution The resolution the of the shapes returned by the service\n   * @param keys The keys given to look for shapes\n   * @param force If true, this will ignore the cache and request everything\n   */\n  async fetchLayerData(\n    resolution: Resolution | null | undefined,\n    keys?: string[] | null,\n    force: boolean = false\n  ): Promise {\n    // prepare db and keys\n    let idb = await this.idb;\n    let trimmedKeys = keys ?? [];\n    let resolutionNum = resolution ? Resolution.toKeyLength(resolution) : -1;\n    let queryKey = [resolutionNum, ...trimmedKeys] as [number, ...string[]];\n\n    // check for cached keys or ignore if is force is true\n    let cachedQuery = force ? undefined : await idb.get(\"queries\", queryKey);\n    if (cachedQuery) {\n      let tx = idb.transaction(\"shapes\", \"readonly\");\n      let store = tx.objectStore(\"shapes\");\n      let shapes: ShapeData[] = [];\n      let operations = [];\n      for (let key of cachedQuery.shapes) {\n        operations.push(store.get(key).then(shape => {\n          if (shape) shapes.push(shape);\n        }));\n      }\n      operations.push(tx.done);\n      await Promise.all(operations);\n      return {\n        box: cachedQuery.box,\n        shapes\n      };\n    }\n\n    // if cachedKeys was empty, request data from the server\n    let params = new HttpParams();\n    if (resolution) params = params.set(\"resolution\", resolution);\n    if (keys && keys.length) params = params.appendAll({key: keys.map(k => {\n      if (resolution) return k.substring(0, resolutionNum);\n      return k;\n    })});\n\n    let rawLayerData = await firstValueFrom(this.http.get(`${API_URL}/`, {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      }),\n      params,\n      responseType: \"json\",\n      context: new HttpContext()\n        .set(USE_API_URL, true)\n        .set(USE_LOADER, true)\n    }));\n\n    rawLayerData.shapes = rawLayerData.shapes.map(rawShape => ({\n      nutsKey: rawShape.nuts_key,\n      geoJson: rawShape.geojson,\n      ...rawShape\n    }));\n\n    let layerData = rawLayerData as unknown as LayerData;\n\n    // store the requested data back into the db\n    let tx = idb.transaction([\"queries\", \"shapes\"], \"readwrite\");\n    let operations = [];\n    let shapeStore = tx.objectStore(\"shapes\");\n    let shapeKeys = [];\n    for (let shape of layerData.shapes) {\n      operations.push(shapeStore.put(shape, shape.key));\n      shapeKeys.push(shape.key);\n    }\n    let queryStore = tx.objectStore(\"queries\");\n    operations.push(queryStore.put({\n      box: layerData.box,\n      shapes: shapeKeys\n    }, queryKey));\n    await Promise.all(operations);\n\n    return layerData;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Marker.html":{"url":"interfaces/Marker.html","title":"interface - Marker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Marker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/marker.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            coordinates\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onClick\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tooltip\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coordinates\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        coordinates:     [number, number]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [number, number]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:     L.Icon | L.DivIcon\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     L.Icon | L.DivIcon\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onClick\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onClick:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tooltip\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tooltip:     Content |  | Tooltip\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Content |  | Tooltip\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Content, LeafletMouseEvent, Layer, Tooltip} from \"leaflet\";\n\nimport * as L from \"leaflet\";\n\nexport interface Marker {\n  coordinates: [number, number],\n  tooltip?: Content | ((layer: Layer) => Content) | Tooltip,\n  onClick?: (evt: LeafletMouseEvent) => void,\n  icon?: L.Icon | L.DivIcon\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/QueryParameterGuard.html":{"url":"guards/QueryParameterGuard.html","title":"guard - QueryParameterGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    QueryParameterGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/lib/guards/query-parameter.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard to check if certain query parameters are set.\nIn the data attribute of route it expects an optional redirectTo\ncontaining an Observable, a Promise or a direct\nUrlTree or a string that will be passed to Router#parseUrl\nand queryParams containing a string or an array of strings.\n\nredirect will be used when the check fails.\nqueryParams will be iterated to check for the keys\n\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/lib/guards/query-parameter.guard.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Router used to parse redirect entries\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/guards/query-parameter.guard.ts:35\n                \n            \n\n\n            \n                \n                    Whether the route can be activated.\nFor more info check QueryParameterGuard.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently activated route snapshot\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state of the router\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise | boolean | UrlTree\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n/**\n * Guard to check if certain query parameters are set.\n *\n * In the `data` attribute of route it expects an optional `redirectTo`\n * containing an {@link Observable}, a {@link Promise} or a direct\n * {@link UrlTree} or a string that will be passed to {@link Router#parseUrl}\n * and `queryParams` containing a string or an array of strings.\n *\n * - `redirect` will be used when the check fails.\n * - `queryParams` will be iterated to check for the keys\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class QueryParameterGuard implements CanActivate {\n\n  /**\n   * Constructor.\n   * @param router Router used to parse redirect entries\n   */\n  constructor(private router: Router) {}\n\n  /**\n   * Whether the route can be activated.\n   *\n   * For more info check {@link QueryParameterGuard}.\n   *\n   * @param route Currently activated route snapshot\n   * @param state Current state of the router\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable | Promise | boolean | UrlTree {\n    let redirect  = route.data[\"redirect\"] ?? false;\n    if (typeof redirect === \"string\") redirect = this.router.parseUrl(redirect);\n    for (let param of [route.data[\"queryParams\"] ?? []].flat()) {\n      if (route.queryParams[param] === undefined) return redirect;\n    }\n    return true;\n  }\n\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ShapeData.html":{"url":"interfaces/ShapeData.html","title":"interface - ShapeData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ShapeData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/layer-data.ts\n        \n\n\n            \n                Description\n            \n            \n                Type to represent layer data received from the geo data server.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            geoJson\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            nutsKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        geoJson\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        geoJson:         GeoJsonObject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         GeoJsonObject\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nutsKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nutsKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as L from \"leaflet\";\n\n/**\n * GeoJSON data type used by Leaflet.\n * @private\n */\nexport type GeoJsonObject = Parameters[0];\n/** Type to represent layer data received from the geo data server. */\nexport interface ShapeData {\n  name: string,\n  key: string,\n  nutsKey: string,\n  geoJson: GeoJsonObject\n};\n\nexport interface LayerData {\n  box: [[number, number], [number, number], [number, number], [number, number]],\n  shapes: ShapeData[]\n};\n\nexport default LayerData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WisdomInterface.html":{"url":"interfaces/WisdomInterface.html","title":"interface - WisdomInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WisdomInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/WisdomInterface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for the wisdom modules.\nEvery wisdom module must provide such an object implementing this interface.\nThe object must be exported under the name \"wisdomInterface\".\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            route\n                                        \n                                \n                                \n                                        \n                                            scopes\n                                        \n                                \n                                \n                                        \n                                            translations\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        route\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        route:         Route\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Route\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The route that leads to this module.\nThis may also include guards but some guards will be automatically injected.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scopes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scopes:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The scopes required to see the component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translations:     Record>>>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record>>>\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The translations the modules provides and uses.\nThe top most entry should be the namespace, the following the component and\nin the component there should be keys for the translation keys.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {Route} from \"@angular/router\";\n\n/**\n * Interface for the wisdom modules.\n *\n * Every wisdom module must provide such an object implementing this interface.\n * The object must be exported under the name \"wisdomInterface\".\n */\nexport interface WisdomInterface {\n  /**\n   * The route that leads to this module.\n   * This may also include guards but some guards will be automatically injected.\n   */\n  route: Route;\n  /** The scopes required to see the component. */\n  scopes: string[];\n  /**\n   * The translations the modules provides and uses.\n   *\n   * The top most entry should be the namespace, the following the component and\n   * in the component there should be keys for the translation keys.\n   */\n  translations: Record>>>\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WisdomModule.html":{"url":"modules/WisdomModule.html","title":"module - WisdomModule","body":"\n                   \n\n\n\n\n    Modules\n    WisdomModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WisdomModule\n\n\n\ncluster_WisdomModule_exports\n\n\n\ncluster_WisdomModule_declarations\n\n\n\n\nBreadcrumbsComponent\n\nBreadcrumbsComponent\n\n\n\nWisdomModule\n\nWisdomModule\n\nWisdomModule -->\n\nBreadcrumbsComponent->WisdomModule\n\n\n\n\n\nBulmaIsToggleableDirective\n\nBulmaIsToggleableDirective\n\nWisdomModule -->\n\nBulmaIsToggleableDirective->WisdomModule\n\n\n\n\n\nIonIconComponent\n\nIonIconComponent\n\nWisdomModule -->\n\nIonIconComponent->WisdomModule\n\n\n\n\n\nMapComponent\n\nMapComponent\n\nWisdomModule -->\n\nMapComponent->WisdomModule\n\n\n\n\n\nBreadcrumbsComponent \n\nBreadcrumbsComponent \n\nBreadcrumbsComponent  -->\n\nWisdomModule->BreadcrumbsComponent \n\n\n\n\n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective  -->\n\nWisdomModule->BulmaIsToggleableDirective \n\n\n\n\n\nIonIconComponent \n\nIonIconComponent \n\nIonIconComponent  -->\n\nWisdomModule->IonIconComponent \n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nWisdomModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/wisdom.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BreadcrumbsComponent\n                        \n                        \n                            BulmaIsToggleableDirective\n                        \n                        \n                            IonIconComponent\n                        \n                        \n                            MapComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BreadcrumbsComponent\n                        \n                        \n                            BulmaIsToggleableDirective\n                        \n                        \n                            IonIconComponent\n                        \n                        \n                            MapComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {TranslateModule} from \"@ngx-translate/core\";\n\nimport {\n  BulmaIsToggleableDirective\n} from \"./bulma/bulma-is-toggleable.directive\";\nimport {IonIconComponent} from \"./ion-icon/ion-icon.component\";\nimport {MapComponent} from \"./map/map.component\";\nimport { BreadcrumbsComponent } from './breadcrumbs/breadcrumbs.component';\nimport {CommonModule} from \"@angular/common\";\nimport {RouterModule} from \"@angular/router\";\n\n@NgModule({\n  declarations: [\n    IonIconComponent,\n    BulmaIsToggleableDirective,\n    MapComponent,\n    BreadcrumbsComponent\n  ],\n  imports: [\n    TranslateModule,\n    CommonModule,\n    RouterModule\n  ],\n  exports: [\n    IonIconComponent,\n    BulmaIsToggleableDirective,\n    MapComponent,\n    BreadcrumbsComponent\n  ]\n})\nexport class WisdomModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/WisdomInterface.ts\n            \n            interface\n            WisdomInterface\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/breadcrumbs/breadcrumbs.component.ts\n            \n            component\n            BreadcrumbsComponent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/lib/breadcrumbs/breadcrumbs.component.ts\n            \n            variable\n            counter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/breadcrumbs/breadcrumbs.service.ts\n            \n            injectable\n            BreadcrumbsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/lib/breadcrumbs/breadcrumbs.service.ts\n            \n            interface\n            Breadcrumb\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/lib/bulma/bulma-is-toggleable.directive.ts\n            \n            directive\n            BulmaIsToggleableDirective\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/guards/query-parameter.guard.ts\n            \n            guard\n            QueryParameterGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-api-url.ts\n            \n            variable\n            USE_API_URL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-base-url.ts\n            \n            variable\n            USE_BASE_URL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-cache.ts\n            \n            variable\n            USE_CACHE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-error-curtain.ts\n            \n            variable\n            USE_ERROR_CURTAIN\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-loader.ts\n            \n            variable\n            USE_LOADER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/ion-icon/ion-icon.component.ts\n            \n            component\n            IonIconComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/map/invert-selection.ts\n            \n            variable\n            control\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/map/layer-data.ts\n            \n            interface\n            LayerData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/map/layer-data.ts\n            \n            interface\n            ShapeData\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/lib/map/map.component.ts\n            \n            component\n            MapComponent\n            \n                100 %\n                (29/29)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            injectable\n            MapService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            interface\n            MapDB\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            API_URL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            DB_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            SCHEMA_V\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/map/marker.ts\n            \n            interface\n            Marker\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/lib/map/resolution.ts\n            \n            function\n            toEnum\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/map/resolution.ts\n            \n            function\n            toKeyLength\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            getResolvedUrl\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            prettyPrintNum\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            stringToColor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            translateObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            tupleSwap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.4.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^14.0.3\n        \n            @angular/core : ^14.0.3\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Resolution   (src/.../resolution.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/map/resolution.ts\n    \n        \n            \n                \n                    \n                        \n                        Resolution\n                    \n                \n                        \n                            \n                                 STATE\n                            \n                        \n                        \n                            \n                                Value : state\n                            \n                        \n                        \n                            \n                                 DISTRICT\n                            \n                        \n                        \n                            \n                                Value : district\n                            \n                        \n                        \n                            \n                                 ADMINISTRATION\n                            \n                        \n                        \n                            \n                                Value : administration\n                            \n                        \n                        \n                            \n                                 MUNICIPAL\n                            \n                        \n                        \n                            \n                                Value : municipal\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getResolvedUrl   (src/.../util.ts)\n                        \n                        \n                            prettyPrintNum   (src/.../util.ts)\n                        \n                        \n                            stringToColor   (src/.../util.ts)\n                        \n                        \n                            toEnum   (src/.../resolution.ts)\n                        \n                        \n                            toKeyLength   (src/.../resolution.ts)\n                        \n                        \n                            translateObject   (src/.../util.ts)\n                        \n                        \n                            tupleSwap   (src/.../util.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getResolvedUrl\n                        \n                    \n                \n            \n            \n                \ngetResolvedUrl(route: ActivatedRouteSnapshot)\n                \n            \n\n\n\n\n            \n                \n                    Function to return a fully resolved url in a string from an activated route\nsnapshot.\nRecreated by this solution on StackOverflow.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Route snapshot of a component.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prettyPrintNum\n                        \n                    \n                \n            \n            \n                \nprettyPrintNum(num: number)\n                \n            \n\n\n\n\n            \n                \n                    Returns a number presentation where every third digit from the end is\nseparated by a dot.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Number to pretty print\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            prettyPrintNum(12345678) =&gt; &quot;12.345.678&quot;\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stringToColor\n                        \n                    \n                \n            \n            \n                \nstringToColor(str: string, map?: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    map\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        translateObject\n                        \n                    \n                \n            \n            \n                \ntranslateObject(service: TranslateService, obj: T)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to translate strings in any data object using the given\ntranslate service.\nInternally the instant() method is used, causing this to be sync, beware.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    service\n                                    \n                                            TranslateService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Translate service to translate with\n\n                                    \n                                \n                                \n                                    obj\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to iterate and translate through\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tupleSwap\n                        \n                    \n                \n            \n            \n                \ntupleSwap(tuple)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to swap the values of a tuple.\nUseful if coordinates are in the wrong order.\n(e.g. geojson to leaflet)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tuple\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Tuple of two values\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/lib/map/resolution.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toEnum\n                        \n                    \n                \n            \n            \n                \ntoEnum(length: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Resolution | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toKeyLength\n                        \n                    \n                \n            \n            \n                \ntoKeyLength(res: Resolution)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                                Resolution\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WisdomModule\n\n\n\ncluster_WisdomModule_declarations\n\n\n\ncluster_WisdomModule_exports\n\n\n\n\nBreadcrumbsComponent\n\nBreadcrumbsComponent\n\n\n\nWisdomModule\n\nWisdomModule\n\nWisdomModule -->\n\nBreadcrumbsComponent->WisdomModule\n\n\n\n\n\nBulmaIsToggleableDirective\n\nBulmaIsToggleableDirective\n\nWisdomModule -->\n\nBulmaIsToggleableDirective->WisdomModule\n\n\n\n\n\nIonIconComponent\n\nIonIconComponent\n\nWisdomModule -->\n\nIonIconComponent->WisdomModule\n\n\n\n\n\nMapComponent\n\nMapComponent\n\nWisdomModule -->\n\nMapComponent->WisdomModule\n\n\n\n\n\nBreadcrumbsComponent \n\nBreadcrumbsComponent \n\nBreadcrumbsComponent  -->\n\nWisdomModule->BreadcrumbsComponent \n\n\n\n\n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective  -->\n\nWisdomModule->BulmaIsToggleableDirective \n\n\n\n\n\nIonIconComponent \n\nIonIconComponent \n\nIonIconComponent  -->\n\nWisdomModule->IonIconComponent \n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nWisdomModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        WisdomModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GeoJsonObject   (src/.../layer-data.ts)\n                        \n                        \n                            GeoJsonObject   (src/.../map.component.ts)\n                        \n                        \n                            LayerConfig   (src/.../map.component.ts)\n                        \n                        \n                            LayerKey   (src/.../map.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/map/layer-data.ts\n    \n    \n        \n            \n                \n                    \n                    GeoJsonObject\n                \n            \n            \n                \n                    GeoJSON data type used by Leaflet.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/lib/map/map.component.ts\n    \n    \n        \n            \n                \n                    \n                    GeoJsonObject\n                \n            \n            \n                \n                    GeoJSON data type used by Leaflet.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LayerConfig\n                \n            \n            \n                \n                    A layer config for the input of MapComponent.inputLayers.\n\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LayerKey\n                \n            \n            \n                \n                    Type alias to enforce the meaning of the layer keys.\n\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            API_URL   (src/.../map.service.ts)\n                        \n                        \n                            control   (src/.../invert-selection.ts)\n                        \n                        \n                            counter   (src/.../breadcrumbs.component.ts)\n                        \n                        \n                            DB_NAME   (src/.../map.service.ts)\n                        \n                        \n                            SCHEMA_V   (src/.../map.service.ts)\n                        \n                        \n                            USE_API_URL   (src/.../use-api-url.ts)\n                        \n                        \n                            USE_BASE_URL   (src/.../use-base-url.ts)\n                        \n                        \n                            USE_CACHE   (src/.../use-cache.ts)\n                        \n                        \n                            USE_ERROR_CURTAIN   (src/.../use-error-curtain.ts)\n                        \n                        \n                            USE_LOADER   (src/.../use-loader.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/map/map.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        API_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"geodata\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DB_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"map-db\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SCHEMA_V\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 2\n                    \n                \n\n\n        \n    \n\n    src/lib/map/invert-selection.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  invertSelection: (callback: (arg0: MouseEvent) => void, options?: L.ControlOptions) => {\n    let InvertSelection = L.Control.extend({\n      options: {\n        position: \"topright\"\n      },\n      initialize: function (options: any) {\n        L.Util.setOptions(this, options);\n      },\n      onAdd: function (map: L.Map) {\n        let centerContent = [\n          \"is-flex is-align-content-center\",\n          \"is-align-items-center\",\n          \"is-justify-content-center\"\n        ].join(\" \");\n\n        let container = L.DomUtil.create(\n          \"div\",\n          \"select-all-container leaflet-control-layers leaflet-control\"\n        );\n        container.addEventListener(\"click\", callback);\n        let button = L.DomUtil.create(\n          \"a\",\n          \"leaflet-control-layers-toggle \" + centerContent,\n          container\n        );\n        button.style.backgroundImage = \"none\";\n        let icon = L.DomUtil.create(\n          \"ion-icon\",\n          \"select-all-icon\",\n          button\n        );\n        icon.style.pointerEvents = \"none\";\n        icon.setAttribute(\"name\", \"extension-puzzle\");\n        icon.setAttribute(\"size\", \"large\");\n        icon.style.color = \"#a0a0a0\";\n        return container;\n      }\n    });\n    return new InvertSelection(options);\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/lib/breadcrumbs/breadcrumbs.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n\n\n        \n    \n\n    src/lib/http-context/use-api-url.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_API_URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => false)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if the api url should be used.\nDefaults to false.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-base-url.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_BASE_URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => true)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if the base url should be used.\nDefaults to true.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-cache.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_CACHE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => true)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if cache headers should be sent.\nDefaults to true.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-error-curtain.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_ERROR_CURTAIN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => true)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if requests that error should show\nthe error message on curtain covering the whole main container.\nDisable this if you want to handle errors yourself.\nDefaults to true.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-loader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_LOADER\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => false)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if loader should be shown.\nA given string will be run through the translator and therefore may get\ntranslated.\nUseful for longer loading times.\nDefaults to false.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
