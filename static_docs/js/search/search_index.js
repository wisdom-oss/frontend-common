var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/Breadcrumb.html",[0,0.568,1,1.827]],["body/interfaces/Breadcrumb.html",[0,0.914,1,3.536,2,1.492,3,0.396,4,0.396,5,0.347,6,2.49,7,0.501,8,5.12,9,0.348,10,0.663,11,1.302,12,3.461,13,2.097,14,3.342,15,2.831,16,0.917,17,0.474,18,0.034,19,0.706,20,2.577,21,3.796,22,1.974,23,1.524,24,3.93,25,1.979,26,3.484,27,1.079,28,2.421,29,2.921,30,1.974,31,2.373,32,2.622,33,0.588,34,0.986,35,0.617,36,2.207,37,2.49,38,1.981,39,2.938,40,3.693,41,3.693,42,1.254,43,0.524,44,1.058,45,2.869,46,3.295,47,1.366,48,1.366,49,0.447,50,1.981,51,1.793,52,3.693,53,2.869,54,1.058,55,1.254,56,1.079,57,2.869,58,2.869,59,1.632,60,1.179,61,1.105,62,1.366,63,2.869,64,1.151,65,2.869,66,1.151,67,2.869,68,2.869,69,3.295,70,0.891,71,2.869,72,0.023,73,0.023]],["title/components/BreadcrumbsComponent.html",[74,0.821,75,1.26]],["body/components/BreadcrumbsComponent.html",[1,3.389,3,0.339,4,0.339,5,0.297,7,0.596,9,0.181,10,0.596,11,0.637,13,1.369,15,2.133,17,0.411,18,0.034,19,0.662,20,2.414,23,0.984,25,1.854,27,0.697,30,1.774,33,0.542,35,0.527,42,1.071,43,0.339,44,1.809,46,4.193,49,0.382,50,3.189,52,4.358,55,1.715,59,2.414,60,0.761,61,0.886,62,2.021,69,2.961,70,1.218,72,0.021,73,0.021,74,1.523,75,2.021,76,1.941,77,1.693,78,1.693,79,1.693,80,2.451,81,4.095,82,4.095,83,3.411,84,4.095,85,5.093,86,4.095,87,3.411,88,4.095,89,2.625,90,4.095,91,2.961,92,3.406,93,3.924,94,1.168,95,2.828,96,3.411,97,4.095,98,5.686,99,1.258,100,5.093,101,4.242,102,3.683,103,1.447,104,2.128,105,1.5,106,4.095,107,2.942,108,2.356,109,3.411,110,1.854,111,1.79,112,2.625,113,4.095,114,2.961,115,1.218,116,2.021,117,2.942,118,4.095,119,4.095,120,4.095,121,4.095,122,3.411,123,1.703,124,2.942,125,4.095,126,3.411,127,2.961,128,3.411,129,0.886,130,1.369,131,2.942,132,2.961,133,2.942,134,2.942,135,1.168,136,2.942,137,2.942,138,4.095,139,2.942,140,2.942,141,2.451,142,2.942,143,2.625,144,1.395,145,2.356,146,1.071,147,2.93,148,1.693,149,1.693,150,1.168,151,1.395,152,1.693,153,1.168,154,1.693,155,1.395,156,1.693,157,0.984,158,1.071,159,1.275,160,1.275,161,1.693,162,1.071,163,1.693,164,1.491,165,1.693]],["title/injectables/BreadcrumbsService.html",[34,0.687,50,1.827]],["body/injectables/BreadcrumbsService.html",[0,0.803,1,3.631,3,0.387,4,0.387,5,0.339,6,2.431,7,0.653,8,4.984,9,0.369,10,0.653,11,1.092,12,2.904,13,2.001,14,2.58,15,1.751,16,0.816,17,0.44,18,0.034,19,0.656,20,2.126,21,2.8,22,1.456,23,1.124,24,3.243,25,2.144,26,2.874,27,1.062,28,2.392,29,2.155,30,1.456,31,1.751,32,1.934,33,0.581,34,0.971,35,0.602,36,2.155,37,2.431,38,1.934,39,3.227,40,4.055,41,4.171,42,1.224,43,0.516,44,1.377,45,3.736,46,4.055,47,1.334,48,1.334,49,0.437,50,2.58,51,2.336,52,4.258,53,2.8,54,1.377,55,1.837,56,1.275,57,3.736,58,3.736,59,2.126,60,1.16,61,1.275,62,1.779,63,3.736,64,1.687,65,2.8,66,1.124,67,2.8,68,2.8,69,4.171,70,0.87,71,2.8,72,0.023,73,0.023,99,1.377,105,1.392,115,1.16,123,1.124,129,0.971,166,1.594,167,3.362,168,3.362,169,3.362,170,3.362]],["title/directives/BulmaIsToggleableDirective.html",[146,1.156,162,1.156]],["body/directives/BulmaIsToggleableDirective.html",[3,0.457,4,0.457,5,0.4,7,0.727,9,0.245,11,0.859,17,0.346,18,0.034,19,0.516,27,0.94,30,2.56,33,0.457,35,0.711,43,0.457,49,0.784,60,1.027,72,0.026,73,0.026,94,1.575,95,2.368,99,1.534,103,1.678,105,1.413,115,1.027,123,1.327,135,1.575,146,2.197,159,1.719,162,1.818,171,4.147,172,3.306,173,4.994,174,4.994,175,5.734,176,4.923,177,4.994,178,4.994,179,5.026,180,6.032,181,4.16,182,3.611,183,3.969,184,3.925,185,3.969,186,4.16,187,4.994,188,4.994,189,5.464,190,4.552,191,5.464,192,5.464,193,2.544,194,3.969,195,3.306,196,2.067,197,3.306,198,3.969,199,3.969]],["title/components/DragDropComponent.html",[74,0.821,150,1.26]],["body/components/DragDropComponent.html",[3,0.25,4,0.25,5,0.608,9,0.202,10,0.477,11,1.079,16,0.725,17,0.506,18,0.034,19,0.744,20,1.028,23,0.725,25,1.606,27,1.181,28,2.363,30,1.421,33,0.455,35,0.388,43,0.25,44,1.008,49,0.282,51,1.129,56,0.514,59,1.028,61,1.154,64,1.825,66,0.725,70,1.226,72,0.017,73,0.017,74,1.141,75,0.861,76,1.555,77,1.248,78,1.248,79,1.248,94,0.861,95,2.637,96,2.733,99,1.008,103,0.666,105,1.55,108,1.248,110,1.815,111,1.475,115,1.379,116,1.302,123,1.667,129,0.955,130,1.097,141,1.807,144,1.028,145,1.888,146,0.79,147,2.538,148,1.248,149,1.248,150,1.751,151,2.527,152,1.248,153,0.861,154,1.248,155,1.028,156,1.248,157,0.725,158,0.79,159,0.939,160,0.939,161,1.248,162,0.79,163,1.248,164,1.195,165,1.248,182,1.568,196,1.709,200,3.84,201,3.447,202,1.807,203,3.296,204,3.28,205,3.28,206,3.498,207,4.411,208,3.957,209,3.28,210,3.28,211,4.411,212,3.28,213,3.28,214,3.28,215,4.152,216,2.103,217,2.246,218,2.246,219,4.411,220,3.19,221,2.159,222,2.454,223,2.169,224,3.28,225,2.169,226,2.733,227,3.28,228,2.596,229,3.28,230,3.28,231,3.28,232,2.372,233,2.733,234,2.103,235,3.28,236,2.733,237,2.169,238,3.28,239,2.169,240,3.28,241,2.733,242,2.733,243,2.733,244,2.246,245,2.169,246,3.28,247,2.169,248,3.28,249,3.28,250,2.169,251,4.827,252,2.169,253,3.28,254,2.169,255,3.28,256,2.169,257,2.277,258,3.28,259,2.169,260,2.169,261,2.169,262,2.169,263,2.169,264,1.028,265,2.169,266,2.169,267,2.169,268,1.807,269,1.807,270,2.169,271,2.169,272,2.169,273,2.169,274,1.807,275,3.28,276,2.169,277,2.169,278,2.169,279,2.169,280,2.169,281,1.807,282,2.169,283,3.28,284,2.733,285,2.169,286,3.28,287,2.169,288,2.169,289,3.957,290,2.169,291,3.28,292,2.169,293,2.169,294,2.169,295,2.169,296,2.169,297,3.28,298,3.28,299,3.28,300,3.28,301,2.169,302,2.169,303,2.169,304,1.807,305,2.169,306,1.028,307,1.39,308,3.957,309,2.169,310,2.169,311,2.169,312,2.169,313,4.411,314,2.169,315,2.169,316,2.169,317,1.39,318,2.169,319,2.169,320,2.169,321,2.169,322,1.568,323,3.28,324,2.169,325,2.169,326,2.169,327,2.169,328,1.807,329,0.939,330,2.169,331,2.169,332,2.169,333,2.169,334,1.807,335,2.169,336,2.169,337,2.169,338,2.169,339,1.709,340,2.169,341,3.28,342,2.103,343,3.28,344,3.28]],["title/directives/DragDropDirective.html",[146,1.156,164,1.156]],["body/directives/DragDropDirective.html",[3,0.403,4,0.403,5,0.354,9,0.216,10,0.671,11,1.115,16,0.671,17,0.509,18,0.034,19,0.669,22,1.518,27,1.22,33,0.403,35,0.628,43,0.403,49,0.455,55,1.876,56,0.83,61,0.998,72,0.024,73,0.024,94,1.391,95,2.185,99,1.416,105,1.58,115,1.332,123,1.723,129,0.998,146,1.679,151,1.662,159,1.518,164,1.993,181,3.84,193,3.508,195,2.92,197,2.92,200,3.952,201,3.547,203,4.862,257,3.65,345,2.92,346,5.151,347,5.685,348,5.685,349,3.725,350,5.151,351,4.61,352,4.61,353,3.957,354,3.508,355,3.505,356,5.685,357,4.61,358,5.151,359,4.61,360,4.61,361,4.61,362,4.61,363,4.61,364,4.61,365,4.61,366,4.61,367,4.61,368,4.61,369,3.334,370,2.92,371,2.92,372,5.151,373,5.151,374,5.151,375,3.505,376,3.505]],["title/injectables/DragDropService.html",[34,0.687,206,2.035]],["body/injectables/DragDropService.html",[3,0.357,4,0.357,5,0.568,7,0.451,9,0.191,10,0.618,11,1.048,15,1.615,16,0.867,17,0.454,18,0.034,19,0.709,27,1.147,33,0.648,34,0.919,35,0.555,39,3.428,42,1.129,43,0.357,47,1.23,48,1.23,49,0.403,51,2.211,56,1.233,60,1.411,61,0.671,66,1.42,70,1.411,72,0.022,73,0.022,74,0.802,99,1.304,103,0.952,105,1.347,111,1.42,115,1.347,129,0.671,130,1.42,135,1.23,166,1.47,200,3.496,201,3.139,206,2.721,215,3.536,217,1.47,218,2.295,221,2.44,222,2.586,228,3.267,241,2.582,242,3.536,243,2.582,244,2.295,251,4.963,264,1.47,269,2.582,274,4.544,306,1.47,328,2.582,334,3.536,339,3.004,371,2.582,377,2.582,378,4.841,379,4.245,380,4.245,381,2.242,382,2.996,383,3.1,384,4.245,385,3.1,386,4.245,387,4.245,388,4.245,389,4.245,390,4.245,391,4.245,392,4.245,393,5.454,394,3.1,395,3.103,396,3.07,397,3.07,398,4.245,399,3.1,400,3.07,401,2.721,402,2.721,403,4.245,404,3.536,405,1.784,406,1.921,407,1.47,408,1.343,409,1.987,410,1.987,411,2.582,412,5.454,413,1.784,414,3.1,415,1.987,416,3.1,417,2.242,418,3.1,419,3.1,420,3.1,421,4.245,422,4.841,423,3.1,424,5.207,425,3.1,426,3.1,427,2.242,428,3.1,429,1.784,430,3.1,431,3.1,432,3.1]],["title/classes/ErrorHttpContextToken.html",[49,0.413,433,2.035]],["body/classes/ErrorHttpContextToken.html",[3,0.403,4,0.403,5,0.353,7,0.509,9,0.216,10,0.67,13,2.018,18,0.034,22,1.995,31,2.399,33,0.403,43,0.592,49,0.738,54,1.075,56,0.829,61,0.758,62,1.389,72,0.024,73,0.024,105,0.905,112,2.952,129,0.758,221,1.516,264,1.659,329,1.516,339,3.21,406,1.828,409,3.643,410,3.506,433,3.3,434,3.5,435,2.952,436,2.244,437,3.837,438,4.861,439,4.606,440,5.087,441,4.415,442,5.47,443,3.955,444,4.861,445,2.65,446,2.962,447,3.5,448,4.606,449,2.962,450,3.331,451,2.916,452,3.5,453,2.531,454,3.837,455,3.147,456,3.3,457,3.837,458,3.837,459,3.5,460,3.955,461,3.506,462,3.5,463,3.837,464,3.955,465,3.837,466,3.331,467,3.5,468,4.289,469,3.837,470,2.65,471,2.916,472,2.531,473,2.916,474,2.916,475,2.531,476,2.916,477,2.916,478,2.916,479,2.916,480,2.916,481,2.531,482,3.5,483,2.916]],["title/components/IfcComponent.html",[74,0.821,153,1.26]],["body/components/IfcComponent.html",[3,0.136,4,0.136,5,0.313,7,0.451,9,0.073,10,0.451,11,1.022,13,1.841,15,1.049,16,0.618,17,0.48,18,0.034,19,0.491,20,1.245,22,1.637,23,0.396,25,1.376,27,0.622,30,0.872,32,1.784,33,0.464,35,0.212,43,0.302,44,1.238,49,0.154,54,1.161,55,2.051,56,0.823,59,0.561,60,0.899,61,0.873,70,0.978,72,0.01,73,0.01,74,1.382,75,0.47,76,0.954,77,1.158,78,0.681,79,0.681,91,1.456,92,1.9,93,2.188,94,0.47,95,2.173,99,0.618,101,2.582,102,2.241,103,0.952,104,0.856,105,1.411,109,0.986,111,1.579,114,3.314,115,0.899,116,1.873,123,1.264,127,1.456,129,0.992,130,1.264,132,3.314,143,2.721,144,0.561,145,1.158,146,0.431,147,1.784,148,0.681,149,0.681,150,0.47,151,0.561,152,0.681,153,1.379,154,0.681,155,0.561,156,0.681,157,0.396,158,0.431,159,0.513,160,0.513,161,0.681,162,0.431,163,0.681,164,0.733,165,0.681,184,2.227,190,0.986,193,1.29,196,2.387,216,1.29,217,0.954,220,3.314,232,0.856,233,0.986,234,0.759,257,1.784,281,1.677,284,1.677,304,1.677,307,2.721,329,1.986,342,0.759,349,1.456,354,1.987,369,2.512,402,1.29,408,1.637,413,2.175,427,0.856,449,1.784,453,2.733,455,1.999,456,1.29,460,1.456,461,2.227,472,2.241,475,1.456,484,0.856,485,3.496,486,4.443,487,2.188,488,2.627,489,4.723,490,2.627,491,2.627,492,3.474,493,4.426,494,5.917,495,3.474,496,2.013,497,2.582,498,1.999,499,2.013,500,4.245,501,2.013,502,1.784,503,1.987,504,2.013,505,1.158,506,1.512,507,1.677,508,2.013,509,4.396,510,2.013,511,1.183,512,2.627,513,1.9,514,2.013,515,2.013,516,2.627,517,2.013,518,3.099,519,3.818,520,1.183,521,1.792,522,1.968,523,2.547,524,2.582,525,4.245,526,1.456,527,2.013,528,2.013,529,3.069,530,3.873,531,2.013,532,2.627,533,2.013,534,5.129,535,1.677,536,1.456,537,2.241,538,3.148,539,1.183,540,3.099,541,3.474,542,1.183,543,2.013,544,2.512,545,1.036,546,2.013,547,1.183,548,1.456,549,1.29,550,1.456,551,2.013,552,2.013,553,2.013,554,1.677,555,2.013,556,2.013,557,1.183,558,2.627,559,2.782,560,3.779,561,3.099,562,3.099,563,3.099,564,3.779,565,3.099,566,3.099,567,3.779,568,3.779,569,3.779,570,2.577,571,2.609,572,2.013,573,3.779,574,2.013,575,1.684,576,2.582,577,3.536,578,3.099,579,2.013,580,2.013,581,2.013,582,1.183,583,2.013,584,3.099,585,2.013,586,2.013,587,2.013,588,1.456,589,1.183,590,2.013,591,1.677,592,2.013,593,1.677,594,4.032,595,1.183,596,2.013,597,1.183,598,2.013,599,2.582,600,2.013,601,1.183,602,2.013,603,2.013,604,1.183,605,3.099,606,1.183,607,2.627,608,1.183,609,1.183,610,1.183,611,1.183,612,3.099,613,2.627,614,2.013,615,2.013,616,2.627,617,2.627,618,1.183,619,1.29,620,2.013,621,1.677,622,3.099,623,1.677,624,2.241,625,2.013,626,2.013,627,2.013,628,2.627,629,2.013,630,2.013,631,1.183,632,1.183,633,0.986,634,0.856,635,0.856,636,1.183,637,2.627,638,1.183,639,3.099,640,1.183,641,1.183,642,1.183,643,0.986,644,1.183,645,2.227,646,1.183,647,1.183,648,1.183,649,1.183,650,1.183,651,2.013,652,1.183,653,1.183,654,2.013,655,1.183,656,2.627,657,2.013,658,2.013,659,1.183,660,1.368,661,0.986,662,1.183,663,1.183,664,1.183,665,1.183,666,1.183,667,1.183,668,1.183,669,1.183,670,1.183,671,1.183,672,1.183,673,2.013,674,2.013,675,1.183,676,2.627,677,0.856,678,0.681,679,1.183,680,0.856,681,2.013,682,0.986,683,0.616,684,1.183,685,1.183,686,1.183,687,1.183,688,1.183,689,1.183,690,0.986,691,0.986,692,1.183,693,1.183,694,2.013,695,1.677,696,2.013,697,1.677,698,3.099,699,1.183,700,1.183,701,1.183,702,0.616,703,1.183,704,3.474,705,1.183,706,1.183,707,1.183,708,1.183,709,1.183,710,1.183,711,1.183,712,1.183,713,2.013,714,1.183,715,1.183,716,0.986,717,1.183,718,2.013,719,0.986,720,1.183,721,0.986,722,0.986,723,1.183,724,1.183,725,1.183,726,1.183,727,1.183,728,1.183,729,1.183,730,1.183,731,1.183,732,2.013,733,1.183,734,0.986,735,1.183,736,0.759,737,1.677,738,1.183,739,1.183,740,1.183,741,2.013,742,1.183,743,1.183,744,2.013,745,1.183,746,1.183,747,1.183,748,0.616,749,1.183,750,1.183,751,1.183,752,0.986,753,1.183,754,1.183,755,1.183,756,1.183,757,1.183,758,2.627,759,1.183,760,1.183,761,2.013,762,1.183,763,1.183,764,1.183,765,1.183,766,1.183,767,1.183,768,1.183,769,1.183,770,1.183,771,1.183]],["title/interfaces/IfcDB.html",[0,0.568,772,2.035]],["body/interfaces/IfcDB.html",[0,0.604,2,1.462,3,0.388,4,0.388,5,0.34,7,0.491,9,0.208,10,0.654,16,0.654,17,0.441,18,0.034,19,0.439,33,0.646,34,0.973,35,0.604,42,1.229,43,0.388,44,1.037,47,1.339,48,1.339,49,0.439,55,1.229,56,1.198,60,1.308,61,1.094,66,1.129,70,1.163,72,0.023,73,0.023,103,1.037,110,1.229,111,1.129,116,1.339,130,1.129,135,1.339,221,2.19,222,1.6,228,1.758,234,2.163,244,2.131,264,1.6,317,2.882,329,2.19,382,2.587,406,1.339,407,1.6,408,1.462,415,2.882,429,1.942,445,2.587,446,1.942,485,3.779,486,4.33,498,1.942,502,1.942,505,1.942,506,3.102,529,2.44,530,3.599,544,2.44,545,1.504,570,2.808,571,1.6,645,3.838,660,2.342,683,1.758,702,3.07,748,1.758,772,2.882,773,2.163,774,2.909,775,2.342,776,3.241,777,3.251,778,2.882,779,2.14,780,3.746,781,3.746,782,3.241,783,4.492,784,2.163,785,3.241,786,1.942,787,3.102,788,1.758,789,1.6,790,2.342,791,2.812,792,2.882,793,1.6,794,2.882,795,2.163,796,2.163,797,2.882,798,2.812,799,2.812,800,2.163,801,2.163,802,2.163,803,2.812,804,3.241,805,2.812,806,3.746,807,2.812,808,2.812,809,2.812,810,2.812,811,2.812,812,2.812,813,2.812]],["title/injectables/IfcService.html",[34,0.687,502,1.827]],["body/injectables/IfcService.html",[0,0.56,3,0.36,4,0.36,5,0.315,7,0.708,9,0.193,10,0.621,11,0.924,16,0.76,17,0.373,18,0.034,19,0.632,27,1.011,33,0.63,34,0.924,35,0.56,42,1.138,43,0.36,44,1.312,47,1.241,48,1.241,49,0.406,55,1.771,56,1.152,60,1.258,61,1.053,66,1.046,70,1.104,72,0.022,73,0.022,99,1.312,103,1.494,105,1.258,110,1.138,111,1.428,115,0.809,116,1.93,129,0.677,130,1.428,135,1.241,166,1.482,221,2.264,222,1.482,228,1.628,234,2.737,244,2.477,264,1.482,317,2.004,329,2.107,381,2.261,382,3.007,406,1.241,407,1.482,408,1.354,415,2.737,429,1.799,445,1.799,446,2.798,485,3.705,486,4.084,498,2.798,502,2.457,505,2.457,506,3.386,529,3.088,530,3.35,544,3.088,545,1.748,570,2.722,571,2.024,645,3.825,660,2.722,683,2.224,702,3.065,748,2.224,772,2.004,773,2.004,774,2.457,775,1.628,776,2.737,778,2.004,779,2.074,780,2.605,781,2.605,782,3.117,783,4.051,784,2.004,785,3.507,786,1.799,787,3.249,788,1.628,789,1.482,790,2.224,791,3.557,792,3.35,793,2.024,794,2.737,795,2.004,796,2.004,797,2.737,798,2.605,799,2.605,800,2.737,801,2.737,802,2.737,803,3.557,804,3.507,805,3.557,806,3.557,807,2.605,808,2.605,809,2.605,810,2.605,811,2.605,812,2.605,813,2.605,814,4.27,815,4.27,816,3.126]],["title/components/IonIconComponent.html",[23,1.062,74,0.821]],["body/components/IonIconComponent.html",[3,0.365,4,0.365,5,0.32,7,0.627,9,0.195,11,0.933,12,3.397,13,1.06,16,0.765,17,0.427,18,0.034,19,0.821,22,1.867,23,1.757,25,1.154,27,1.021,30,2.513,33,0.365,35,0.567,43,0.365,49,0.412,54,1.688,60,0.82,62,1.71,72,0.022,73,0.022,74,1.5,75,1.258,76,2.043,77,1.824,78,1.824,79,1.824,94,1.258,95,2.869,103,1.504,105,1.267,110,1.914,115,0.82,123,1.06,128,4.724,135,1.258,144,1.502,145,2.48,146,1.154,147,3.024,148,1.824,149,1.824,150,1.258,151,1.502,152,1.824,153,1.258,154,1.824,155,2.688,156,1.824,157,1.06,158,1.154,159,1.373,160,1.373,161,1.824,162,1.154,163,1.824,164,1.569,165,1.824,184,3.369,186,3.59,196,2.245,216,2.763,342,2.763,411,3.59,449,2.48,513,3.116,624,4.1,677,3.541,691,4.08,775,2.245,817,4.378,818,3.8,819,2.64,820,3.59,821,5.985,822,5.255,823,4.31,824,4.31,825,3.59,826,3.169,827,3.169,828,4.897,829,4.31,830,4.31,831,5.67,832,4.897,833,4.897,834,4.897,835,4.897,836,4.897,837,4.897,838,4.897,839,4.08,840,4.897,841,4.08,842,4.08,843,4.897,844,4.897,845,4.897,846,3.169,847,3.169,848,3.169]],["title/interfaces/LayerData.html",[0,0.568,849,1.505]],["body/interfaces/LayerData.html",[0,0.902,2,1.744,3,0.463,4,0.463,5,0.406,7,0.586,9,0.248,10,0.733,16,0.8,17,0.518,18,0.034,19,0.655,33,0.58,43,0.633,51,2.624,64,2.077,72,0.026,73,0.026,94,1.597,129,0.871,306,2.389,545,1.927,550,2.911,619,3.23,678,2.316,779,1.999,793,2.389,849,2.607,850,2.911,851,2.911,852,4.582,853,2.389,854,4.197,855,3.881,856,3.235,857,4.197,858,2.899,859,4.197,860,3.002,861,4.197,862,2.864,863,2.58,864,1.744,865,3.353,866,3.415,867,3.353,868,3.353,869,3.353,870,2.58]],["title/injectables/LoaderInjector.html",[34,0.687,503,2.035]],["body/injectables/LoaderInjector.html",[3,0.428,4,0.428,5,0.375,7,0.697,9,0.229,10,0.697,11,0.805,15,2.496,16,0.815,17,0.418,18,0.034,19,0.483,27,0.881,33,0.428,34,1.037,35,0.666,43,0.428,44,1.72,47,1.476,48,1.476,49,0.483,56,1.135,60,1.24,61,0.805,62,1.902,72,0.025,73,0.025,76,2.272,99,1.472,105,1.24,112,3.072,115,0.962,123,1.244,129,0.805,166,1.763,232,3.465,257,2.757,354,3.714,395,2.384,408,2.698,455,2.757,466,3.465,470,3.222,503,3.072,507,4.664,548,3.465,571,2.861,588,3.465,591,3.992,736,3.398,779,2.104,820,3.992,871,3.099,872,4.792,873,5.932,874,2.757,875,4.792,876,4.792,877,6.177,878,4.792,879,4.792,880,4.792,881,4.792,882,5.794,883,3.72,884,3.992,885,2.496,886,4.792,887,4.792,888,3.992,889,4.792,890,3.72,891,4.792,892,4.792,893,3.72]],["title/components/MapComponent.html",[74,0.821,157,1.062]],["body/components/MapComponent.html",[3,0.129,4,0.129,5,0.113,7,0.28,9,0.156,10,0.436,11,0.937,13,1.762,16,0.735,17,0.506,18,0.034,19,0.667,20,1.965,22,0.486,23,0.375,25,1.226,27,0.598,28,1.197,30,1.296,31,1.002,32,1.722,33,0.517,35,0.201,39,2.114,40,3.348,41,3.13,42,0.409,43,0.129,44,1.379,49,0.146,54,1.551,55,2.153,56,1.126,59,1.197,60,0.498,61,1.11,62,2.004,64,0.845,66,0.375,70,0.29,72,0.01,73,0.01,74,0.871,75,0.445,76,0.912,77,1.107,78,0.646,79,0.646,91,1.391,92,1.826,94,0.445,95,2.128,99,0.591,102,2.164,103,0.919,104,0.812,105,1.5,111,0.375,112,0.72,115,0.871,116,1.188,123,1.386,126,1.603,127,3.348,129,1.053,130,1.228,143,1.918,144,0.532,145,2.26,146,0.409,147,1.722,148,0.646,149,0.646,150,0.445,151,0.532,152,0.646,153,0.445,154,0.646,155,0.532,156,0.646,157,1.001,158,2.196,159,0.486,160,0.486,161,0.646,162,0.409,163,0.646,164,0.701,165,0.646,184,1.619,193,0.72,196,2.881,216,1.233,218,1.419,220,3.246,268,0.935,306,0.912,307,3.453,322,1.391,329,0.834,342,1.918,349,2.656,353,0.812,354,2.158,369,2.435,401,2.775,402,1.233,404,0.935,449,1.107,456,1.233,461,0.72,481,2.996,487,2.104,497,2.493,513,1.826,521,2.578,522,1.754,523,2.798,524,0.935,535,1.603,536,1.391,537,1.826,545,1.689,548,1.826,549,1.233,554,2.104,559,1.002,570,1.002,575,0.72,576,1.603,621,2.104,624,1.826,633,0.935,634,0.812,635,0.812,645,0.72,677,0.812,678,1.722,680,0.812,682,1.603,683,1.002,690,2.104,695,2.493,719,1.603,734,2.805,736,2.354,748,1.315,779,2.004,786,1.107,793,2.195,825,1.603,842,3.272,849,1.965,853,2.812,856,2.533,858,1.107,862,0.585,863,0.72,864,1.094,866,1.722,884,0.935,885,2.63,894,1.122,895,0.812,896,1.924,897,1.924,898,2.525,899,4.334,900,3.857,901,2.525,902,2.525,903,3.857,904,2.525,905,2.525,906,2.993,907,3.367,908,3.588,909,2.993,910,3.606,911,1.924,912,2.525,913,2.525,914,2.525,915,2.993,916,1.924,917,1.924,918,1.722,919,1.924,920,1.391,921,1.122,922,1.122,923,1.924,924,2.993,925,2.104,926,3.13,927,2.993,928,2.525,929,2.525,930,1.826,931,2.525,932,2.525,933,2.993,934,2.525,935,2.525,936,2.525,937,1.122,938,1.924,939,2.518,940,1.924,941,1.122,942,1.924,943,2.993,944,1.924,945,1.924,946,1.924,947,1.924,948,1.122,949,2.493,950,1.122,951,2.993,952,1.924,953,1.122,954,1.924,955,1.122,956,2.993,957,3.588,958,1.924,959,2.993,960,1.122,961,1.122,962,2.493,963,1.924,964,1.122,965,1.924,966,1.122,967,1.924,968,1.924,969,1.924,970,1.122,971,1.924,972,1.924,973,1.924,974,1.122,975,1.122,976,1.122,977,1.924,978,3.857,979,1.122,980,1.603,981,1.122,982,1.122,983,1.122,984,1.924,985,1.122,986,2.525,987,1.122,988,1.122,989,1.391,990,1.122,991,2.993,992,1.924,993,1.924,994,1.122,995,1.924,996,2.493,997,1.122,998,1.122,999,1.122,1000,1.122,1001,1.122,1002,1.122,1003,1.122,1004,0.935,1005,1.924,1006,1.122,1007,1.122,1008,1.122,1009,1.122,1010,1.122,1011,1.924,1012,1.924,1013,1.122,1014,1.122,1015,0.935,1016,1.122,1017,1.122,1018,1.122,1019,1.122,1020,1.122,1021,1.122,1022,0.935,1023,1.122,1024,0.935,1025,0.935,1026,1.603,1027,0.935,1028,1.122,1029,1.122,1030,1.122,1031,1.122,1032,1.122,1033,1.122,1034,1.122,1035,1.122,1036,1.122,1037,1.122,1038,1.122,1039,1.122,1040,1.122,1041,1.122,1042,1.122,1043,1.122,1044,1.122,1045,1.122,1046,1.122,1047,1.122,1048,1.122,1049,1.924,1050,1.122,1051,1.924,1052,1.122,1053,1.924,1054,1.924,1055,1.122,1056,1.924,1057,1.122,1058,1.122,1059,1.122,1060,1.924,1061,1.122,1062,1.924,1063,1.122,1064,1.122,1065,1.122,1066,1.122,1067,0.935,1068,0.812,1069,1.122,1070,1.122,1071,1.122,1072,1.122,1073,1.122,1074,1.122,1075,1.122,1076,1.122,1077,1.122,1078,1.122,1079,1.122,1080,1.122,1081,1.122,1082,1.122,1083,1.122,1084,1.122,1085,1.603,1086,1.122,1087,1.122,1088,2.525,1089,1.924,1090,1.122,1091,2.525,1092,1.122,1093,2.525,1094,0.812,1095,1.122,1096,1.122,1097,1.122,1098,1.924,1099,1.122,1100,1.122,1101,1.924,1102,1.122,1103,1.122,1104,1.122,1105,1.122,1106,1.122,1107,1.603,1108,1.122,1109,1.122,1110,2.525,1111,1.122,1112,1.122,1113,1.122,1114,2.993,1115,1.122,1116,1.122,1117,1.122,1118,1.122,1119,1.122,1120,1.122,1121,1.122,1122,1.122,1123,0.72,1124,0.935,1125,1.924,1126,1.122,1127,1.924,1128,1.122,1129,1.122,1130,1.122,1131,1.924,1132,1.122,1133,1.122,1134,1.122,1135,1.122,1136,1.924,1137,1.122,1138,1.122,1139,1.122,1140,1.122,1141,1.122,1142,1.924,1143,1.122,1144,1.122,1145,1.122,1146,1.122,1147,0.812,1148,1.122,1149,2.525,1150,1.122,1151,1.122,1152,1.122,1153,1.122,1154,1.122,1155,1.122,1156,1.122,1157,3.673,1158,1.122,1159,1.122,1160,1.122,1161,1.122,1162,1.122,1163,1.122,1164,1.122,1165,1.122,1166,1.122,1167,1.122,1168,1.924,1169,1.924,1170,1.122,1171,1.122,1172,1.122,1173,1.122,1174,1.122,1175,1.122,1176,1.122,1177,1.122,1178,1.924,1179,1.122,1180,1.122,1181,1.122,1182,1.122,1183,1.122,1184,1.122,1185,1.122]],["title/interfaces/MapDB.html",[0,0.568,1186,2.035]],["body/interfaces/MapDB.html",[0,0.434,2,1.049,3,0.279,4,0.279,5,0.244,7,0.352,9,0.149,10,0.518,13,1.413,14,2.988,16,0.723,17,0.468,18,0.034,19,0.315,26,2.987,28,2.209,33,0.647,34,0.771,35,0.434,42,0.882,43,0.279,44,1.094,47,0.961,48,0.961,49,0.315,54,1.431,55,0.882,56,1.001,60,1.205,61,1.124,64,1.191,66,1.413,70,1.205,72,0.018,73,0.018,89,1.553,103,0.744,108,1.394,110,1.297,111,0.81,116,0.961,130,1.558,135,0.961,158,1.955,217,2.209,218,1.689,221,2.018,222,1.148,228,1.856,244,2.209,264,1.148,306,1.148,329,1.831,382,2.05,396,1.751,397,1.751,405,1.394,406,1.414,407,1.148,408,1.049,417,2.576,429,1.394,445,2.05,446,2.05,498,1.394,505,1.394,506,2.432,521,2.747,522,2.201,545,1.961,549,1.553,570,2.586,571,1.148,660,1.262,683,1.856,702,3.054,748,1.262,774,2.432,775,1.856,776,2.709,777,3.369,778,2.987,779,2.13,782,1.553,784,1.553,785,2.709,786,1.394,787,2.857,788,1.262,789,1.148,790,1.856,792,2.284,793,2.003,794,2.284,795,1.553,796,1.553,797,2.284,800,1.553,801,2.709,802,2.284,804,2.987,849,2.462,853,2.209,855,2.709,856,3.084,860,2.796,862,1.262,864,1.049,866,2.681,870,1.553,885,3.111,918,1.394,920,1.751,926,2.576,930,1.751,1068,1.751,1123,1.553,1147,1.751,1186,2.284,1187,1.553,1188,4.326,1189,2.968,1190,3.882,1191,3.52,1192,3.52,1193,2.968,1194,2.968,1195,2.968,1196,2.968,1197,1.553,1198,1.751,1199,2.018,1200,2.018,1201,2.018,1202,2.018,1203,2.018,1204,2.018,1205,2.018,1206,2.018,1207,2.018,1208,2.968,1209,3.52,1210,2.018,1211,3.52,1212,2.968,1213,2.018,1214,2.968,1215,2.018,1216,2.968,1217,2.968,1218,2.968,1219,2.018,1220,2.018,1221,2.018,1222,2.018,1223,2.968,1224,2.018,1225,2.018,1226,2.018,1227,2.018,1228,2.018,1229,2.018,1230,2.018,1231,2.018,1232,2.968,1233,2.018,1234,1.751,1235,1.553,1236,2.018,1237,2.018,1238,2.018,1239,2.018,1240,2.018,1241,2.018,1242,2.018,1243,2.018,1244,2.018,1245,2.018,1246,2.018,1247,2.018,1248,2.968,1249,2.018,1250,2.018,1251,2.018,1252,2.018,1253,2.018,1254,2.018,1255,2.018]],["title/injectables/MapService.html",[34,0.687,918,1.827]],["body/injectables/MapService.html",[0,0.413,3,0.265,4,0.265,5,0.233,7,0.597,9,0.142,10,0.5,11,0.744,13,1.373,14,2.362,16,0.769,17,0.358,18,0.034,19,0.534,26,2.916,27,0.814,28,1.629,33,0.639,34,0.744,35,0.413,42,0.84,43,0.265,44,1.397,47,0.915,48,0.915,49,0.3,54,1.055,55,1.495,56,0.972,60,1.177,61,1.053,64,1.149,66,1.149,70,1.177,72,0.018,73,0.018,89,2.202,99,1.055,103,1.261,105,1.062,108,1.327,110,1.657,111,1.149,115,0.596,116,1.629,129,0.499,130,1.627,135,0.915,158,2.021,166,1.093,217,2.418,218,1.629,221,2.107,222,1.093,228,1.789,244,2.418,264,1.093,306,1.093,329,1.778,381,1.667,382,2.618,395,1.478,396,1.667,397,1.667,405,1.327,406,1.363,407,1.093,408,0.999,417,1.667,429,1.327,445,1.327,446,2.618,498,2.362,505,1.977,506,2.935,521,2.752,522,2.138,545,2.023,549,1.478,570,2.534,571,1.629,660,1.789,683,2.138,702,2.942,748,1.789,774,1.977,775,1.201,776,2.202,778,2.916,779,1.931,782,2.202,784,1.478,785,3.118,786,1.327,787,2.799,788,1.201,789,1.093,790,1.789,792,2.916,793,2.418,794,2.202,795,1.478,796,1.478,797,2.202,800,2.202,801,2.632,802,2.916,804,3.27,849,2.306,853,1.946,855,2.632,856,2.986,860,2.534,862,1.201,864,0.999,866,2.362,870,1.478,885,3.131,918,1.977,920,2.484,926,3.688,930,1.667,1068,2.484,1123,1.478,1147,1.667,1186,1.478,1187,1.478,1188,2.862,1189,1.921,1190,2.862,1191,3.42,1192,3.42,1193,1.921,1194,1.921,1195,2.862,1196,2.862,1197,1.478,1198,1.667,1199,1.921,1200,2.862,1201,1.921,1202,1.921,1203,1.921,1204,1.921,1205,2.862,1206,3.42,1207,1.921,1208,2.862,1209,3.42,1210,1.921,1211,3.42,1212,2.862,1213,1.921,1214,2.862,1215,1.921,1216,2.862,1217,2.862,1218,2.862,1219,1.921,1220,1.921,1221,1.921,1222,1.921,1223,2.862,1224,1.921,1225,1.921,1226,1.921,1227,1.921,1228,1.921,1229,1.921,1230,1.921,1231,1.921,1232,2.862,1233,1.921,1234,1.667,1235,1.478,1236,1.921,1237,1.921,1238,1.921,1239,1.921,1240,1.921,1241,1.921,1242,1.921,1243,1.921,1244,1.921,1245,1.921,1246,1.921,1247,1.921,1248,2.862,1249,1.921,1250,1.921,1251,1.921,1252,1.921,1253,1.921,1254,1.921,1255,1.921,1256,3.435,1257,2.306,1258,2.306]],["title/interfaces/Marker.html",[0,0.568,939,2.035]],["body/interfaces/Marker.html",[0,0.975,2,1.706,3,0.453,4,0.453,5,0.397,7,0.573,9,0.243,10,0.723,11,1.339,12,3.464,13,1.317,17,0.499,18,0.034,20,2.356,25,1.81,33,0.572,43,0.453,54,1.526,59,2.356,64,2.013,72,0.026,73,0.026,123,1.317,129,1.076,157,1.662,182,3.594,257,2.86,410,3.186,470,2.86,559,2.588,853,2.581,858,3.464,863,2.524,864,2.153,903,4.14,939,4.075,1235,3.779,1259,3.281,1260,4.97,1261,5.718,1262,6.287,1263,5.445,1264,5.445,1265,4.97,1266,4.97,1267,3.938]],["title/injectables/QueryParameterGuard.html",[34,0.687,1268,2.296]],["body/injectables/QueryParameterGuard.html",[3,0.581,4,0.387,5,0.34,7,0.735,9,0.207,11,1.166,13,1.876,14,2.583,16,0.816,17,0.392,18,0.034,19,0.583,24,4.463,25,1.634,27,1.276,28,2.128,29,2.877,31,2.338,33,0.581,34,0.971,35,0.603,36,3.452,37,4.057,38,1.937,39,3.228,42,1.226,43,0.387,47,1.336,48,1.336,49,0.437,54,1.654,60,1.393,70,1.161,72,0.023,73,0.023,87,3.739,99,1.379,103,1.551,105,1.161,108,3.444,110,1.226,111,1.126,115,0.871,116,1.781,130,1.126,132,3.245,135,1.336,166,1.596,521,2.128,545,1.501,571,2.553,619,3.452,716,2.804,839,3.739,957,3.245,1268,3.895,1269,4.206,1270,2.804,1271,4.488,1272,4.488,1273,4.382,1274,4.488,1275,4.488,1276,4.488,1277,4.488,1278,5.386,1279,5.984,1280,4.488,1281,4.488,1282,5.049,1283,3.366,1284,3.366,1285,4.488,1286,4.488,1287,3.366,1288,4.807,1289,5.386,1290,3.366,1291,4.487,1292,4.488,1293,3.739,1294,3.366,1295,3.366,1296,3.366,1297,3.366,1298,3.366]],["title/interfaces/ShapeData.html",[0,0.568,860,1.654]],["body/interfaces/ShapeData.html",[0,0.894,2,1.719,3,0.457,4,0.457,5,0.4,7,0.578,9,0.245,10,0.727,16,0.909,17,0.534,18,0.034,19,0.784,33,0.575,43,0.629,51,2.067,64,2.071,72,0.026,73,0.026,94,1.982,129,0.859,306,1.882,545,1.67,550,3.611,619,2.544,678,2.874,779,2.394,793,1.882,849,2.368,850,2.87,851,2.87,852,4.552,853,1.882,854,3.306,855,3.201,856,2.846,857,3.306,858,2.284,859,3.306,860,2.846,861,4.777,862,3.189,863,2.544,864,1.719,865,4.16,866,3.622,867,4.16,868,4.16,869,4.16,870,3.676]],["title/interfaces/WisdomInterface.html",[0,0.568,1299,2.296]],["body/interfaces/WisdomInterface.html",[0,1.059,2,1.722,3,0.458,4,0.458,5,0.401,7,0.578,9,0.245,10,0.727,16,0.796,17,0.477,18,0.034,19,0.65,33,0.458,38,2.287,43,0.458,72,0.026,73,0.026,74,1.561,413,3.302,427,3.615,521,2.72,523,3.147,537,3.615,575,3.204,643,4.164,736,3.204,775,2.604,874,3.302,888,4.164,925,4.164,1107,4.164,1273,4.553,1299,4.149,1300,3.312,1301,5.738,1302,3.678,1303,4.999,1304,4.999,1305,4.999,1306,4.999,1307,6.035,1308,6.035,1309,4.999,1310,4.999,1311,5.738,1312,4.999,1313,4.999,1314,4.999]],["title/modules/WisdomModule.html",[874,1.827,1315,2.035]],["body/modules/WisdomModule.html",[3,0.41,4,0.41,5,0.36,18,0.034,23,2.096,33,0.721,35,0.638,38,2.051,43,0.41,49,0.463,72,0.024,73,0.024,75,2.487,144,1.689,150,2.487,151,2.209,153,2.487,155,1.689,157,2.096,160,2.715,162,2.282,164,2.282,201,2.682,370,2.969,634,2.577,635,2.577,818,2.577,874,2.051,908,3.37,1094,2.577,1302,2.284,1315,4.183,1316,2.284,1317,4.326,1318,2.969,1319,2.969,1320,4.326,1321,2.969,1322,2.969,1323,2.969,1324,2.969,1325,3.564,1326,4.66,1327,2.969,1328,4.66,1329,4.66,1330,4.66,1331,3.564,1332,4.66,1333,3.564,1334,3.564,1335,3.564,1336,3.564,1337,3.564,1338,3.564,1339,3.564]],["title/coverage.html",[1340,3.595]],["body/coverage.html",[0,1.043,1,1.854,5,0.325,6,3.151,17,0.281,18,0.034,23,1.077,34,1.233,49,0.419,50,1.854,56,0.763,72,0.022,73,0.022,74,1.43,75,1.278,80,2.684,146,1.798,150,1.278,153,1.278,157,1.077,160,1.395,162,1.173,164,1.173,171,3.151,172,2.684,200,3.165,201,2.842,202,2.684,206,2.065,217,1.527,322,3.151,339,2.27,345,2.684,377,2.684,400,2.329,405,1.854,406,2.261,407,1.527,409,2.065,433,2.065,435,3.734,436,2.793,484,2.329,502,1.854,503,2.065,559,3.086,772,2.065,773,3.391,788,2.27,790,2.27,817,2.684,818,2.329,819,2.684,849,1.527,850,3.151,851,3.151,860,1.678,871,2.684,895,2.329,918,1.854,939,2.065,989,2.329,1085,5.448,1186,2.065,1187,3.543,1197,2.065,1259,2.684,1268,2.329,1269,2.684,1270,2.684,1299,2.329,1300,2.684,1340,2.684,1341,3.221,1342,3.221,1343,3.221,1344,5.291,1345,3.221,1346,5.291,1347,2.684,1348,3.221,1349,3.221,1350,3.221,1351,3.221,1352,3.221,1353,3.221,1354,3.221,1355,5.528,1356,2.684,1357,2.684,1358,6.172,1359,2.684,1360,6.367,1361,3.63,1362,2.684,1363,2.684,1364,2.684,1365,4.358,1366,2.684,1367,3.221,1368,2.684,1369,2.684,1370,3.221,1371,3.151,1372,2.684,1373,2.684,1374,4.746,1375,2.684,1376,3.221,1377,2.684,1378,2.684,1379,2.684,1380,2.684,1381,2.684,1382,3.221,1383,3.221]],["title/dependencies.html",[1316,2.445,1384,2.216]],["body/dependencies.html",[18,0.032,35,0.895,72,0.03,73,0.03,1316,3.677,1327,4.162,1385,4.996,1386,4.996,1387,4.996,1388,5.736]],["title/miscellaneous/enumerations.html",[1389,1.152,1390,3.177]],["body/miscellaneous/enumerations.html",[9,0.276,18,0.033,61,1.359,62,1.777,72,0.028,73,0.028,129,1.164,158,1.631,171,3.238,176,3.731,339,3.003,401,2.87,406,1.777,410,2.87,435,2.87,436,3.448,440,4.481,441,3.889,449,2.577,450,3.238,451,3.731,453,3.238,455,2.577,464,3.238,470,2.577,885,2.801,1004,4.481,1015,4.481,1288,4.481,1347,4.481,1371,3.238,1389,1.94,1390,3.731,1391,5.379,1392,4.478,1393,3.731,1394,3.731,1395,4.478,1396,4.478,1397,4.478,1398,4.478,1399,5.379,1400,5.379,1401,4.478,1402,4.478,1403,5.379]],["title/miscellaneous/functions.html",[526,2.758,1389,1.152]],["body/miscellaneous/functions.html",[7,0.864,9,0.214,11,1.285,16,0.877,17,0.508,18,0.033,19,0.771,27,1.406,29,2.936,32,2.636,36,2.936,44,1.575,54,1.066,64,1.985,70,0.898,72,0.024,73,0.024,74,0.898,83,2.892,110,1.668,114,2.51,115,1.535,143,3.633,158,1.867,218,1.646,226,2.892,317,2.225,353,3.943,395,2.225,401,2.936,402,2.225,413,2.636,415,2.225,443,2.51,522,1.808,523,2.636,526,2.51,536,2.51,545,1.161,559,2.67,577,2.892,588,2.51,623,2.892,678,2.636,752,2.892,779,2.164,789,1.646,841,2.892,858,1.998,862,1.808,864,1.504,885,3.092,949,4.271,962,2.892,1124,2.892,1273,3.708,1291,2.892,1293,3.816,1371,2.51,1372,3.816,1373,3.816,1374,2.892,1375,4.271,1377,3.816,1378,3.816,1379,3.816,1380,3.816,1381,3.816,1389,1.504,1394,3.816,1404,5.821,1405,3.471,1406,3.471,1407,3.471,1408,4.581,1409,3.471,1410,3.471,1411,3.471,1412,3.471,1413,3.471,1414,3.471,1415,3.471,1416,3.471,1417,3.471,1418,3.471,1419,3.471,1420,3.471,1421,3.471,1422,3.471,1423,3.471,1424,3.471,1425,3.471,1426,3.471,1427,3.471,1428,3.471,1429,3.471,1430,4.581,1431,5.127,1432,4.581,1433,3.471,1434,3.471,1435,3.471,1436,3.471,1437,3.471,1438,3.471,1439,3.471,1440,5.127,1441,2.892,1442,3.471,1443,3.471,1444,3.471,1445,3.471,1446,5.668,1447,3.471,1448,3.471]],["title/index.html",[9,0.196,1449,2.645]],["body/index.html",[2,1.772,18,0.033,23,2.061,49,0.531,66,1.702,72,0.026,73,0.026,75,2.446,76,1.939,144,1.939,150,2.446,153,2.446,157,2.061,159,1.772,160,2.67,162,2.244,164,2.244,166,1.939,236,3.407,874,2.928,908,3.68,996,3.407,1094,2.958,1315,4.211,1316,2.622,1317,3.407,1318,3.407,1319,3.407,1320,3.407,1321,3.407,1322,3.407,1323,3.407,1324,3.407,1449,3.407,1450,4.09,1451,4.09]],["title/modules.html",[1302,2.766]],["body/modules.html",[18,0.03,72,0.03,73,0.03,1302,3.241,1315,3.241,1452,5.056,1453,5.056,1454,5.056,1455,5.056]],["title/properties.html",[10,0.555,1384,2.216]],["body/properties.html",[10,0.739,18,0.031,72,0.03,73,0.03,789,2.406,1456,5.076]],["title/miscellaneous/typealiases.html",[1389,1.152,1457,3.814]],["body/miscellaneous/typealiases.html",[9,0.29,16,0.685,17,0.514,18,0.029,72,0.029,73,0.029,196,2.453,484,3.406,489,4.617,519,4.617,521,2.233,523,3.389,530,3.019,538,5.065,575,3.019,661,3.924,680,3.406,777,3.406,853,2.628,895,3.406,900,4.617,978,4.617,1024,3.924,1025,3.924,1026,3.924,1027,3.924,1389,2.04,1458,4.71,1459,6.08,1460,5.542]],["title/miscellaneous/variables.html",[1389,1.152,1461,3.177]],["body/miscellaneous/variables.html",[9,0.174,12,2.647,16,0.727,17,0.5,18,0.034,19,0.516,22,1.22,25,1.025,31,1.466,54,1.762,56,1.33,61,1.306,62,1.117,64,1.328,66,0.942,70,1.027,72,0.02,73,0.02,89,1.805,110,1.675,111,1.878,122,2.346,123,0.942,129,1.306,130,1.538,155,1.335,157,0.942,158,1.675,179,2.346,217,2.368,218,2.181,221,1.22,222,1.335,244,1.335,307,1.805,339,2.847,400,3.326,405,2.647,406,2.09,407,1.882,408,1.22,409,2.545,413,1.62,433,1.805,435,3.503,436,2.545,437,2.346,438,4.979,441,2.036,443,2.871,444,3.308,450,2.036,454,2.346,455,2.285,456,1.805,457,2.346,458,2.346,460,2.871,461,3.503,463,2.346,464,2.871,465,2.346,466,2.036,468,3.308,469,2.346,470,2.285,471,4.553,472,2.036,473,2.346,474,2.346,475,2.036,476,2.346,477,2.346,478,2.346,479,2.346,480,2.346,481,3.952,483,3.308,485,1.805,509,2.346,522,1.466,545,0.942,559,2.068,593,2.346,599,2.346,660,1.466,697,2.346,702,2.847,721,2.346,722,3.308,737,2.346,773,1.805,774,2.285,787,2.874,788,2.602,789,1.882,790,2.602,856,1.466,864,1.992,899,3.832,910,3.308,957,2.036,980,2.346,989,3.952,1022,2.346,1067,2.346,1123,1.805,1187,1.805,1197,2.545,1198,2.036,1234,2.036,1235,2.545,1356,2.346,1357,3.308,1359,4.161,1361,4.161,1362,3.308,1363,3.308,1364,3.308,1366,3.308,1368,2.346,1369,3.308,1389,1.992,1393,4.388,1441,2.346,1461,2.346,1462,4.6,1463,2.815,1464,3.971,1465,2.815,1466,3.971,1467,3.971,1468,2.815,1469,2.815,1470,4.995,1471,2.815,1472,2.815,1473,2.815,1474,2.815,1475,2.815,1476,2.815,1477,3.971,1478,2.815,1479,2.815,1480,2.815,1481,4.6,1482,2.815,1483,3.971,1484,2.815,1485,3.971,1486,2.815,1487,3.971,1488,2.815,1489,2.815,1490,2.815,1491,2.815,1492,2.815,1493,2.815,1494,2.815,1495,2.815,1496,3.971,1497,3.971,1498,3.971,1499,2.815,1500,2.815,1501,2.815,1502,2.815,1503,2.815,1504,2.815,1505,2.815]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"injectables/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":322,"title":{},"body":{"components/DragDropComponent.html":{},"components/MapComponent.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1456,"title":{},"body":{"properties.html":{}}}],["0/1",{"_index":1376,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1352,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":66,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/DragDropComponent.html":{},"injectables/DragDropService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["1/1",{"_index":1360,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1185,"title":{},"body":{"components/MapComponent.html":{}}}],["100",{"_index":1085,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["11",{"_index":1350,"title":{},"body":{"coverage.html":{}}}],["16.1.0",{"_index":1388,"title":{},"body":{"dependencies.html":{}}}],["1f5aec",{"_index":952,"title":{},"body":{"components/MapComponent.html":{}}}],["1}/${count",{"_index":740,"title":{},"body":{"components/IfcComponent.html":{}}}],["2",{"_index":1123,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["2.5.3",{"_index":1386,"title":{},"body":{"dependencies.html":{}}}],["2/17",{"_index":1351,"title":{},"body":{"coverage.html":{}}}],["2/2",{"_index":1365,"title":{},"body":{"coverage.html":{}}}],["2/5",{"_index":1354,"title":{},"body":{"coverage.html":{}}}],["20/22",{"_index":1349,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":1120,"title":{},"body":{"components/MapComponent.html":{}}}],["20vh",{"_index":238,"title":{},"body":{"components/DragDropComponent.html":{}}}],["21/21",{"_index":1367,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":1450,"title":{},"body":{"index.html":{}}}],["3/3",{"_index":1355,"title":{},"body":{"coverage.html":{}}}],["30/30",{"_index":1370,"title":{},"body":{"coverage.html":{}}}],["39;01&#39",{"_index":1011,"title":{},"body":{"components/MapComponent.html":{}}}],["39;034030000000&#39",{"_index":1012,"title":{},"body":{"components/MapComponent.html":{}}}],["39;all",{"_index":1003,"title":{},"body":{"components/MapComponent.html":{}}}],["39;only",{"_index":1008,"title":{},"body":{"components/MapComponent.html":{}}}],["39;show",{"_index":1014,"title":{},"body":{"components/MapComponent.html":{}}}],["4/4",{"_index":1344,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1353,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":236,"title":{},"body":{"components/DragDropComponent.html":{},"index.html":{}}}],["5/5",{"_index":1346,"title":{},"body":{"coverage.html":{}}}],["500px",{"_index":695,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["53.1434501",{"_index":968,"title":{},"body":{"components/MapComponent.html":{}}}],["6",{"_index":1451,"title":{},"body":{"index.html":{}}}],["7",{"_index":996,"title":{},"body":{"components/MapComponent.html":{},"index.html":{}}}],["7/7",{"_index":1345,"title":{},"body":{"coverage.html":{}}}],["70vh",{"_index":510,"title":{},"body":{"components/IfcComponent.html":{}}}],["8.2145521",{"_index":969,"title":{},"body":{"components/MapComponent.html":{}}}],["90",{"_index":1348,"title":{},"body":{"coverage.html":{}}}],["a0a0a0",{"_index":1494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abc123",{"_index":1428,"title":{},"body":{"miscellaneous/functions.html":{}}}],["abort",{"_index":681,"title":{},"body":{"components/IfcComponent.html":{}}}],["accessing",{"_index":442,"title":{},"body":{"classes/ErrorHttpContextToken.html":{}}}],["accessors",{"_index":825,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["activated",{"_index":1291,"title":{},"body":{"injectables/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["activatedroutesnapshot",{"_index":36,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"injectables/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["active",{"_index":180,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["actual_component",{"_index":165,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["add",{"_index":232,"title":{},"body":{"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{}}}],["addloader",{"_index":880,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["addloader(toresolve",{"_index":881,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["adds",{"_index":411,"title":{},"body":{"injectables/DragDropService.html":{},"components/IonIconComponent.html":{}}}],["adjust",{"_index":229,"title":{},"body":{"components/DragDropComponent.html":{}}}],["adjusted",{"_index":512,"title":{},"body":{"components/IfcComponent.html":{}}}],["administration",{"_index":1403,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["afterviewinit",{"_index":487,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["alert(\"duplicate",{"_index":316,"title":{},"body":{"components/DragDropComponent.html":{}}}],["alert(\"only",{"_index":301,"title":{},"body":{"components/DragDropComponent.html":{}}}],["alert(response",{"_index":338,"title":{},"body":{"components/DragDropComponent.html":{}}}],["alias",{"_index":680,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":1458,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":722,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["alive",{"_index":98,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["allloaded",{"_index":676,"title":{},"body":{"components/IfcComponent.html":{}}}],["allow",{"_index":513,"title":{},"body":{"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["allowed",{"_index":297,"title":{},"body":{"components/DragDropComponent.html":{}}}],["allowing",{"_index":466,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"injectables/LoaderInjector.html":{},"miscellaneous/variables.html":{}}}],["allows",{"_index":112,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"classes/ErrorHttpContextToken.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{}}}],["already",{"_index":801,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["altered",{"_index":649,"title":{},"body":{"components/IfcComponent.html":{}}}],["always",{"_index":945,"title":{},"body":{"components/MapComponent.html":{}}}],["angular",{"_index":831,"title":{},"body":{"components/IonIconComponent.html":{}}}],["angular/common",{"_index":1327,"title":{},"body":{"modules/WisdomModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":264,"title":{},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["angular/core",{"_index":35,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{},"modules/WisdomModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":38,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"injectables/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["another",{"_index":233,"title":{},"body":{"components/DragDropComponent.html":{},"components/IfcComponent.html":{}}}],["any).options.padding",{"_index":1084,"title":{},"body":{"components/MapComponent.html":{}}}],["api",{"_index":217,"title":{},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["api_url",{"_index":1197,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiurl",{"_index":274,"title":{},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{}}}],["application/json",{"_index":1236,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["applied",{"_index":187,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["arg0",{"_index":1468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arguments",{"_index":358,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["array",{"_index":28,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/DragDropComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{}}}],["array.from(event.datatransfer.files",{"_index":296,"title":{},"body":{"components/DragDropComponent.html":{}}}],["array.from(event.target.files",{"_index":294,"title":{},"body":{"components/DragDropComponent.html":{}}}],["array.from(selectlist",{"_index":319,"title":{},"body":{"components/DragDropComponent.html":{}}}],["array.from(this.selectedshapes[layerkey",{"_index":1182,"title":{},"body":{"components/MapComponent.html":{}}}],["associated",{"_index":473,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["async",{"_index":498,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["asynchronously",{"_index":800,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["attention",{"_index":621,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["attribute",{"_index":839,"title":{},"body":{"components/IonIconComponent.html":{},"injectables/QueryParameterGuard.html":{}}}],["attribution",{"_index":1116,"title":{},"body":{"components/MapComponent.html":{}}}],["auth.ts",{"_index":1357,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["authorization",{"_index":1496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["automatically",{"_index":427,"title":{},"body":{"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["available",{"_index":622,"title":{},"body":{"components/IfcComponent.html":{}}}],["avoid",{"_index":567,"title":{},"body":{"components/IfcComponent.html":{}}}],["await",{"_index":570,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["back",{"_index":1244,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["background",{"_index":346,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["base",{"_index":400,"title":{},"body":{"injectables/DragDropService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["before",{"_index":304,"title":{},"body":{"components/DragDropComponent.html":{},"components/IfcComponent.html":{}}}],["behavior",{"_index":476,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["behaviorsubject",{"_index":40,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{}}}],["being",{"_index":281,"title":{},"body":{"components/DragDropComponent.html":{},"components/IfcComponent.html":{}}}],["beware",{"_index":623,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/functions.html":{}}}],["bkg",{"_index":1119,"title":{},"body":{"components/MapComponent.html":{}}}],["blob",{"_index":783,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["bool",{"_index":282,"title":{},"body":{"components/DragDropComponent.html":{}}}],["boolean",{"_index":116,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{}}}],["bootstrap",{"_index":1318,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["box",{"_index":855,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["breadcrumb",{"_index":1,"title":{"interfaces/Breadcrumb.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"coverage.html":{}}}],["breadcrumbs",{"_index":46,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{}}}],["breadcrumbs'},{'name",{"_index":149,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["breadcrumbs.component.html",{"_index":97,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["breadcrumbs.service",{"_index":134,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["breadcrumbs/breadcrumbs.component",{"_index":1331,"title":{},"body":{"modules/WisdomModule.html":{}}}],["breadcrumbscomponent",{"_index":75,"title":{"components/BreadcrumbsComponent.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["breadcrumbsservice",{"_index":50,"title":{"injectables/BreadcrumbsService.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"coverage.html":{}}}],["breadcrumb}s",{"_index":53,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["browse",{"_index":1455,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1452,"title":{},"body":{"modules.html":{}}}],["bulma",{"_index":176,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"miscellaneous/enumerations.html":{}}}],["bulma/bulma",{"_index":1332,"title":{},"body":{"modules/WisdomModule.html":{}}}],["bulmacalendardirective",{"_index":160,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["bulmacalendarmode",{"_index":1391,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bulmaistoggleabledirective",{"_index":162,"title":{"directives/BulmaIsToggleableDirective.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["button",{"_index":1485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["button.style.backgroundimage",{"_index":1486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bytes",{"_index":781,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["cache",{"_index":660,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["cache.ts",{"_index":1363,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cached",{"_index":778,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedkeys",{"_index":1225,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedquery",{"_index":1212,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedquery.box",{"_index":1224,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedquery.shapes",{"_index":1219,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["caching",{"_index":657,"title":{},"body":{"components/IfcComponent.html":{}}}],["calendar",{"_index":1397,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["calendar.directive",{"_index":1339,"title":{},"body":{"modules/WisdomModule.html":{}}}],["calendar.directive.ts",{"_index":1347,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["callback",{"_index":1467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["called",{"_index":565,"title":{},"body":{"components/IfcComponent.html":{}}}],["canactivate",{"_index":1282,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["canactivate(route",{"_index":1287,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["causing",{"_index":1435,"title":{},"body":{"miscellaneous/functions.html":{}}}],["center",{"_index":899,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["centercontent",{"_index":1477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["centralized",{"_index":878,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["certain",{"_index":1272,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["change",{"_index":283,"title":{},"body":{"components/DragDropComponent.html":{}}}],["changes",{"_index":615,"title":{},"body":{"components/IfcComponent.html":{}}}],["check",{"_index":108,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{}}}],["checkallowed",{"_index":209,"title":{},"body":{"components/DragDropComponent.html":{}}}],["checkallowed(filelength",{"_index":246,"title":{},"body":{"components/DragDropComponent.html":{}}}],["checkforduplicates",{"_index":210,"title":{},"body":{"components/DragDropComponent.html":{}}}],["checkforduplicates(files",{"_index":249,"title":{},"body":{"components/DragDropComponent.html":{}}}],["checking",{"_index":285,"title":{},"body":{"components/DragDropComponent.html":{}}}],["checks",{"_index":302,"title":{},"body":{"components/DragDropComponent.html":{}}}],["choose",{"_index":341,"title":{},"body":{"components/DragDropComponent.html":{}}}],["class",{"_index":49,"title":{"classes/ErrorHttpContextToken.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":434,"title":{},"body":{"classes/ErrorHttpContextToken.html":{}}}],["clean",{"_index":735,"title":{},"body":{"components/IfcComponent.html":{}}}],["cleanup",{"_index":211,"title":{},"body":{"components/DragDropComponent.html":{}}}],["clear",{"_index":1090,"title":{},"body":{"components/MapComponent.html":{}}}],["clearer",{"_index":679,"title":{},"body":{"components/IfcComponent.html":{}}}],["clears",{"_index":591,"title":{},"body":{"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{}}}],["click",{"_index":182,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"interfaces/Marker.html":{}}}],["clickable",{"_index":90,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["clicking",{"_index":177,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["client",{"_index":792,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cluster_wisdommodule",{"_index":1321,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["cluster_wisdommodule_declarations",{"_index":1322,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["cluster_wisdommodule_exports",{"_index":1323,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["code",{"_index":678,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{}}}],["collected",{"_index":81,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["collecting",{"_index":45,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["color",{"_index":353,"title":{},"body":{"directives/DragDropDirective.html":{},"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["common",{"_index":419,"title":{},"body":{"injectables/DragDropService.html":{}}}],["common.ifc.fetching",{"_index":811,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["commonmodule",{"_index":1326,"title":{},"body":{"modules/WisdomModule.html":{}}}],["complaining",{"_index":835,"title":{},"body":{"components/IonIconComponent.html":{}}}],["complete",{"_index":587,"title":{},"body":{"components/IfcComponent.html":{}}}],["component",{"_index":74,"title":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["component_template",{"_index":148,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["components",{"_index":76,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"index.html":{}}}],["conditions",{"_index":569,"title":{},"body":{"components/IfcComponent.html":{}}}],["config",{"_index":1026,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["considered",{"_index":86,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["console",{"_index":388,"title":{},"body":{"injectables/DragDropService.html":{}}}],["console.log(\"basehttpcontext",{"_index":426,"title":{},"body":{"injectables/DragDropService.html":{}}}],["console.log(error",{"_index":340,"title":{},"body":{"components/DragDropComponent.html":{}}}],["const",{"_index":329,"title":{},"body":{"components/DragDropComponent.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["constructor",{"_index":103,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{}}}],["constructor(dragdropservice",{"_index":223,"title":{},"body":{"components/DragDropComponent.html":{}}}],["constructor(elementref",{"_index":183,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["constructor(elref",{"_index":826,"title":{},"body":{"components/IonIconComponent.html":{}}}],["constructor(http",{"_index":381,"title":{},"body":{"injectables/DragDropService.html":{},"injectables/IfcService.html":{},"injectables/MapService.html":{}}}],["constructor(private",{"_index":135,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"injectables/DragDropService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{}}}],["constructor(public",{"_index":280,"title":{},"body":{"components/DragDropComponent.html":{}}}],["constructor(router",{"_index":1283,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["constructor(service",{"_index":104,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["contain",{"_index":889,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["contained",{"_index":391,"title":{},"body":{"injectables/DragDropService.html":{}}}],["container",{"_index":461,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["container.addeventlistener(\"click",{"_index":1484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["container.style.height",{"_index":696,"title":{},"body":{"components/IfcComponent.html":{}}}],["container.style.width",{"_index":694,"title":{},"body":{"components/IfcComponent.html":{}}}],["containing",{"_index":619,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/LayerData.html":{},"injectables/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{}}}],["content",{"_index":1235,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":222,"title":{},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["context/send",{"_index":1356,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["context/use",{"_index":406,"title":{},"body":{"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["continued",{"_index":480,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["control",{"_index":989,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["coordinate",{"_index":531,"title":{},"body":{"components/IfcComponent.html":{}}}],["coordinate_to_origin",{"_index":718,"title":{},"body":{"components/IfcComponent.html":{}}}],["coordinates",{"_index":858,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{}}}],["core",{"_index":873,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["corner",{"_index":857,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["correct",{"_index":832,"title":{},"body":{"components/IonIconComponent.html":{}}}],["correctly",{"_index":515,"title":{},"body":{"components/IfcComponent.html":{}}}],["corresponding",{"_index":574,"title":{},"body":{"components/IfcComponent.html":{}}}],["count",{"_index":730,"title":{},"body":{"components/IfcComponent.html":{}}}],["coverage",{"_index":1340,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covering",{"_index":458,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["create",{"_index":286,"title":{},"body":{"components/DragDropComponent.html":{}}}],["creates",{"_index":386,"title":{},"body":{"injectables/DragDropService.html":{}}}],["creating",{"_index":1260,"title":{},"body":{"interfaces/Marker.html":{}}}],["css",{"_index":192,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["ctx",{"_index":424,"title":{},"body":{"injectables/DragDropService.html":{}}}],["current",{"_index":87,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/QueryParameterGuard.html":{}}}],["currently",{"_index":957,"title":{},"body":{"components/MapComponent.html":{},"injectables/QueryParameterGuard.html":{},"miscellaneous/variables.html":{}}}],["curtain",{"_index":455,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":470,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"injectables/LoaderInjector.html":{},"interfaces/Marker.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["d35a0c",{"_index":947,"title":{},"body":{"components/MapComponent.html":{}}}],["data",{"_index":545,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["data.box[0",{"_index":1151,"title":{},"body":{"components/MapComponent.html":{}}}],["data.box[2",{"_index":1152,"title":{},"body":{"components/MapComponent.html":{}}}],["data.shapes",{"_index":1144,"title":{},"body":{"components/MapComponent.html":{}}}],["data.ts",{"_index":851,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{},"coverage.html":{}}}],["db",{"_index":702,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["db.createobjectstore(\"models",{"_index":799,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["db.createobjectstore(\"queries",{"_index":1203,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db.createobjectstore(\"shapes",{"_index":1204,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db.deleteobjectstore(\"models",{"_index":798,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["db.deleteobjectstore(\"queries",{"_index":1201,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db.deleteobjectstore(\"shapes",{"_index":1202,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db_name",{"_index":788,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbblob",{"_index":806,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["dbschema",{"_index":776,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["de",{"_index":1118,"title":{},"body":{"components/MapComponent.html":{}}}],["de/by",{"_index":1122,"title":{},"body":{"components/MapComponent.html":{}}}],["decide",{"_index":1395,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["decides",{"_index":651,"title":{},"body":{"components/IfcComponent.html":{}}}],["declarations",{"_index":1317,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["decorators",{"_index":193,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"directives/DragDropDirective.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["default",{"_index":129,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"injectables/IfcService.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":481,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":475,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":105,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{}}}],["defines",{"_index":266,"title":{},"body":{"components/DragDropComponent.html":{}}}],["del",{"_index":343,"title":{},"body":{"components/DragDropComponent.html":{}}}],["delete",{"_index":320,"title":{},"body":{"components/DragDropComponent.html":{}}}],["deletefile",{"_index":212,"title":{},"body":{"components/DragDropComponent.html":{}}}],["deletefile(index",{"_index":253,"title":{},"body":{"components/DragDropComponent.html":{}}}],["denotes",{"_index":647,"title":{},"body":{"components/IfcComponent.html":{}}}],["deny",{"_index":1502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":1316,"title":{"dependencies.html":{}},"body":{"modules/WisdomModule.html":{},"dependencies.html":{},"index.html":{}}}],["depends",{"_index":553,"title":{},"body":{"components/IfcComponent.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"injectables/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{}}}],["destroy",{"_index":118,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["destroyed",{"_index":594,"title":{},"body":{"components/IfcComponent.html":{}}}],["detecting",{"_index":614,"title":{},"body":{"components/IfcComponent.html":{}}}],["determine",{"_index":471,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["deterministically",{"_index":1422,"title":{},"body":{"miscellaneous/functions.html":{}}}],["digit",{"_index":1412,"title":{},"body":{"miscellaneous/functions.html":{}}}],["direct",{"_index":1276,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["direction",{"_index":1130,"title":{},"body":{"components/MapComponent.html":{}}}],["directive",{"_index":146,"title":{"directives/BulmaIsToggleableDirective.html":{},"directives/DragDropDirective.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"coverage.html":{}}}],["directives",{"_index":159,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"index.html":{}}}],["directly",{"_index":624,"title":{},"body":{"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["disable",{"_index":650,"title":{},"body":{"components/IfcComponent.html":{}}}],["disabled",{"_index":751,"title":{},"body":{"components/IfcComponent.html":{}}}],["disconnects",{"_index":590,"title":{},"body":{"components/IfcComponent.html":{}}}],["display",{"_index":62,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["displayed",{"_index":20,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{}}}],["displaying",{"_index":456,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["displaylayer",{"_index":1093,"title":{},"body":{"components/MapComponent.html":{}}}],["displayname",{"_index":1060,"title":{},"body":{"components/MapComponent.html":{}}}],["displays",{"_index":859,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["displaytext",{"_index":882,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["district",{"_index":1015,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/enumerations.html":{}}}],["div",{"_index":1482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dl",{"_index":1121,"title":{},"body":{"components/MapComponent.html":{}}}],["docs",{"_index":933,"title":{},"body":{"components/MapComponent.html":{}}}],["documentation",{"_index":1341,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":78,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["done",{"_index":692,"title":{},"body":{"components/IfcComponent.html":{}}}],["dot",{"_index":1413,"title":{},"body":{"miscellaneous/functions.html":{}}}],["download",{"_index":803,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["drag",{"_index":151,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{}}}],["dragdropcomponent",{"_index":150,"title":{"components/DragDropComponent.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["dragdropdirective",{"_index":164,"title":{"directives/DragDropDirective.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["dragdropservice",{"_index":206,"title":{"injectables/DragDropService.html":{}},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{},"coverage.html":{}}}],["dragleave",{"_index":347,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["dragleave(event",{"_index":362,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["dragover",{"_index":348,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["dragover(event",{"_index":364,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["drop",{"_index":203,"title":{},"body":{"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{}}}],["drop'},{'name",{"_index":152,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["drop(event",{"_index":366,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["drop.component",{"_index":1334,"title":{},"body":{"modules/WisdomModule.html":{}}}],["drop.component.html",{"_index":204,"title":{},"body":{"components/DragDropComponent.html":{}}}],["drop.component.ts",{"_index":202,"title":{},"body":{"components/DragDropComponent.html":{},"coverage.html":{}}}],["drop.component.ts:109",{"_index":252,"title":{},"body":{"components/DragDropComponent.html":{}}}],["drop.component.ts:115",{"_index":254,"title":{},"body":{"components/DragDropComponent.html":{}}}],["drop.component.ts:124",{"_index":260,"title":{},"body":{"components/DragDropComponent.html":{}}}],["drop.component.ts:13",{"_index":239,"title":{},"body":{"components/DragDropComponent.html":{}}}],["drop.component.ts:17",{"_index":237,"title":{},"body":{"components/DragDropComponent.html":{}}}],["drop.component.ts:25",{"_index":225,"title":{},"body":{"components/DragDropComponent.html":{}}}],["drop.component.ts:29",{"_index":245,"title":{},"body":{"components/DragDropComponent.html":{}}}],["drop.component.ts:36",{"_index":224,"title":{},"body":{"components/DragDropComponent.html":{}}}],["drop.component.ts:39",{"_index":261,"title":{},"body":{"components/DragDropComponent.html":{}}}],["drop.component.ts:42",{"_index":262,"title":{},"body":{"components/DragDropComponent.html":{}}}],["drop.component.ts:45",{"_index":263,"title":{},"body":{"components/DragDropComponent.html":{}}}],["drop.component.ts:48",{"_index":256,"title":{},"body":{"components/DragDropComponent.html":{}}}],["drop.component.ts:58",{"_index":259,"title":{},"body":{"components/DragDropComponent.html":{}}}],["drop.component.ts:73",{"_index":247,"title":{},"body":{"components/DragDropComponent.html":{}}}],["drop.component.ts:88",{"_index":250,"title":{},"body":{"components/DragDropComponent.html":{}}}],["drop.directive",{"_index":1335,"title":{},"body":{"modules/WisdomModule.html":{}}}],["drop.directive.ts",{"_index":345,"title":{},"body":{"directives/DragDropDirective.html":{},"coverage.html":{}}}],["drop.directive.ts:16",{"_index":355,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["drop.directive.ts:18",{"_index":357,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["drop.directive.ts:21",{"_index":360,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["drop.directive.ts:28",{"_index":359,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["drop.directive.ts:35",{"_index":361,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["drop.service",{"_index":265,"title":{},"body":{"components/DragDropComponent.html":{}}}],["drop.service.ts",{"_index":377,"title":{},"body":{"injectables/DragDropService.html":{},"coverage.html":{}}}],["drop.service.ts:13",{"_index":383,"title":{},"body":{"injectables/DragDropService.html":{}}}],["drop.service.ts:19",{"_index":399,"title":{},"body":{"injectables/DragDropService.html":{}}}],["drop.service.ts:32",{"_index":394,"title":{},"body":{"injectables/DragDropService.html":{}}}],["drop.service.ts:72",{"_index":385,"title":{},"body":{"injectables/DragDropService.html":{}}}],["drop/drag",{"_index":201,"title":{},"body":{"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"modules/WisdomModule.html":{},"coverage.html":{}}}],["duplicates",{"_index":303,"title":{},"body":{"components/DragDropComponent.html":{}}}],["dynamically",{"_index":517,"title":{},"body":{"components/IfcComponent.html":{}}}],["e.g",{"_index":1443,"title":{},"body":{"miscellaneous/functions.html":{}}}],["e2eefd",{"_index":375,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["early",{"_index":566,"title":{},"body":{"components/IfcComponent.html":{}}}],["easy",{"_index":625,"title":{},"body":{"components/IfcComponent.html":{}}}],["element",{"_index":30,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["elementref",{"_index":184,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["elements",{"_index":992,"title":{},"body":{"components/MapComponent.html":{}}}],["elref",{"_index":828,"title":{},"body":{"components/IonIconComponent.html":{}}}],["emit",{"_index":963,"title":{},"body":{"components/MapComponent.html":{}}}],["emitselection",{"_index":909,"title":{},"body":{"components/MapComponent.html":{}}}],["emitted",{"_index":548,"title":{},"body":{"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{}}}],["emitter",{"_index":891,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["empty",{"_index":930,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["enabled",{"_index":541,"title":{},"body":{"components/IfcComponent.html":{}}}],["end",{"_index":226,"title":{},"body":{"components/DragDropComponent.html":{},"miscellaneous/functions.html":{}}}],["enforce",{"_index":1024,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["ensures",{"_index":560,"title":{},"body":{"components/IfcComponent.html":{}}}],["ensuring",{"_index":113,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["entire",{"_index":478,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["entries",{"_index":1286,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["entries[0].contentrect.height",{"_index":745,"title":{},"body":{"components/IfcComponent.html":{}}}],["entries[0].contentrect.width",{"_index":743,"title":{},"body":{"components/IfcComponent.html":{}}}],["entry",{"_index":575,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/typealiases.html":{}}}],["entry.shapes",{"_index":1073,"title":{},"body":{"components/MapComponent.html":{}}}],["enum",{"_index":441,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["enumerations",{"_index":1390,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":235,"title":{},"body":{"components/DragDropComponent.html":{}}}],["error",{"_index":339,"title":{},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["error(msg",{"_index":432,"title":{},"body":{"injectables/DragDropService.html":{}}}],["errorhandler",{"_index":440,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/enumerations.html":{}}}],["errorhandler#curtain",{"_index":482,"title":{},"body":{"classes/ErrorHttpContextToken.html":{}}}],["errorhandler.curtain",{"_index":483,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["errorhttpcontexttoken",{"_index":433,"title":{"classes/ErrorHttpContextToken.html":{}},"body":{"classes/ErrorHttpContextToken.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":472,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["event",{"_index":257,"title":{},"body":{"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{},"interfaces/Marker.html":{}}}],["event.datatransfer.files",{"_index":295,"title":{},"body":{"components/DragDropComponent.html":{}}}],["event.preventdefault",{"_index":372,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["event.stoppropagation",{"_index":373,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["event.target.files",{"_index":293,"title":{},"body":{"components/DragDropComponent.html":{}}}],["eventemitter",{"_index":354,"title":{},"body":{"directives/DragDropDirective.html":{},"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{}}}],["events",{"_index":753,"title":{},"body":{"components/IfcComponent.html":{}}}],["everything",{"_index":748,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["evt",{"_index":1267,"title":{},"body":{"interfaces/Marker.html":{}}}],["exactly",{"_index":1009,"title":{},"body":{"components/MapComponent.html":{}}}],["example",{"_index":536,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["expects",{"_index":1274,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["export",{"_index":43,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"injectables/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["exported",{"_index":1306,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["exports",{"_index":1320,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["expose",{"_index":439,"title":{},"body":{"classes/ErrorHttpContextToken.html":{}}}],["exposed",{"_index":451,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/enumerations.html":{}}}],["extends",{"_index":445,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["extension",{"_index":437,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["extra",{"_index":241,"title":{},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{}}}],["fails",{"_index":1280,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["false",{"_index":111,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{},"miscellaneous/variables.html":{}}}],["feature",{"_index":1127,"title":{},"body":{"components/MapComponent.html":{}}}],["feature.properties.key",{"_index":1133,"title":{},"body":{"components/MapComponent.html":{}}}],["fetch",{"_index":506,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetched",{"_index":1068,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetched[layerkey",{"_index":1070,"title":{},"body":{"components/MapComponent.html":{}}}],["fetchedinput",{"_index":710,"title":{},"body":{"components/IfcComponent.html":{}}}],["fetchlayerdata",{"_index":1206,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetchlayerdata(resolution",{"_index":1257,"title":{},"body":{"injectables/MapService.html":{}}}],["fetchmodel",{"_index":814,"title":{},"body":{"injectables/IfcService.html":{}}}],["fetchmodel(path",{"_index":805,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["fetchmodels",{"_index":703,"title":{},"body":{"components/IfcComponent.html":{}}}],["fetchmodels.push",{"_index":706,"title":{},"body":{"components/IfcComponent.html":{}}}],["ffffff",{"_index":356,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"injectables/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{}}}],["file([dbblob",{"_index":808,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["file([res",{"_index":813,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["file.name",{"_index":313,"title":{},"body":{"components/DragDropComponent.html":{}}}],["file.size",{"_index":315,"title":{},"body":{"components/DragDropComponent.html":{}}}],["filearr",{"_index":207,"title":{},"body":{"components/DragDropComponent.html":{}}}],["filedropped",{"_index":350,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["filelength",{"_index":248,"title":{},"body":{"components/DragDropComponent.html":{}}}],["filelimit",{"_index":272,"title":{},"body":{"components/DragDropComponent.html":{}}}],["filelist",{"_index":416,"title":{},"body":{"injectables/DragDropService.html":{}}}],["files",{"_index":251,"title":{},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{}}}],["files.foreach((file",{"_index":309,"title":{},"body":{"components/DragDropComponent.html":{}}}],["filesselected",{"_index":208,"title":{},"body":{"components/DragDropComponent.html":{}}}],["filling",{"_index":1503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finally",{"_index":533,"title":{},"body":{"components/IfcComponent.html":{}}}],["find",{"_index":841,"title":{},"body":{"components/IonIconComponent.html":{},"miscellaneous/functions.html":{}}}],["fine",{"_index":685,"title":{},"body":{"components/IfcComponent.html":{}}}],["finish",{"_index":335,"title":{},"body":{"components/DragDropComponent.html":{}}}],["first",{"_index":529,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["firstvaluefrom",{"_index":786,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["firstvaluefrom(this.http.get(`${api_url",{"_index":1233,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["firstvaluefrom(this.http.get(path",{"_index":809,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["fit",{"_index":652,"title":{},"body":{"components/IfcComponent.html":{}}}],["fitting",{"_index":655,"title":{},"body":{"components/IfcComponent.html":{}}}],["fittoframe",{"_index":656,"title":{},"body":{"components/IfcComponent.html":{}}}],["fix",{"_index":693,"title":{},"body":{"components/IfcComponent.html":{}}}],["fixed",{"_index":576,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["flag",{"_index":600,"title":{},"body":{"components/IfcComponent.html":{}}}],["flags",{"_index":278,"title":{},"body":{"components/DragDropComponent.html":{}}}],["flat",{"_index":1297,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["flex",{"_index":1478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["following",{"_index":925,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["force",{"_index":804,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["formdata",{"_index":412,"title":{},"body":{"injectables/DragDropService.html":{}}}],["formdata.append(listname",{"_index":423,"title":{},"body":{"injectables/DragDropService.html":{}}}],["found",{"_index":317,"title":{},"body":{"components/DragDropComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"miscellaneous/functions.html":{}}}],["fragment",{"_index":8,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["fragments",{"_index":52,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{}}}],["frame",{"_index":654,"title":{},"body":{"components/IfcComponent.html":{}}}],["frame's",{"_index":886,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["full_res",{"_index":1002,"title":{},"body":{"components/MapComponent.html":{}}}],["fully",{"_index":114,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"miscellaneous/functions.html":{}}}],["function",{"_index":559,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["functionality",{"_index":371,"title":{},"body":{"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{}}}],["functions",{"_index":526,"title":{"miscellaneous/functions.html":{}},"body":{"components/IfcComponent.html":{},"miscellaneous/functions.html":{}}}],["further",{"_index":467,"title":{},"body":{"classes/ErrorHttpContextToken.html":{}}}],["generate",{"_index":1426,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generates",{"_index":1421,"title":{},"body":{"miscellaneous/functions.html":{}}}],["geo",{"_index":793,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["geobasis",{"_index":1117,"title":{},"body":{"components/MapComponent.html":{}}}],["geodata",{"_index":1198,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["geojson",{"_index":862,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{}}}],["geojsonlayer",{"_index":1114,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonlayer.adddata(object.assign(shape.geojson",{"_index":1145,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonlayer.addto(map",{"_index":1148,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonobject",{"_index":861,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["getbulmaprimarycolors",{"_index":1375,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getresolvedurl",{"_index":1377,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getresolvedurl(route",{"_index":1405,"title":{},"body":{"miscellaneous/functions.html":{}}}],["give",{"_index":931,"title":{},"body":{"components/MapComponent.html":{}}}],["given",{"_index":522,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["gt",{"_index":1418,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gt;&lt;/map&gt",{"_index":1018,"title":{},"body":{"components/MapComponent.html":{}}}],["guard",{"_index":1271,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["guards",{"_index":1311,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["handled",{"_index":468,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["handleerror",{"_index":379,"title":{},"body":{"injectables/DragDropService.html":{}}}],["handleerror(msg",{"_index":384,"title":{},"body":{"injectables/DragDropService.html":{}}}],["handler",{"_index":410,"title":{},"body":{"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"interfaces/Marker.html":{},"miscellaneous/enumerations.html":{}}}],["handler.ts",{"_index":436,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["handler.ts:40",{"_index":447,"title":{},"body":{"classes/ErrorHttpContextToken.html":{}}}],["having",{"_index":404,"title":{},"body":{"injectables/DragDropService.html":{},"components/MapComponent.html":{}}}],["header",{"_index":1497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":1234,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["height",{"_index":220,"title":{},"body":{"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["height=&quot;70vh&quot",{"_index":1000,"title":{},"body":{"components/MapComponent.html":{}}}],["here",{"_index":342,"title":{},"body":{"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["hex",{"_index":949,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["hidden",{"_index":564,"title":{},"body":{"components/IfcComponent.html":{}}}],["hide",{"_index":525,"title":{},"body":{"components/IfcComponent.html":{}}}],["hidemodel",{"_index":496,"title":{},"body":{"components/IfcComponent.html":{}}}],["hidemodel(model",{"_index":556,"title":{},"body":{"components/IfcComponent.html":{}}}],["hides",{"_index":558,"title":{},"body":{"components/IfcComponent.html":{}}}],["hiding",{"_index":580,"title":{},"body":{"components/IfcComponent.html":{}}}],["higher",{"_index":58,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["holding",{"_index":326,"title":{},"body":{"components/DragDropComponent.html":{}}}],["holds",{"_index":991,"title":{},"body":{"components/MapComponent.html":{}}}],["hostbinding",{"_index":195,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"directives/DragDropDirective.html":{}}}],["hostbinding('style.background",{"_index":368,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["hostbindings",{"_index":351,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["hostlistener",{"_index":197,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"directives/DragDropDirective.html":{}}}],["hostlistener(\"click",{"_index":198,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener('click",{"_index":194,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener('dragleave",{"_index":363,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["hostlistener('dragover",{"_index":365,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["hostlistener('drop",{"_index":367,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["hostlisteners",{"_index":181,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"directives/DragDropDirective.html":{}}}],["hovering",{"_index":1265,"title":{},"body":{"interfaces/Marker.html":{}}}],["html",{"_index":145,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["http",{"_index":221,"title":{},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["httpbasecontext",{"_index":378,"title":{},"body":{"injectables/DragDropService.html":{}}}],["httpclient",{"_index":382,"title":{},"body":{"injectables/DragDropService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpcontext",{"_index":228,"title":{},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpcontext().set(use_loader",{"_index":810,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["httpcontexttoken",{"_index":438,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["httpheaders",{"_index":1195,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpparams",{"_index":1196,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["https://ifcjs.github.io/info/docs/guide/web",{"_index":629,"title":{},"body":{"components/IfcComponent.html":{}}}],["https://ionic.io/ionicons",{"_index":845,"title":{},"body":{"components/IonIconComponent.html":{}}}],["https://tile.openstreetmap.org/{z}/{x}/{y}.png",{"_index":993,"title":{},"body":{"components/MapComponent.html":{}}}],["https://wisdom04.vlba.uni",{"_index":934,"title":{},"body":{"components/MapComponent.html":{}}}],["hypothetical_files",{"_index":298,"title":{},"body":{"components/DragDropComponent.html":{}}}],["icon",{"_index":12,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"interfaces/Marker.html":{},"miscellaneous/variables.html":{}}}],["icon'},{'name",{"_index":156,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["icon.component",{"_index":1337,"title":{},"body":{"modules/WisdomModule.html":{}}}],["icon.component.ts",{"_index":819,"title":{},"body":{"components/IonIconComponent.html":{},"coverage.html":{}}}],["icon.component.ts:12",{"_index":827,"title":{},"body":{"components/IonIconComponent.html":{}}}],["icon.component.ts:31",{"_index":830,"title":{},"body":{"components/IonIconComponent.html":{}}}],["icon.setattribute(\"name",{"_index":1489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon.setattribute(\"size",{"_index":1491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon.style.color",{"_index":1493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon.style.pointerevents",{"_index":1488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon/ion",{"_index":818,"title":{},"body":{"components/IonIconComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{}}}],["icons",{"_index":821,"title":{},"body":{"components/IonIconComponent.html":{}}}],["id",{"_index":761,"title":{},"body":{"components/IfcComponent.html":{}}}],["idb",{"_index":785,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["idb.get(\"models",{"_index":807,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["idb.get(\"queries",{"_index":1213,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["idb.put(\"models",{"_index":812,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["idb.transaction(\"shapes",{"_index":1215,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["idb.transaction([\"queries",{"_index":1245,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["identifier",{"_index":1342,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":417,"title":{},"body":{"injectables/DragDropService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["ifc",{"_index":485,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"miscellaneous/variables.html":{}}}],["ifc'},{'name",{"_index":154,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["ifc.service",{"_index":641,"title":{},"body":{"components/IfcComponent.html":{}}}],["ifc/ifc.component",{"_index":1336,"title":{},"body":{"modules/WisdomModule.html":{}}}],["ifccomponent",{"_index":153,"title":{"components/IfcComponent.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["ifccomponent.modelentry",{"_index":661,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/typealiases.html":{}}}],["ifcdb",{"_index":772,"title":{"interfaces/IfcDB.html":{}},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"coverage.html":{}}}],["ifcmodel",{"_index":639,"title":{},"body":{"components/IfcComponent.html":{}}}],["ifcservice",{"_index":502,"title":{"injectables/IfcService.html":{}},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"coverage.html":{}}}],["ifcviewerapi",{"_index":617,"title":{},"body":{"components/IfcComponent.html":{}}}],["ifcviewerapi({container",{"_index":699,"title":{},"body":{"components/IfcComponent.html":{}}}],["ifcworker.js",{"_index":701,"title":{},"body":{"components/IfcComponent.html":{}}}],["ignore",{"_index":683,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["implementing",{"_index":1305,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["implementor",{"_index":469,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":91,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["implied",{"_index":1499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implies",{"_index":1500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import",{"_index":33,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"injectables/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["important",{"_index":626,"title":{},"body":{"components/IfcComponent.html":{}}}],["imports",{"_index":370,"title":{},"body":{"directives/DragDropDirective.html":{},"modules/WisdomModule.html":{}}}],["include",{"_index":1310,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"injectables/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexed",{"_index":787,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["indexeddb",{"_index":802,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["indicates",{"_index":646,"title":{},"body":{"components/IfcComponent.html":{}}}],["indicating",{"_index":540,"title":{},"body":{"components/IfcComponent.html":{}}}],["inferred",{"_index":518,"title":{},"body":{"components/IfcComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"injectables/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["information",{"_index":242,"title":{},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{}}}],["init",{"_index":126,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{}}}],["initial",{"_index":689,"title":{},"body":{"components/IfcComponent.html":{}}}],["initialize",{"_index":697,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["initialized",{"_index":583,"title":{},"body":{"components/IfcComponent.html":{}}}],["inject",{"_index":820,"title":{},"body":{"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{}}}],["injectable",{"_index":34,"title":{"injectables/BreadcrumbsService.html":{},"injectables/DragDropService.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{}},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"injectables/DragDropService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":166,"title":{},"body":{"injectables/BreadcrumbsService.html":{},"injectables/DragDropService.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{},"index.html":{}}}],["injected",{"_index":1107,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["injector",{"_index":507,"title":{},"body":{"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{}}}],["injects",{"_index":875,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["inner",{"_index":967,"title":{},"body":{"components/MapComponent.html":{}}}],["input",{"_index":196,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["input(\"api",{"_index":273,"title":{},"body":{"components/DragDropComponent.html":{}}}],["input(\"center",{"_index":1032,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"file",{"_index":271,"title":{},"body":{"components/DragDropComponent.html":{}}}],["input(\"height",{"_index":268,"title":{},"body":{"components/DragDropComponent.html":{},"components/MapComponent.html":{}}}],["input(\"http",{"_index":279,"title":{},"body":{"components/DragDropComponent.html":{}}}],["input(\"layers",{"_index":1040,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"layerselectable",{"_index":1043,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"markers",{"_index":1045,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"models",{"_index":662,"title":{},"body":{"components/IfcComponent.html":{}}}],["input(\"picking",{"_index":663,"title":{},"body":{"components/IfcComponent.html":{}}}],["input(\"recursive",{"_index":665,"title":{},"body":{"components/IfcComponent.html":{}}}],["input(\"scrollwheelzoom",{"_index":1036,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"selectedcolor",{"_index":1039,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"tileurl",{"_index":1030,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"unselectedcolor",{"_index":1038,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"value",{"_index":276,"title":{},"body":{"components/DragDropComponent.html":{}}}],["input(\"zoom",{"_index":1034,"title":{},"body":{"components/MapComponent.html":{}}}],["inputcenter",{"_index":1033,"title":{},"body":{"components/MapComponent.html":{}}}],["inputheight",{"_index":1029,"title":{},"body":{"components/MapComponent.html":{}}}],["inputlayers",{"_index":916,"title":{},"body":{"components/MapComponent.html":{}}}],["inputlayers(layerconfig",{"_index":1041,"title":{},"body":{"components/MapComponent.html":{}}}],["inputlayerselectable",{"_index":1044,"title":{},"body":{"components/MapComponent.html":{}}}],["inputmarkers",{"_index":917,"title":{},"body":{"components/MapComponent.html":{}}}],["inputmarkers(markers",{"_index":1046,"title":{},"body":{"components/MapComponent.html":{}}}],["inputmodels",{"_index":519,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/typealiases.html":{}}}],["inputs",{"_index":216,"title":{},"body":{"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["inputscrollwheelzoom",{"_index":1037,"title":{},"body":{"components/MapComponent.html":{}}}],["inputtileurl",{"_index":1031,"title":{},"body":{"components/MapComponent.html":{}}}],["inputzoom",{"_index":1035,"title":{},"body":{"components/MapComponent.html":{}}}],["insert",{"_index":884,"title":{},"body":{"injectables/LoaderInjector.html":{},"components/MapComponent.html":{}}}],["instant",{"_index":1433,"title":{},"body":{"miscellaneous/functions.html":{}}}],["instead",{"_index":579,"title":{},"body":{"components/IfcComponent.html":{}}}],["interact",{"_index":920,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["interaction",{"_index":620,"title":{},"body":{"components/IfcComponent.html":{}}}],["interactions",{"_index":627,"title":{},"body":{"components/IfcComponent.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Breadcrumb.html":{},"interfaces/IfcDB.html":{},"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{}},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Breadcrumb.html":{},"interfaces/IfcDB.html":{},"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"index.html":{}}}],["internally",{"_index":962,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["intersection",{"_index":928,"title":{},"body":{"components/MapComponent.html":{}}}],["invert",{"_index":1022,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["invertselection",{"_index":1466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invertselection(options",{"_index":1495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invertselectioncontrol",{"_index":1091,"title":{},"body":{"components/MapComponent.html":{}}}],["invertselectioncontrol.addto(map",{"_index":1167,"title":{},"body":{"components/MapComponent.html":{}}}],["ion",{"_index":155,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"miscellaneous/variables.html":{}}}],["ioniconcomponent",{"_index":23,"title":{"components/IonIconComponent.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["ionicons",{"_index":822,"title":{},"body":{"components/IonIconComponent.html":{}}}],["isallset",{"_index":100,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["isdestroyed",{"_index":488,"title":{},"body":{"components/IfcComponent.html":{}}}],["items",{"_index":1479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iterate",{"_index":1437,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iterated",{"_index":1281,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["itself",{"_index":829,"title":{},"body":{"components/IonIconComponent.html":{}}}],["join",{"_index":1067,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["js",{"_index":824,"title":{},"body":{"components/IonIconComponent.html":{}}}],["json",{"_index":549,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["jsonobject",{"_index":636,"title":{},"body":{"components/IfcComponent.html":{}}}],["justify",{"_index":1480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["k",{"_index":1231,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["k.split",{"_index":1066,"title":{},"body":{"components/MapComponent.html":{}}}],["k.substring(0",{"_index":1230,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keep",{"_index":562,"title":{},"body":{"components/IfcComponent.html":{}}}],["key",{"_index":779,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{}}}],["key[0",{"_index":1189,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keynames",{"_index":915,"title":{},"body":{"components/MapComponent.html":{}}}],["keynames.set(key",{"_index":1074,"title":{},"body":{"components/MapComponent.html":{}}}],["keys",{"_index":521,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/typealiases.html":{}}}],["keys.length",{"_index":1227,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keys.map(k",{"_index":1229,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keys].flat().map(k",{"_index":1065,"title":{},"body":{"components/MapComponent.html":{}}}],["l",{"_index":863,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{}}}],["l.control.extend",{"_index":1472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.control.layers",{"_index":1089,"title":{},"body":{"components/MapComponent.html":{}}}],["l.controloptions",{"_index":1471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.divicon",{"_index":1264,"title":{},"body":{"interfaces/Marker.html":{}}}],["l.domutil.create",{"_index":1481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.geojson(undefined",{"_index":1115,"title":{},"body":{"components/MapComponent.html":{}}}],["l.icon",{"_index":1263,"title":{},"body":{"interfaces/Marker.html":{}}}],["l.layer",{"_index":986,"title":{},"body":{"components/MapComponent.html":{}}}],["l.map",{"_index":980,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["l.map(nativemapelement",{"_index":1078,"title":{},"body":{"components/MapComponent.html":{}}}],["l.marker(marker.coordinates",{"_index":1173,"title":{},"body":{"components/MapComponent.html":{}}}],["l.markerclustergroup",{"_index":1169,"title":{},"body":{"components/MapComponent.html":{}}}],["l.path",{"_index":1134,"title":{},"body":{"components/MapComponent.html":{}}}],["l.tilelayer(this.tileurl).addto(map",{"_index":1086,"title":{},"body":{"components/MapComponent.html":{}}}],["l.util.setoptions(this",{"_index":1475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["large",{"_index":1492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["later",{"_index":1128,"title":{},"body":{"components/MapComponent.html":{}}}],["latitude",{"_index":972,"title":{},"body":{"components/MapComponent.html":{}}}],["layer",{"_index":853,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/typealiases.html":{}}}],["layer.bindtooltip(feature.properties.name",{"_index":1129,"title":{},"body":{"components/MapComponent.html":{}}}],["layer.fire(\"click",{"_index":1166,"title":{},"body":{"components/MapComponent.html":{}}}],["layer.on(\"click",{"_index":1132,"title":{},"body":{"components/MapComponent.html":{}}}],["layera",{"_index":1104,"title":{},"body":{"components/MapComponent.html":{}}}],["layera.options.order",{"_index":1108,"title":{},"body":{"components/MapComponent.html":{}}}],["layerb",{"_index":1105,"title":{},"body":{"components/MapComponent.html":{}}}],["layerb.options.order",{"_index":1109,"title":{},"body":{"components/MapComponent.html":{}}}],["layerconfig",{"_index":900,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["layerdata",{"_index":849,"title":{"interfaces/LayerData.html":{}},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"coverage.html":{}}}],["layerdata.box",{"_index":1255,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["layerdata.shapes",{"_index":1249,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["layerdata[\"box",{"_index":1199,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["layerindex",{"_index":1101,"title":{},"body":{"components/MapComponent.html":{}}}],["layerkey",{"_index":978,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["layername",{"_index":1157,"title":{},"body":{"components/MapComponent.html":{}}}],["layernames",{"_index":901,"title":{},"body":{"components/MapComponent.html":{}}}],["layers",{"_index":910,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["layers.push(layer",{"_index":1143,"title":{},"body":{"components/MapComponent.html":{}}}],["layers]=&quot",{"_index":1001,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol",{"_index":1088,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.addbaselayer",{"_index":1155,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.addbaselayer(geojsonlayer",{"_index":1160,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.addto(map",{"_index":1163,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.options.sortfunction",{"_index":1103,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.options.sortlayers",{"_index":1102,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.removelayer(geojsonlayer",{"_index":1154,"title":{},"body":{"components/MapComponent.html":{}}}],["layerselectable",{"_index":911,"title":{},"body":{"components/MapComponent.html":{}}}],["lazily",{"_index":505,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["leads",{"_index":1309,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["leaflet",{"_index":864,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["leaflet.markercluster",{"_index":1023,"title":{},"body":{"components/MapComponent.html":{}}}],["leafletmouseevent",{"_index":1266,"title":{},"body":{"interfaces/Marker.html":{}}}],["left",{"_index":21,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["legend",{"_index":144,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"index.html":{}}}],["length",{"_index":1446,"title":{},"body":{"miscellaneous/functions.html":{}}}],["level",{"_index":956,"title":{},"body":{"components/MapComponent.html":{}}}],["limit",{"_index":219,"title":{},"body":{"components/DragDropComponent.html":{}}}],["link",{"_index":13,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"injectables/QueryParameterGuard.html":{}}}],["list",{"_index":51,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/DragDropComponent.html":{},"injectables/DragDropService.html":{},"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["listens",{"_index":876,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["listname",{"_index":393,"title":{},"body":{"injectables/DragDropService.html":{}}}],["literal",{"_index":777,"title":{},"body":{"interfaces/IfcDB.html":{},"interfaces/MapDB.html":{},"miscellaneous/typealiases.html":{}}}],["live",{"_index":121,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["lmarker",{"_index":1172,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.addto(markerlayer",{"_index":1180,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.bindtooltip(marker.tooltip",{"_index":1177,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.on(\"click",{"_index":1179,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.seticon(marker.icon",{"_index":1175,"title":{},"body":{"components/MapComponent.html":{}}}],["load",{"_index":544,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["loadall",{"_index":674,"title":{},"body":{"components/IfcComponent.html":{}}}],["loaded",{"_index":534,"title":{},"body":{"components/IfcComponent.html":{}}}],["loadedmodels",{"_index":489,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/typealiases.html":{}}}],["loader",{"_index":408,"title":{},"body":{"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["loader.ts",{"_index":1366,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["loader/loader.injector",{"_index":642,"title":{},"body":{"components/IfcComponent.html":{}}}],["loaderinjector",{"_index":503,"title":{"injectables/LoaderInjector.html":{}},"body":{"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{},"coverage.html":{}}}],["loaders",{"_index":877,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["loaderservice",{"_index":872,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["loading",{"_index":509,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["loadmodel",{"_index":715,"title":{},"body":{"components/IfcComponent.html":{}}}],["loadmodel(modeliter[i",{"_index":733,"title":{},"body":{"components/IfcComponent.html":{}}}],["loads",{"_index":585,"title":{},"body":{"components/IfcComponent.html":{}}}],["local",{"_index":234,"title":{},"body":{"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["logic",{"_index":879,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["logs",{"_index":387,"title":{},"body":{"injectables/DragDropService.html":{}}}],["long",{"_index":122,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"miscellaneous/variables.html":{}}}],["longer",{"_index":593,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["longitude",{"_index":971,"title":{},"body":{"components/MapComponent.html":{}}}],["look",{"_index":1205,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["lower",{"_index":508,"title":{},"body":{"components/IfcComponent.html":{}}}],["lowered",{"_index":586,"title":{},"body":{"components/IfcComponent.html":{}}}],["lt;map",{"_index":999,"title":{},"body":{"components/MapComponent.html":{}}}],["lx",{"_index":1021,"title":{},"body":{"components/MapComponent.html":{}}}],["lx.control.invertselection",{"_index":1165,"title":{},"body":{"components/MapComponent.html":{}}}],["main",{"_index":460,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["make",{"_index":677,"title":{},"body":{"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["makes",{"_index":119,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["making",{"_index":173,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["manually",{"_index":581,"title":{},"body":{"components/IfcComponent.html":{}}}],["map",{"_index":158,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["map(str",{"_index":1081,"title":{},"body":{"components/MapComponent.html":{}}}],["map.component.css",{"_index":898,"title":{},"body":{"components/MapComponent.html":{}}}],["map.fitbounds",{"_index":1150,"title":{},"body":{"components/MapComponent.html":{}}}],["map.getrenderer(map",{"_index":1083,"title":{},"body":{"components/MapComponent.html":{}}}],["map.on(\"baselayerchange",{"_index":1161,"title":{},"body":{"components/MapComponent.html":{}}}],["map.removecontrol(invertselectioncontrol",{"_index":1164,"title":{},"body":{"components/MapComponent.html":{}}}],["map.removecontrol(layerscontrol",{"_index":1096,"title":{},"body":{"components/MapComponent.html":{}}}],["map.removelayer(this.selectedgeojsonlayer",{"_index":1111,"title":{},"body":{"components/MapComponent.html":{}}}],["map.service",{"_index":1020,"title":{},"body":{"components/MapComponent.html":{}}}],["map/map.component",{"_index":1338,"title":{},"body":{"modules/WisdomModule.html":{}}}],["mapcomponent",{"_index":157,"title":{"components/MapComponent.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mapcomponent.inputlayers",{"_index":1027,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["mapdb",{"_index":1186,"title":{"interfaces/MapDB.html":{}},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{}}}],["mapelement",{"_index":902,"title":{},"body":{"components/MapComponent.html":{}}}],["mapped",{"_index":959,"title":{},"body":{"components/MapComponent.html":{}}}],["maps",{"_index":896,"title":{},"body":{"components/MapComponent.html":{}}}],["mapservice",{"_index":918,"title":{"injectables/MapService.html":{}},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{}}}],["marker",{"_index":939,"title":{"interfaces/Marker.html":{}},"body":{"components/MapComponent.html":{},"interfaces/Marker.html":{},"coverage.html":{}}}],["marker.icon",{"_index":1174,"title":{},"body":{"components/MapComponent.html":{}}}],["marker.onclick",{"_index":1178,"title":{},"body":{"components/MapComponent.html":{}}}],["marker.tooltip",{"_index":1176,"title":{},"body":{"components/MapComponent.html":{}}}],["markerlayer",{"_index":1168,"title":{},"body":{"components/MapComponent.html":{}}}],["markerlayer.addto(map",{"_index":1181,"title":{},"body":{"components/MapComponent.html":{}}}],["markerlayer.removefrom(map",{"_index":1171,"title":{},"body":{"components/MapComponent.html":{}}}],["markers",{"_index":903,"title":{},"body":{"components/MapComponent.html":{},"interfaces/Marker.html":{}}}],["marker}s",{"_index":1048,"title":{},"body":{"components/MapComponent.html":{}}}],["matching",{"_index":73,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"injectables/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["meaning",{"_index":1025,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["means",{"_index":555,"title":{},"body":{"components/IfcComponent.html":{}}}],["meesage",{"_index":390,"title":{},"body":{"injectables/DragDropService.html":{}}}],["memory",{"_index":592,"title":{},"body":{"components/IfcComponent.html":{}}}],["message",{"_index":457,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":94,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/ShapeData.html":{}}}],["method",{"_index":1434,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methods",{"_index":99,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{}}}],["miscellaneous",{"_index":1389,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mixed",{"_index":1013,"title":{},"body":{"components/MapComponent.html":{}}}],["mode",{"_index":1396,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["model",{"_index":530,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"miscellaneous/typealiases.html":{}}}],["model's",{"_index":648,"title":{},"body":{"components/IfcComponent.html":{}}}],["modelentry",{"_index":538,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/typealiases.html":{}}}],["modelid",{"_index":760,"title":{},"body":{"components/IfcComponent.html":{}}}],["modeliter",{"_index":713,"title":{},"body":{"components/IfcComponent.html":{}}}],["modeliter.length",{"_index":731,"title":{},"body":{"components/IfcComponent.html":{}}}],["modeliter[0",{"_index":717,"title":{},"body":{"components/IfcComponent.html":{}}}],["modelloadabort",{"_index":490,"title":{},"body":{"components/IfcComponent.html":{}}}],["modelloaddone",{"_index":491,"title":{},"body":{"components/IfcComponent.html":{}}}],["models",{"_index":486,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["modernized",{"_index":1423,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modifies",{"_index":837,"title":{},"body":{"components/IonIconComponent.html":{}}}],["module",{"_index":874,"title":{"modules/WisdomModule.html":{}},"body":{"injectables/LoaderInjector.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"index.html":{}}}],["modules",{"_index":1302,"title":{"modules.html":{}},"body":{"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"modules.html":{}}}],["month",{"_index":1399,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["more",{"_index":1292,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["mouse",{"_index":944,"title":{},"body":{"components/MapComponent.html":{}}}],["mouseevent",{"_index":1469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["msg",{"_index":389,"title":{},"body":{"injectables/DragDropService.html":{}}}],["municipal",{"_index":1004,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/enumerations.html":{}}}],["name",{"_index":19,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name(name",{"_index":847,"title":{},"body":{"components/IonIconComponent.html":{}}}],["names",{"_index":842,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["namespace",{"_index":643,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["native",{"_index":838,"title":{},"body":{"components/IonIconComponent.html":{}}}],["nativemapelement",{"_index":1076,"title":{},"body":{"components/MapComponent.html":{}}}],["necessary",{"_index":833,"title":{},"body":{"components/IonIconComponent.html":{}}}],["needed",{"_index":128,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{}}}],["needs",{"_index":554,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["new",{"_index":56,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":141,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{}}}],["ngafterviewinit",{"_index":497,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["ngmodule",{"_index":1328,"title":{},"body":{"modules/WisdomModule.html":{}}}],["ngondestroy",{"_index":101,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{}}}],["ngoninit",{"_index":102,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["ngx",{"_index":634,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{}}}],["node",{"_index":178,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["nomenclature",{"_index":867,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["none",{"_index":1487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notification",{"_index":465,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["null",{"_index":926,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["num",{"_index":1414,"title":{},"body":{"miscellaneous/functions.html":{}}}],["number",{"_index":64,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/DragDropComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nutskey",{"_index":870,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["obj",{"_index":1430,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":413,"title":{},"body":{"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":709,"title":{},"body":{"components/IfcComponent.html":{}}}],["object.entries(config",{"_index":1061,"title":{},"body":{"components/MapComponent.html":{}}}],["object.entries(fetchedinput",{"_index":714,"title":{},"body":{"components/IfcComponent.html":{}}}],["object.entries(layerdata",{"_index":1112,"title":{},"body":{"components/MapComponent.html":{}}}],["object.entries(requests",{"_index":1069,"title":{},"body":{"components/MapComponent.html":{}}}],["object.entries(this.inputmodels",{"_index":705,"title":{},"body":{"components/IfcComponent.html":{}}}],["object.fromentries(await",{"_index":711,"title":{},"body":{"components/IfcComponent.html":{}}}],["object.keys(layerdata).length",{"_index":1162,"title":{},"body":{"components/MapComponent.html":{}}}],["object.values(fetched",{"_index":1072,"title":{},"body":{"components/MapComponent.html":{}}}],["observable",{"_index":39,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"injectables/DragDropService.html":{},"components/MapComponent.html":{},"injectables/QueryParameterGuard.html":{}}}],["observable((observer",{"_index":430,"title":{},"body":{"injectables/DragDropService.html":{}}}],["observe",{"_index":69,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{}}}],["observer",{"_index":613,"title":{},"body":{"components/IfcComponent.html":{}}}],["observer.error(new",{"_index":431,"title":{},"body":{"injectables/DragDropService.html":{}}}],["occur",{"_index":561,"title":{},"body":{"components/IfcComponent.html":{}}}],["occurs",{"_index":477,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["official",{"_index":843,"title":{},"body":{"components/IonIconComponent.html":{}}}],["oldenburg",{"_index":973,"title":{},"body":{"components/MapComponent.html":{}}}],["oldenburg.de/repos/service",{"_index":935,"title":{},"body":{"components/MapComponent.html":{}}}],["oldv",{"_index":797,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["onadd",{"_index":1476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onclick",{"_index":1261,"title":{},"body":{"interfaces/Marker.html":{}}}],["ondestroy",{"_index":93,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{}}}],["one",{"_index":59,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{}}}],["oneachfeature",{"_index":1126,"title":{},"body":{"components/MapComponent.html":{}}}],["oninit",{"_index":92,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["only_keys",{"_index":1007,"title":{},"body":{"components/MapComponent.html":{}}}],["onto",{"_index":946,"title":{},"body":{"components/MapComponent.html":{}}}],["opendb",{"_index":784,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["opendb(db_name",{"_index":795,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations",{"_index":1218,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(querystore.put",{"_index":1254,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(shapestore.put(shape",{"_index":1250,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(store.get(key).then(shape",{"_index":1220,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(tx.done",{"_index":1222,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["option",{"_index":942,"title":{},"body":{"components/MapComponent.html":{}}}],["optional",{"_index":11,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"injectables/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":1470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opts",{"_index":704,"title":{},"body":{"components/IfcComponent.html":{}}}],["order",{"_index":402,"title":{},"body":{"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["ordering",{"_index":535,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["orders",{"_index":1106,"title":{},"body":{"components/MapComponent.html":{}}}],["origin",{"_index":720,"title":{},"body":{"components/IfcComponent.html":{}}}],["osm",{"_index":995,"title":{},"body":{"components/MapComponent.html":{}}}],["otherwise",{"_index":752,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":1324,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["output",{"_index":369,"title":{},"body":{"directives/DragDropDirective.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["output(\"selected",{"_index":667,"title":{},"body":{"components/IfcComponent.html":{}}}],["outputs",{"_index":349,"title":{},"body":{"directives/DragDropDirective.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["overview",{"_index":1449,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":1384,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":88,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["pairs",{"_index":977,"title":{},"body":{"components/MapComponent.html":{}}}],["param",{"_index":60,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{}}}],["parameter.guard.ts",{"_index":1270,"title":{},"body":{"injectables/QueryParameterGuard.html":{},"coverage.html":{}}}],["parameter.guard.ts:24",{"_index":1284,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["parameter.guard.ts:40",{"_index":1290,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["parameters",{"_index":27,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":26,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["params.appendall({key",{"_index":1228,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["params.set(\"resolution",{"_index":1226,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["parse",{"_index":1285,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["parsefloat(str",{"_index":1082,"title":{},"body":{"components/MapComponent.html":{}}}],["parseint(this.inputzoom",{"_index":1057,"title":{},"body":{"components/MapComponent.html":{}}}],["passed",{"_index":31,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"classes/ErrorHttpContextToken.html":{},"components/MapComponent.html":{},"injectables/QueryParameterGuard.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":645,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{}}}],["path.bringtoback",{"_index":1137,"title":{},"body":{"components/MapComponent.html":{}}}],["path.bringtofront",{"_index":1140,"title":{},"body":{"components/MapComponent.html":{}}}],["path.setstyle({color",{"_index":1136,"title":{},"body":{"components/MapComponent.html":{}}}],["paths",{"_index":659,"title":{},"body":{"components/IfcComponent.html":{}}}],["peer",{"_index":1387,"title":{},"body":{"dependencies.html":{}}}],["picked",{"_index":758,"title":{},"body":{"components/IfcComponent.html":{}}}],["picker",{"_index":543,"title":{},"body":{"components/IfcComponent.html":{}}}],["picking",{"_index":500,"title":{},"body":{"components/IfcComponent.html":{}}}],["pipe(takewhile",{"_index":137,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["point",{"_index":684,"title":{},"body":{"components/IfcComponent.html":{}}}],["position",{"_index":1473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":328,"title":{},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{}}}],["postfiles",{"_index":380,"title":{},"body":{"injectables/DragDropService.html":{}}}],["postfiles(files",{"_index":392,"title":{},"body":{"injectables/DragDropService.html":{}}}],["predefined",{"_index":1427,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prepare",{"_index":1207,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["prepares",{"_index":584,"title":{},"body":{"components/IfcComponent.html":{}}}],["presentation",{"_index":1410,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pretty",{"_index":1415,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prettyprintnum",{"_index":1378,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["prettyprintnum(12345678",{"_index":1417,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prettyprintnum(num",{"_index":1409,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prevent",{"_index":403,"title":{},"body":{"injectables/DragDropService.html":{}}}],["print",{"_index":1416,"title":{},"body":{"miscellaneous/functions.html":{}}}],["private",{"_index":55,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/DragDropDirective.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["promise",{"_index":571,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{}}}],["promise((resolve",{"_index":671,"title":{},"body":{"components/IfcComponent.html":{}}}],["promise(async",{"_index":675,"title":{},"body":{"components/IfcComponent.html":{}}}],["promise.all(fetchmodels",{"_index":712,"title":{},"body":{"components/IfcComponent.html":{}}}],["promise.all(operations",{"_index":1223,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["properly",{"_index":690,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["properties",{"_index":10,"title":{"properties.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"properties.html":{}}}],["property",{"_index":453,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"miscellaneous/enumerations.html":{}}}],["props",{"_index":762,"title":{},"body":{"components/IfcComponent.html":{}}}],["provide",{"_index":1303,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["provided",{"_index":422,"title":{},"body":{"injectables/DragDropService.html":{}}}],["providedin",{"_index":47,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"injectables/DragDropService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{}}}],["providers",{"_index":1319,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["provides",{"_index":1313,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["public",{"_index":205,"title":{},"body":{"components/DragDropComponent.html":{}}}],["puzzle",{"_index":1490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["px",{"_index":744,"title":{},"body":{"components/IfcComponent.html":{}}}],["queries",{"_index":1188,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["query",{"_index":14,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{}}}],["querykey",{"_index":1211,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["queryparameterguard",{"_index":1268,"title":{"injectables/QueryParameterGuard.html":{}},"body":{"injectables/QueryParameterGuard.html":{},"coverage.html":{}}}],["queryparams",{"_index":1278,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["querystore",{"_index":1252,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["queue",{"_index":563,"title":{},"body":{"components/IfcComponent.html":{}}}],["quot",{"_index":1017,"title":{},"body":{"components/MapComponent.html":{}}}],["quot;12.345.678&quot",{"_index":1419,"title":{},"body":{"miscellaneous/functions.html":{}}}],["race",{"_index":568,"title":{},"body":{"components/IfcComponent.html":{}}}],["raise",{"_index":454,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["raw",{"_index":780,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["rawlayerdata",{"_index":1232,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawlayerdata.shapes",{"_index":1237,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawlayerdata.shapes.map(rawshape",{"_index":1238,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawshape",{"_index":1241,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawshape.geojson",{"_index":1240,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawshape.nuts_key",{"_index":1239,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["re",{"_index":448,"title":{},"body":{"classes/ErrorHttpContextToken.html":{}}}],["reach",{"_index":227,"title":{},"body":{"components/DragDropComponent.html":{}}}],["readonly",{"_index":446,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["readwrite",{"_index":1246,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["received",{"_index":854,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["recommended",{"_index":578,"title":{},"body":{"components/IfcComponent.html":{}}}],["reconstruct",{"_index":1194,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["record",{"_index":523,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["recreated",{"_index":1406,"title":{},"body":{"miscellaneous/functions.html":{}}}],["recursive",{"_index":501,"title":{},"body":{"components/IfcComponent.html":{}}}],["recursively",{"_index":546,"title":{},"body":{"components/IfcComponent.html":{}}}],["redirect",{"_index":1279,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["redirectto",{"_index":1275,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["ref",{"_index":984,"title":{},"body":{"components/MapComponent.html":{}}}],["reference",{"_index":186,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{}}}],["regarding",{"_index":243,"title":{},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{}}}],["reject",{"_index":605,"title":{},"body":{"components/IfcComponent.html":{}}}],["rejected",{"_index":603,"title":{},"body":{"components/IfcComponent.html":{}}}],["removes",{"_index":57,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["render",{"_index":691,"title":{},"body":{"components/IfcComponent.html":{},"components/IonIconComponent.html":{}}}],["rendered",{"_index":958,"title":{},"body":{"components/MapComponent.html":{}}}],["renderer",{"_index":514,"title":{},"body":{"components/IfcComponent.html":{}}}],["renders",{"_index":965,"title":{},"body":{"components/MapComponent.html":{}}}],["reply",{"_index":1424,"title":{},"body":{"miscellaneous/functions.html":{}}}],["represent",{"_index":852,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["representing",{"_index":550,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["represents",{"_index":1190,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["request",{"_index":244,"title":{},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["requested",{"_index":1243,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["requests",{"_index":1059,"title":{},"body":{"components/MapComponent.html":{}}}],["requests[layerkey",{"_index":1063,"title":{},"body":{"components/MapComponent.html":{}}}],["required",{"_index":1312,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["res",{"_index":415,"title":{},"body":{"injectables/DragDropService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"miscellaneous/functions.html":{}}}],["reset",{"_index":1094,"title":{},"body":{"components/MapComponent.html":{},"modules/WisdomModule.html":{},"index.html":{}}}],["resize",{"_index":612,"title":{},"body":{"components/IfcComponent.html":{}}}],["resizecontainer",{"_index":492,"title":{},"body":{"components/IfcComponent.html":{}}}],["resizeobserver",{"_index":493,"title":{},"body":{"components/IfcComponent.html":{}}}],["resizeobserver(entries",{"_index":742,"title":{},"body":{"components/IfcComponent.html":{}}}],["resolution",{"_index":885,"title":{},"body":{"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["resolution&#39",{"_index":1005,"title":{},"body":{"components/MapComponent.html":{}}}],["resolution.district",{"_index":1016,"title":{},"body":{"components/MapComponent.html":{}}}],["resolution.municipal",{"_index":1006,"title":{},"body":{"components/MapComponent.html":{}}}],["resolution.tokeylength(resolution",{"_index":1210,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["resolutionnum",{"_index":1209,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["resolutions",{"_index":1402,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["resolve",{"_index":607,"title":{},"body":{"components/IfcComponent.html":{}}}],["resolved",{"_index":588,"title":{},"body":{"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{},"miscellaneous/functions.html":{}}}],["resolves",{"_index":602,"title":{},"body":{"components/IfcComponent.html":{}}}],["resolving",{"_index":929,"title":{},"body":{"components/MapComponent.html":{}}}],["respected",{"_index":527,"title":{},"body":{"components/IfcComponent.html":{}}}],["respond",{"_index":932,"title":{},"body":{"components/MapComponent.html":{}}}],["response",{"_index":337,"title":{},"body":{"components/DragDropComponent.html":{}}}],["responsetype",{"_index":429,"title":{},"body":{"injectables/DragDropService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rest",{"_index":1191,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rest/main/api/get",{"_index":936,"title":{},"body":{"components/MapComponent.html":{}}}],["results",{"_index":72,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"injectables/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":1200,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["return",{"_index":70,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/DragDropComponent.html":{},"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1192,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["returns",{"_index":115,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["right",{"_index":85,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["rise",{"_index":749,"title":{},"body":{"components/IfcComponent.html":{}}}],["root",{"_index":48,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"injectables/DragDropService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{}}}],["route",{"_index":1273,"title":{},"body":{"injectables/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{}}}],["route.data[\"queryparams",{"_index":1296,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["route.data[\"redirect",{"_index":1294,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["route.queryparams[param",{"_index":1298,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["router",{"_index":24,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"injectables/QueryParameterGuard.html":{}}}],["router#parseurl",{"_index":1277,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["routermodule",{"_index":1329,"title":{},"body":{"modules/WisdomModule.html":{}}}],["routerstatesnapshot",{"_index":1289,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["row",{"_index":84,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["run",{"_index":721,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["rxjs",{"_index":42,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"injectables/DragDropService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{}}}],["same",{"_index":723,"title":{},"body":{"components/IfcComponent.html":{}}}],["scene",{"_index":727,"title":{},"body":{"components/IfcComponent.html":{}}}],["schema",{"_index":774,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["schema_v",{"_index":790,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["scopes",{"_index":1307,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["scroll",{"_index":943,"title":{},"body":{"components/MapComponent.html":{}}}],["scrollwheelzoom",{"_index":912,"title":{},"body":{"components/MapComponent.html":{}}}],["see",{"_index":537,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["select",{"_index":1483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["selectable",{"_index":938,"title":{},"body":{"components/MapComponent.html":{}}}],["selected",{"_index":307,"title":{},"body":{"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["selectedcolor",{"_index":913,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedfile",{"_index":311,"title":{},"body":{"components/DragDropComponent.html":{}}}],["selectedfile.name",{"_index":312,"title":{},"body":{"components/DragDropComponent.html":{}}}],["selectedfile.size",{"_index":314,"title":{},"body":{"components/DragDropComponent.html":{}}}],["selectedgeojsonlayer",{"_index":904,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedlayer",{"_index":905,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedmodel",{"_index":628,"title":{},"body":{"components/IfcComponent.html":{}}}],["selectedshapes",{"_index":906,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes.add(key",{"_index":1141,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes.delete(key",{"_index":1138,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes.has(key",{"_index":1135,"title":{},"body":{"components/MapComponent.html":{}}}],["selection",{"_index":924,"title":{},"body":{"components/MapComponent.html":{}}}],["selection.ts",{"_index":1369,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectlist",{"_index":308,"title":{},"body":{"components/DragDropComponent.html":{}}}],["selectlist.push(file",{"_index":318,"title":{},"body":{"components/DragDropComponent.html":{}}}],["selector",{"_index":95,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["self",{"_index":277,"title":{},"body":{"components/DragDropComponent.html":{}}}],["send",{"_index":240,"title":{},"body":{"components/DragDropComponent.html":{}}}],["send_auth",{"_index":1359,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sends",{"_index":414,"title":{},"body":{"injectables/DragDropService.html":{}}}],["sent",{"_index":1498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["separated",{"_index":83,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"miscellaneous/functions.html":{}}}],["server",{"_index":306,"title":{},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["service",{"_index":44,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{}}}],["session",{"_index":270,"title":{},"body":{"components/DragDropComponent.html":{}}}],["set",{"_index":25,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"injectables/QueryParameterGuard.html":{},"miscellaneous/variables.html":{}}}],["set(index",{"_index":63,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["set(use_api_url",{"_index":396,"title":{},"body":{"injectables/DragDropService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["set(use_error_handler",{"_index":398,"title":{},"body":{"injectables/DragDropService.html":{}}}],["set(use_loader",{"_index":397,"title":{},"body":{"injectables/DragDropService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["setinputlayers(layerconfig",{"_index":998,"title":{},"body":{"components/MapComponent.html":{}}}],["setinputmarkers(markers",{"_index":1019,"title":{},"body":{"components/MapComponent.html":{}}}],["setname(name",{"_index":846,"title":{},"body":{"components/IonIconComponent.html":{}}}],["sets",{"_index":719,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["setter",{"_index":836,"title":{},"body":{"components/IonIconComponent.html":{}}}],["setting",{"_index":1501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shape",{"_index":866,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["shape.key",{"_index":1147,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shape.name",{"_index":1146,"title":{},"body":{"components/MapComponent.html":{}}}],["shapedata",{"_index":860,"title":{"interfaces/ShapeData.html":{}},"body":{"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"coverage.html":{}}}],["shapekeys",{"_index":1248,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapekeys.push(shape.key",{"_index":1251,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapes",{"_index":856,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/variables.html":{}}}],["shapes.push(shape",{"_index":1221,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapestore",{"_index":1247,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["show",{"_index":524,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["showing",{"_index":479,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["showmodel",{"_index":499,"title":{},"body":{"components/IfcComponent.html":{}}}],["showmodel(model",{"_index":596,"title":{},"body":{"components/IfcComponent.html":{}}}],["shown",{"_index":599,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["shows",{"_index":598,"title":{},"body":{"components/IfcComponent.html":{}}}],["shuffling",{"_index":1100,"title":{},"body":{"components/MapComponent.html":{}}}],["side",{"_index":418,"title":{},"body":{"injectables/DragDropService.html":{}}}],["simply",{"_index":1193,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["single",{"_index":865,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["size",{"_index":616,"title":{},"body":{"components/IfcComponent.html":{}}}],["slash",{"_index":82,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["small",{"_index":463,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["snapshot",{"_index":1293,"title":{},"body":{"injectables/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["solution",{"_index":1407,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sorting",{"_index":1097,"title":{},"body":{"components/MapComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"injectables/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["spawn",{"_index":462,"title":{},"body":{"classes/ErrorHttpContextToken.html":{}}}],["specific",{"_index":551,"title":{},"body":{"components/IfcComponent.html":{}}}],["specifies",{"_index":644,"title":{},"body":{"components/IfcComponent.html":{}}}],["split",{"_index":1080,"title":{},"body":{"components/MapComponent.html":{}}}],["src/.../bulma",{"_index":1392,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../ifc.component.ts",{"_index":1459,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../ifc.service.ts",{"_index":1464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../invert",{"_index":1463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../map.component.ts",{"_index":1460,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../map.service.ts",{"_index":1462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../resolution.ts",{"_index":1394,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../send",{"_index":1465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../use",{"_index":1393,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../util.ts",{"_index":1404,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts",{"_index":80,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"coverage.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:19",{"_index":131,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:21",{"_index":106,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:33",{"_index":124,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:48",{"_index":107,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:57",{"_index":117,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts",{"_index":6,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"coverage.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:29",{"_index":169,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:34",{"_index":170,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:44",{"_index":168,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:51",{"_index":167,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/bulma/bulma",{"_index":171,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/drag",{"_index":200,"title":{},"body":{"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"coverage.html":{}}}],["src/lib/guards/query",{"_index":1269,"title":{},"body":{"injectables/QueryParameterGuard.html":{},"coverage.html":{}}}],["src/lib/http",{"_index":435,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/lib/ifc/ifc.component.ts",{"_index":484,"title":{},"body":{"components/IfcComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/ifc/ifc.component.ts:101",{"_index":520,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:105",{"_index":539,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:109",{"_index":542,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:120",{"_index":547,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:135",{"_index":618,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:145",{"_index":601,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:149",{"_index":632,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:153",{"_index":610,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:159",{"_index":611,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:162",{"_index":608,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:165",{"_index":606,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:167",{"_index":604,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:170",{"_index":504,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:185",{"_index":595,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:203",{"_index":582,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:319",{"_index":557,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:334",{"_index":597,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:345",{"_index":589,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:79",{"_index":511,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.service.ts",{"_index":773,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/ifc/ifc.service.ts:39",{"_index":815,"title":{},"body":{"injectables/IfcService.html":{}}}],["src/lib/ifc/ifc.service.ts:61",{"_index":816,"title":{},"body":{"injectables/IfcService.html":{}}}],["src/lib/ion",{"_index":817,"title":{},"body":{"components/IonIconComponent.html":{},"coverage.html":{}}}],["src/lib/loader/loader.injector.ts",{"_index":871,"title":{},"body":{"injectables/LoaderInjector.html":{},"coverage.html":{}}}],["src/lib/loader/loader.injector.ts:16",{"_index":890,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["src/lib/loader/loader.injector.ts:25",{"_index":883,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["src/lib/map/invert",{"_index":1368,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/map/layer",{"_index":850,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{},"coverage.html":{}}}],["src/lib/map/map.component.ts",{"_index":895,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/map/map.component.ts:125",{"_index":923,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:133",{"_index":975,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:139",{"_index":976,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:144",{"_index":979,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:147",{"_index":937,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:150",{"_index":940,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:154",{"_index":985,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:157",{"_index":981,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:164",{"_index":990,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:170",{"_index":988,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:172",{"_index":987,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:175",{"_index":960,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:182",{"_index":919,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:197",{"_index":966,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:235",{"_index":964,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:386",{"_index":961,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:48",{"_index":983,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:51",{"_index":922,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:53",{"_index":974,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:56",{"_index":950,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:58",{"_index":994,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:61",{"_index":921,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:63",{"_index":970,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:66",{"_index":955,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:68",{"_index":997,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:74",{"_index":941,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:77",{"_index":953,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:79",{"_index":948,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.service.ts",{"_index":1187,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/map/map.service.ts:70",{"_index":1256,"title":{},"body":{"injectables/MapService.html":{}}}],["src/lib/map/map.service.ts:97",{"_index":1258,"title":{},"body":{"injectables/MapService.html":{}}}],["src/lib/map/marker.ts",{"_index":1259,"title":{},"body":{"interfaces/Marker.html":{},"coverage.html":{}}}],["src/lib/map/resolution.ts",{"_index":1371,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/lib/util.ts",{"_index":1374,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/wisdom.module.ts",{"_index":1325,"title":{},"body":{"modules/WisdomModule.html":{}}}],["src/wisdominterface.ts",{"_index":1300,"title":{},"body":{"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["stackoverflow",{"_index":1408,"title":{},"body":{"miscellaneous/functions.html":{}}}],["start",{"_index":572,"title":{},"body":{"components/IfcComponent.html":{}}}],["state",{"_index":1288,"title":{},"body":{"injectables/QueryParameterGuard.html":{},"miscellaneous/enumerations.html":{}}}],["statements",{"_index":1343,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":658,"title":{},"body":{"components/IfcComponent.html":{}}}],["status",{"_index":327,"title":{},"body":{"components/DragDropComponent.html":{}}}],["stops",{"_index":834,"title":{},"body":{"components/IonIconComponent.html":{}}}],["store",{"_index":1216,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["stored",{"_index":782,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["str",{"_index":1425,"title":{},"body":{"miscellaneous/functions.html":{}}}],["string",{"_index":16,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":29,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"injectables/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["stringtocolor",{"_index":1379,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stringtocolor(str",{"_index":1420,"title":{},"body":{"miscellaneous/functions.html":{}}}],["structure",{"_index":552,"title":{},"body":{"components/IfcComponent.html":{}}}],["style",{"_index":1124,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["style.background",{"_index":352,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["styles",{"_index":894,"title":{},"body":{"components/MapComponent.html":{}}}],["styleurls",{"_index":897,"title":{},"body":{"components/MapComponent.html":{}}}],["subject",{"_index":41,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{}}}],["submit",{"_index":344,"title":{},"body":{"components/DragDropComponent.html":{}}}],["submitcheck",{"_index":213,"title":{},"body":{"components/DragDropComponent.html":{}}}],["submitcheck(event",{"_index":255,"title":{},"body":{"components/DragDropComponent.html":{}}}],["subscribe",{"_index":334,"title":{},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{}}}],["subscribe(next",{"_index":139,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["subscribes",{"_index":325,"title":{},"body":{"components/DragDropComponent.html":{}}}],["such",{"_index":1304,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["support",{"_index":1453,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":120,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["svg",{"_index":1454,"title":{},"body":{"modules.html":{}}}],["swap",{"_index":1439,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sync",{"_index":1436,"title":{},"body":{"miscellaneous/functions.html":{}}}],["system",{"_index":532,"title":{},"body":{"components/IfcComponent.html":{}}}],["t",{"_index":1431,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":1383,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1382,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1398,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["takewhile",{"_index":133,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["template",{"_index":77,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["templateurl",{"_index":96,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{}}}],["territorial",{"_index":868,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["text",{"_index":15,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{}}}],["then(file",{"_index":708,"title":{},"body":{"components/IfcComponent.html":{}}}],["therefore",{"_index":89,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["these&#39",{"_index":1010,"title":{},"body":{"components/MapComponent.html":{}}}],["things",{"_index":174,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["third",{"_index":1411,"title":{},"body":{"miscellaneous/functions.html":{}}}],["this.alive",{"_index":138,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.apiurl",{"_index":331,"title":{},"body":{"components/DragDropComponent.html":{}}}],["this.background",{"_index":374,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["this.center",{"_index":1054,"title":{},"body":{"components/MapComponent.html":{}}}],["this.checkallowed(files.length",{"_index":288,"title":{},"body":{"components/DragDropComponent.html":{}}}],["this.cleanup",{"_index":323,"title":{},"body":{"components/DragDropComponent.html":{}}}],["this.dragdropservice.postfiles",{"_index":330,"title":{},"body":{"components/DragDropComponent.html":{}}}],["this.elementref.nativeelement.classlist.toggle(\"is",{"_index":199,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.elref.nativeelement?.setattribute(\"name",{"_index":848,"title":{},"body":{"components/IonIconComponent.html":{}}}],["this.emitselection",{"_index":1142,"title":{},"body":{"components/MapComponent.html":{}}}],["this.filearr",{"_index":289,"title":{},"body":{"components/DragDropComponent.html":{}}}],["this.filearr.concat(this.checkforduplicates(files",{"_index":290,"title":{},"body":{"components/DragDropComponent.html":{}}}],["this.filearr.find",{"_index":310,"title":{},"body":{"components/DragDropComponent.html":{}}}],["this.filearr.length",{"_index":299,"title":{},"body":{"components/DragDropComponent.html":{}}}],["this.filearr.splice(index",{"_index":321,"title":{},"body":{"components/DragDropComponent.html":{}}}],["this.filedropped.emit(event",{"_index":376,"title":{},"body":{"directives/DragDropDirective.html":{}}}],["this.filelimit",{"_index":300,"title":{},"body":{"components/DragDropComponent.html":{}}}],["this.filesselected",{"_index":291,"title":{},"body":{"components/DragDropComponent.html":{}}}],["this.fragments",{"_index":140,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.fragments.includes(undefined",{"_index":142,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.fragments.length",{"_index":65,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.fragments[index",{"_index":67,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.handleerror(\"no",{"_index":421,"title":{},"body":{"injectables/DragDropService.html":{}}}],["this.handleerror(\"there",{"_index":420,"title":{},"body":{"injectables/DragDropService.html":{}}}],["this.height",{"_index":1050,"title":{},"body":{"components/MapComponent.html":{}}}],["this.http.post(apiurl",{"_index":428,"title":{},"body":{"injectables/DragDropService.html":{}}}],["this.httpbasecontext",{"_index":425,"title":{},"body":{"injectables/DragDropService.html":{}}}],["this.httpcontext",{"_index":333,"title":{},"body":{"components/DragDropComponent.html":{}}}],["this.idb",{"_index":794,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["this.inputcenter",{"_index":1053,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputheight",{"_index":1049,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputlayerselectable",{"_index":1131,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputmodels",{"_index":687,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.inputscrollwheelzoom",{"_index":1079,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputtileurl",{"_index":1051,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputzoom",{"_index":1055,"title":{},"body":{"components/MapComponent.html":{}}}],["this.isdestroyed",{"_index":732,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.keynames.next(object.fromentries(keynames",{"_index":1075,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerconfig.next(layerconfig",{"_index":1042,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerconfig.subscribe(async",{"_index":1058,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerdata.next(fetched",{"_index":1071,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerdata.subscribe(async",{"_index":1092,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layernames[key].length",{"_index":1158,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layernames[layerkey",{"_index":1062,"title":{},"body":{"components/MapComponent.html":{}}}],["this.loadedmodels",{"_index":670,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.loader.addloader(loadall",{"_index":766,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.loader.addloader(loading",{"_index":739,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.loaders.emit([toresolve",{"_index":893,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["this.map",{"_index":1087,"title":{},"body":{"components/MapComponent.html":{}}}],["this.mapelement.nativeelement",{"_index":1077,"title":{},"body":{"components/MapComponent.html":{}}}],["this.markers.next(markers",{"_index":1047,"title":{},"body":{"components/MapComponent.html":{}}}],["this.markers.subscribe(markers",{"_index":1170,"title":{},"body":{"components/MapComponent.html":{}}}],["this.modelloadabort",{"_index":673,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.modelloaddone",{"_index":672,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.modelloaddone(this.models",{"_index":750,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.models",{"_index":686,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.models[model].fixed",{"_index":767,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.models[model].ifcmodel",{"_index":729,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.resizeobserver",{"_index":741,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.resizeobserver.disconnect",{"_index":770,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.resizeobserver.observe(this.resizecontainer.nativeelement",{"_index":747,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.router.parseurl(redirect",{"_index":1295,"title":{},"body":{"injectables/QueryParameterGuard.html":{}}}],["this.selected.emit",{"_index":1183,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedcolor",{"_index":1139,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedgeojsonlayer",{"_index":1110,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedlayer",{"_index":1149,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedmodel.emit(props",{"_index":765,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.selectedshapes",{"_index":1095,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedshapes[key",{"_index":1113,"title":{},"body":{"components/MapComponent.html":{}}}],["this.service.fetchlayerdata",{"_index":1064,"title":{},"body":{"components/MapComponent.html":{}}}],["this.service.fetchmodel(path",{"_index":707,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.service.observe",{"_index":136,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.subject.asobservable",{"_index":71,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.subject.next(this.fragments",{"_index":68,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.tileurl",{"_index":1052,"title":{},"body":{"components/MapComponent.html":{}}}],["this.transformevent(event",{"_index":287,"title":{},"body":{"components/DragDropComponent.html":{}}}],["this.translate.get(this.layernames[key",{"_index":1159,"title":{},"body":{"components/MapComponent.html":{}}}],["this.translate.instant(\"common.ifc.loading",{"_index":738,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.translate.instant(this.layernames[key",{"_index":1156,"title":{},"body":{"components/MapComponent.html":{}}}],["this.translate.onlangchange.subscribe",{"_index":1153,"title":{},"body":{"components/MapComponent.html":{}}}],["this.unselectedcolor",{"_index":1125,"title":{},"body":{"components/MapComponent.html":{}}}],["this.usepicking",{"_index":754,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.userecursive",{"_index":764,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.valuename",{"_index":332,"title":{},"body":{"components/DragDropComponent.html":{}}}],["this.viewer",{"_index":698,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer!.context.scene.removemodel(ifcmodel",{"_index":728,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer!.context.updateaspect",{"_index":746,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer!.ifc.getproperties(modelid",{"_index":763,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer!.ifc.loader.ifcmanager.applywebifcconfig",{"_index":724,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer!.ifc.loadifc(file",{"_index":726,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer!.ifc.selector.pickifcitem",{"_index":759,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer!.ifc.selector.prepickifcitem",{"_index":756,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer.context.scene.addmodel(this.models[model].ifcmodel",{"_index":769,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer.context.scene.removemodel(this.models[model].ifcmodel",{"_index":768,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer.dispose",{"_index":771,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer.ifc.loader.ifcmanager.usewebworkers(true",{"_index":700,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewercontainer.nativeelement",{"_index":688,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewercontainer.nativeelement.onclick",{"_index":757,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewercontainer.nativeelement.onmousemove",{"_index":755,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.zoom",{"_index":1056,"title":{},"body":{"components/MapComponent.html":{}}}],["three",{"_index":474,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["three/ifc/basedefinitions",{"_index":638,"title":{},"body":{"components/IfcComponent.html":{}}}],["three/ifc/components/ifcmodel",{"_index":640,"title":{},"body":{"components/IfcComponent.html":{}}}],["through",{"_index":443,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["tile",{"_index":951,"title":{},"body":{"components/MapComponent.html":{}}}],["tileurl",{"_index":907,"title":{},"body":{"components/MapComponent.html":{}}}],["time",{"_index":528,"title":{},"body":{"components/IfcComponent.html":{}}}],["times",{"_index":1505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["toast",{"_index":464,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["todo",{"_index":734,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["toenum",{"_index":1372,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["toenum(length",{"_index":1445,"title":{},"body":{"miscellaneous/functions.html":{}}}],["toggle",{"_index":179,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"miscellaneous/variables.html":{}}}],["toggleable",{"_index":175,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable'},{'name",{"_index":163,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["toggleable.directive",{"_index":1333,"title":{},"body":{"modules/WisdomModule.html":{}}}],["toggleable.directive.ts",{"_index":172,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"coverage.html":{}}}],["toggleable.directive.ts:18",{"_index":185,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:30",{"_index":188,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggles",{"_index":189,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggling",{"_index":191,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["token",{"_index":444,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/variables.html":{}}}],["tokeylength",{"_index":1373,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tokeylength(res",{"_index":1447,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tooltip",{"_index":1262,"title":{},"body":{"interfaces/Marker.html":{}}}],["top",{"_index":1314,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["topright",{"_index":1474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["toresolve",{"_index":887,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["touch",{"_index":892,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["transform",{"_index":292,"title":{},"body":{"components/DragDropComponent.html":{}}}],["transformevent",{"_index":214,"title":{},"body":{"components/DragDropComponent.html":{}}}],["transformevent(event",{"_index":258,"title":{},"body":{"components/DragDropComponent.html":{}}}],["transforms",{"_index":1448,"title":{},"body":{"miscellaneous/functions.html":{}}}],["translate",{"_index":143,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["translate/core",{"_index":635,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{}}}],["translated",{"_index":737,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["translatemodule",{"_index":1330,"title":{},"body":{"modules/WisdomModule.html":{}}}],["translateobject",{"_index":1380,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["translateobject(service",{"_index":1429,"title":{},"body":{"miscellaneous/functions.html":{}}}],["translateservice",{"_index":32,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["translation",{"_index":736,"title":{},"body":{"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["translations",{"_index":1308,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["translator",{"_index":1504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":79,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["tries",{"_index":324,"title":{},"body":{"components/DragDropComponent.html":{}}}],["trimmedkeys",{"_index":1208,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["true",{"_index":130,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":791,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["ts",{"_index":682,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["tslib",{"_index":1385,"title":{},"body":{"dependencies.html":{}}}],["tuple",{"_index":1440,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tupleswap",{"_index":1381,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tupleswap(tuple",{"_index":1438,"title":{},"body":{"miscellaneous/functions.html":{}}}],["two",{"_index":1444,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tx",{"_index":1214,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["tx.objectstore(\"queries",{"_index":1253,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["tx.objectstore(\"shapes",{"_index":1217,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["type",{"_index":17,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"injectables/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type=\"date\"]'},{'name",{"_index":161,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["typealiases",{"_index":1457,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":716,"title":{},"body":{"components/IfcComponent.html":{},"injectables/QueryParameterGuard.html":{}}}],["undefined",{"_index":110,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"injectables/QueryParameterGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["under",{"_index":888,"title":{},"body":{"injectables/LoaderInjector.html":{},"interfaces/WisdomInterface.html":{}}}],["units",{"_index":869,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["unknown",{"_index":1242,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["unselected",{"_index":954,"title":{},"body":{"components/MapComponent.html":{}}}],["unselectedcolor",{"_index":914,"title":{},"body":{"components/MapComponent.html":{}}}],["up",{"_index":109,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{}}}],["update",{"_index":127,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["updating",{"_index":1098,"title":{},"body":{"components/MapComponent.html":{}}}],["upgrade(db",{"_index":796,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["upload",{"_index":215,"title":{},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{}}}],["upload.subscribe",{"_index":336,"title":{},"body":{"components/DragDropComponent.html":{}}}],["uploaded",{"_index":269,"title":{},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{}}}],["uploading",{"_index":305,"title":{},"body":{"components/DragDropComponent.html":{}}}],["upon",{"_index":125,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["url",{"_index":218,"title":{},"body":{"components/DragDropComponent.html":{},"injectables/DragDropService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["url.ts",{"_index":1361,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["urltree",{"_index":37,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"injectables/QueryParameterGuard.html":{}}}],["use",{"_index":22,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"directives/DragDropDirective.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["use_api_url",{"_index":405,"title":{},"body":{"injectables/DragDropService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_base_url",{"_index":1362,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_cache",{"_index":1364,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_error_handler",{"_index":409,"title":{},"body":{"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_error_handler#handler",{"_index":452,"title":{},"body":{"classes/ErrorHttpContextToken.html":{}}}],["use_error_handler.handler",{"_index":1401,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["use_fast_bools",{"_index":725,"title":{},"body":{"components/IfcComponent.html":{}}}],["use_loader",{"_index":407,"title":{},"body":{"injectables/DragDropService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":54,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"injectables/QueryParameterGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1441,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["usepicking",{"_index":664,"title":{},"body":{"components/IfcComponent.html":{}}}],["userecursive",{"_index":666,"title":{},"body":{"components/IfcComponent.html":{}}}],["uses",{"_index":775,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{}}}],["using",{"_index":577,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/functions.html":{}}}],["utility",{"_index":1432,"title":{},"body":{"miscellaneous/functions.html":{}}}],["value",{"_index":61,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"injectables/DragDropService.html":{},"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["valuename",{"_index":275,"title":{},"body":{"components/DragDropComponent.html":{}}}],["values",{"_index":401,"title":{},"body":{"injectables/DragDropService.html":{},"components/MapComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["var",{"_index":147,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/DragDropComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["variable",{"_index":1358,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1461,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variants",{"_index":450,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":789,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["vertical",{"_index":267,"title":{},"body":{"components/DragDropComponent.html":{}}}],["via",{"_index":449,"title":{},"body":{"classes/ErrorHttpContextToken.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"miscellaneous/enumerations.html":{}}}],["view",{"_index":284,"title":{},"body":{"components/DragDropComponent.html":{},"components/IfcComponent.html":{}}}],["viewchild",{"_index":633,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["viewchild(\"map",{"_index":1028,"title":{},"body":{"components/MapComponent.html":{}}}],["viewchild(\"resizecontainer",{"_index":669,"title":{},"body":{"components/IfcComponent.html":{}}}],["viewchild(\"viewercontainer",{"_index":668,"title":{},"body":{"components/IfcComponent.html":{}}}],["viewchild('map",{"_index":982,"title":{},"body":{"components/MapComponent.html":{}}}],["viewchild('resizecontainer",{"_index":609,"title":{},"body":{"components/IfcComponent.html":{}}}],["viewchild('viewercontainer",{"_index":631,"title":{},"body":{"components/IfcComponent.html":{}}}],["viewer",{"_index":494,"title":{},"body":{"components/IfcComponent.html":{}}}],["viewer/web",{"_index":630,"title":{},"body":{"components/IfcComponent.html":{}}}],["viewercontainer",{"_index":495,"title":{},"body":{"components/IfcComponent.html":{}}}],["visibility",{"_index":190,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{}}}],["visible",{"_index":573,"title":{},"body":{"components/IfcComponent.html":{}}}],["void",{"_index":123,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/DragDropComponent.html":{},"directives/DragDropDirective.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"miscellaneous/variables.html":{}}}],["want",{"_index":231,"title":{},"body":{"components/DragDropComponent.html":{}}}],["web",{"_index":637,"title":{},"body":{"components/IfcComponent.html":{}}}],["webcomponents",{"_index":823,"title":{},"body":{"components/IonIconComponent.html":{}}}],["webpack.config.ts",{"_index":230,"title":{},"body":{"components/DragDropComponent.html":{}}}],["website",{"_index":844,"title":{},"body":{"components/IonIconComponent.html":{}}}],["whether",{"_index":132,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"injectables/QueryParameterGuard.html":{}}}],["whole",{"_index":459,"title":{},"body":{"classes/ErrorHttpContextToken.html":{}}}],["width",{"_index":516,"title":{},"body":{"components/IfcComponent.html":{}}}],["wisdom",{"_index":1301,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["wisdominterface",{"_index":1299,"title":{"interfaces/WisdomInterface.html":{}},"body":{"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["wisdommodule",{"_index":1315,"title":{"modules/WisdomModule.html":{}},"body":{"modules/WisdomModule.html":{},"index.html":{},"modules.html":{}}}],["within",{"_index":653,"title":{},"body":{"components/IfcComponent.html":{}}}],["without",{"_index":927,"title":{},"body":{"components/MapComponent.html":{}}}],["work",{"_index":840,"title":{},"body":{"components/IonIconComponent.html":{}}}],["worry",{"_index":1099,"title":{},"body":{"components/MapComponent.html":{}}}],["wrong",{"_index":1442,"title":{},"body":{"miscellaneous/functions.html":{}}}],["year",{"_index":1400,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["yes",{"_index":395,"title":{},"body":{"injectables/DragDropService.html":{},"injectables/LoaderInjector.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{}}}],["z",{"_index":1184,"title":{},"body":{"components/MapComponent.html":{}}}],["zoom",{"_index":908,"title":{},"body":{"components/MapComponent.html":{},"modules/WisdomModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Breadcrumb.html":{"url":"interfaces/Breadcrumb.html","title":"interface - Breadcrumb","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Breadcrumb\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/breadcrumbs/breadcrumbs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Breadcrumb fragment interface.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                        \n                                            link\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            query\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional icon name to be displayed on the left of the fragment name.\nThis will use an IonIconComponent for the icon.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Router link to be set for the fragment.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:     Params\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Params\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional query parameters for the router link.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    String or array of strings to be displayed as fragment.\nEvery element will be passed to the TranslateService.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {Injectable} from \"@angular/core\";\nimport {Params, ActivatedRouteSnapshot, UrlTree} from \"@angular/router\";\nimport {Observable, BehaviorSubject, Subject} from \"rxjs\";\n\n/** Breadcrumb fragment interface. */\nexport interface Breadcrumb {\n  /**\n   * Optional icon name to be displayed on the left of the fragment name.\n   * This will use an {@link IonIconComponent} for the icon.\n   */\n  icon?: string,\n  /**\n   * String or array of strings to be displayed as fragment.\n   * Every element will be passed to the {@link TranslateService}.\n   */\n  text: string | string[],\n  /** Router link to be set for the fragment. */\n  link: string,\n  /** Optional query parameters for the router link. */\n  query?: Params\n}\n\n/** Service collecting the breadcrumbs. */\n@Injectable({\n  providedIn: 'root'\n})\nexport class BreadcrumbsService {\n  /** List of breadcrumbs. */\n  fragments: Breadcrumb[] = [];\n  /**\n   * {@link Subject} for the {@link Breadcrumb}s, to be used as\n   * {@link Observable}.\n   */\n  private subject: BehaviorSubject\n    = new BehaviorSubject([]);\n\n  /**\n   * Set a new breadcrumb fragment.\n   *\n   * This removes all fragments with a higher index than the set one.\n   * @param index Index of the breadcrumb array\n   * @param value Breadcrumb fragment to display\n   */\n  set(index: number, value: Breadcrumb) {\n    this.fragments.length = index + 1;\n    this.fragments[index] = value;\n    this.subject.next(this.fragments);\n  }\n\n  /** Observe the breadcrumb fragments. */\n  observe(): Observable {\n    return this.subject.asObservable();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BreadcrumbsComponent.html":{"url":"components/BreadcrumbsComponent.html","title":"component - BreadcrumbsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BreadcrumbsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/breadcrumbs/breadcrumbs.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component to display breadcrumbs collected by the BreadcrumbsService.\nThis will display a slash separated row with all breadcrumb fragments.\nThe one the most right is considered the current page and is therefore not\nclickable.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                breadcrumbs\n            \n\n\n\n\n\n\n            \n                templateUrl\n                ./breadcrumbs.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                alive\n                            \n                            \n                                fragments\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isAllSet\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: BreadcrumbsService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        BreadcrumbsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to get breadcrumb fragments from\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isAllSet\n                        \n                    \n                \n            \n            \n                \nisAllSet()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:48\n                \n            \n\n\n            \n                \n                    Check if all fragments up to the most right are set.\nIf one is undefined this will return false.\nThis allows ensuring that only fully defined breadcrumbs will be displayed.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:57\n                \n            \n\n\n            \n                \n                    On destroy set alive to false.\nThis makes sure that the component does not live as long as the service.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:33\n                \n            \n\n\n            \n                \n                    Upon init this will observe the service and update the breadcrumbs if\nneeded.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        alive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:19\n                        \n                    \n\n            \n                \n                    Whether this component is alive.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fragments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         (Breadcrumb | undefined)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:21\n                        \n                    \n\n            \n                \n                    Breadcrumb fragments that will be displayed.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {Component, OnDestroy, OnInit} from \"@angular/core\";\nimport {takeWhile} from \"rxjs\";\n\nimport {Breadcrumb, BreadcrumbsService} from \"./breadcrumbs.service\";\n\n/**\n * Component to display breadcrumbs collected by the {@link BreadcrumbsService}.\n *\n * This will display a slash separated row with all breadcrumb fragments.\n * The one the most right is considered the current page and is therefore not\n * clickable.\n */\n@Component({\n  selector: 'breadcrumbs',\n  templateUrl: './breadcrumbs.component.html'\n})\nexport class BreadcrumbsComponent implements OnInit, OnDestroy {\n  /** Whether this component is alive. */\n  private alive: boolean = true;\n  /** Breadcrumb fragments that will be displayed. */\n  fragments: (Breadcrumb | undefined)[] = [];\n\n  /**\n   * Constructor.\n   * @param service Service to get breadcrumb fragments from\n   */\n  constructor(private service: BreadcrumbsService) { }\n\n  /**\n   * Upon init this will observe the service and update the breadcrumbs if\n   * needed.\n   */\n  ngOnInit(): void {\n    this.service.observe()\n      .pipe(takeWhile(() => this.alive))\n      .subscribe(next => {\n      this.fragments = next\n    });\n  }\n\n  /**\n   * Check if all fragments up to the most right are set.\n   *\n   * If one is undefined this will return `false`.\n   *\n   * This allows ensuring that only fully defined breadcrumbs will be displayed.\n   */\n  isAllSet(): boolean {\n    return !this.fragments.includes(undefined);\n  }\n\n  /**\n   * On destroy set {@link alive} to `false`.\n   *\n   * This makes sure that the component does not live as long as the service.\n   */\n  ngOnDestroy(): void {\n    this.alive = false;\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n          \n            \n          \n          \n            \n              {{text | translate}}\n            \n          \n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                        {{text | translate}}                                          '\n    var COMPONENTS = [{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'DragDropComponent', 'selector': 'drag-drop'},{'name': 'IfcComponent', 'selector': 'ifc'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaCalendarDirective', 'selector': '[type=\"date\"]'},{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'},{'name': 'DragDropDirective', 'selector': '[dragDropDirective]'}];\n    var ACTUAL_COMPONENT = {'name': 'BreadcrumbsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BreadcrumbsService.html":{"url":"injectables/BreadcrumbsService.html","title":"injectable - BreadcrumbsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BreadcrumbsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/breadcrumbs/breadcrumbs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service collecting the breadcrumbs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fragments\n                            \n                            \n                                    Private\n                                subject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                observe\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        observe\n                        \n                    \n                \n            \n            \n                \nobserve()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:51\n                \n            \n\n\n            \n                \n                    Observe the breadcrumb fragments.\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(index: number, value: Breadcrumb)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:44\n                \n            \n\n\n            \n                \n                    Set a new breadcrumb fragment.\nThis removes all fragments with a higher index than the set one.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of the breadcrumb array\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                                Breadcrumb\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Breadcrumb fragment to display\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fragments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Breadcrumb[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:29\n                        \n                    \n\n            \n                \n                    List of breadcrumbs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:34\n                        \n                    \n\n            \n                \n                    Subject for the Breadcrumbs, to be used as\nObservable.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from \"@angular/core\";\nimport {Params, ActivatedRouteSnapshot, UrlTree} from \"@angular/router\";\nimport {Observable, BehaviorSubject, Subject} from \"rxjs\";\n\n/** Breadcrumb fragment interface. */\nexport interface Breadcrumb {\n  /**\n   * Optional icon name to be displayed on the left of the fragment name.\n   * This will use an {@link IonIconComponent} for the icon.\n   */\n  icon?: string,\n  /**\n   * String or array of strings to be displayed as fragment.\n   * Every element will be passed to the {@link TranslateService}.\n   */\n  text: string | string[],\n  /** Router link to be set for the fragment. */\n  link: string,\n  /** Optional query parameters for the router link. */\n  query?: Params\n}\n\n/** Service collecting the breadcrumbs. */\n@Injectable({\n  providedIn: 'root'\n})\nexport class BreadcrumbsService {\n  /** List of breadcrumbs. */\n  fragments: Breadcrumb[] = [];\n  /**\n   * {@link Subject} for the {@link Breadcrumb}s, to be used as\n   * {@link Observable}.\n   */\n  private subject: BehaviorSubject\n    = new BehaviorSubject([]);\n\n  /**\n   * Set a new breadcrumb fragment.\n   *\n   * This removes all fragments with a higher index than the set one.\n   * @param index Index of the breadcrumb array\n   * @param value Breadcrumb fragment to display\n   */\n  set(index: number, value: Breadcrumb) {\n    this.fragments.length = index + 1;\n    this.fragments[index] = value;\n    this.subject.next(this.fragments);\n  }\n\n  /** Observe the breadcrumb fragments. */\n  observe(): Observable {\n    return this.subject.asObservable();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/BulmaIsToggleableDirective.html":{"url":"directives/BulmaIsToggleableDirective.html","title":"directive - BulmaIsToggleableDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  BulmaIsToggleableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/bulma/bulma-is-toggleable.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Directive for making things toggleable with bulma.\nClicking on the node that has this directive will toggle the \"is-active\"\nclass.\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        .is-toggleable\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                toggle\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elementRef: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Reference to element this is applied to\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:30\n                \n            \n\n\n            \n                \n                    Toggles the visibility of a bulma element by toggling is-active css class.\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        toggle\n                        \n                    \n                \n            \n            \n                \n                    \n                    toggle()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click')\n                \n            \n\n            \n                \n                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:30\n                \n            \n\n\n            \n                \n                    Toggles the visibility of a bulma element by toggling is-active css class.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import {\n  HostBinding,\n  Directive,\n  Input,\n  HostListener,\n  ElementRef\n} from \"@angular/core\";\n\n/**\n * Directive for making things toggleable with bulma.\n *\n * Clicking on the node that has this directive will toggle the \"is-active\"\n * class.\n */\n@Directive({\n  selector: \".is-toggleable\"\n})\nexport class BulmaIsToggleableDirective {\n\n  /**\n   * Constructor.\n   * @param elementRef Reference to element this is applied to\n   */\n  constructor(private elementRef: ElementRef) {}\n\n  /**\n   * Toggles the visibility of a bulma element by toggling `is-active` css class.\n   */\n  @HostListener(\"click\")\n  toggle() {\n    this.elementRef.nativeElement.classList.toggle(\"is-active\");\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DragDropComponent.html":{"url":"components/DragDropComponent.html","title":"component - DragDropComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DragDropComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/drag-drop/drag-drop.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                drag-drop\n            \n\n\n\n\n\n\n            \n                templateUrl\n                ./drag-drop.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dragdropService\n                            \n                            \n                                fileArr\n                            \n                            \n                                filesSelected\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAllowed\n                            \n                            \n                                checkForDuplicates\n                            \n                            \n                                cleanUp\n                            \n                            \n                                deleteFile\n                            \n                            \n                                submitCheck\n                            \n                            \n                                transformEvent\n                            \n                            \n                                upload\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                api-url\n                            \n                            \n                                file-limit\n                            \n                            \n                                height\n                            \n                            \n                                http-context\n                            \n                            \n                                value-name\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dragdropService: DragDropService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/drag-drop/drag-drop.component.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dragdropService\n                                                  \n                                                        \n                                                                        DragDropService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        api-url\n                    \n                \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/drag-drop/drag-drop.component.ts:25\n                            \n                        \n                \n                    \n                        set the url-end of the api-service to reach.\nBecause of the httpcontext, adjust the webpack.config.ts,\nif you want to add another (local) environment.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        file-limit\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 5\n                    \n                \n                        \n                            \n                                    Defined in src/lib/drag-drop/drag-drop.component.ts:17\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"20vh\"\n                    \n                \n                        \n                            \n                                    Defined in src/lib/drag-drop/drag-drop.component.ts:13\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        http-context\n                    \n                \n                \n                    \n                        Type :     HttpContext | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/drag-drop/drag-drop.component.ts:36\n                            \n                        \n                \n                    \n                        send extra information regarding the http context with the request\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        value-name\n                    \n                \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/drag-drop/drag-drop.component.ts:29\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkAllowed\n                        \n                    \n                \n            \n            \n                \ncheckAllowed(fileLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/drag-drop/drag-drop.component.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkForDuplicates\n                        \n                    \n                \n            \n            \n                \ncheckForDuplicates(files: File[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/drag-drop/drag-drop.component.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     File[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cleanUp\n                        \n                    \n                \n            \n            \n                \ncleanUp()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/drag-drop/drag-drop.component.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteFile\n                        \n                    \n                \n            \n            \n                \ndeleteFile(index: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/drag-drop/drag-drop.component.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submitCheck\n                        \n                    \n                \n            \n            \n                \nsubmitCheck(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/drag-drop/drag-drop.component.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transformEvent\n                        \n                    \n                \n            \n            \n                \ntransformEvent(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/drag-drop/drag-drop.component.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        upload\n                        \n                    \n                \n            \n            \n                \nupload()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/drag-drop/drag-drop.component.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dragdropService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DragDropService\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/drag-drop/drag-drop.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fileArr\n                        \n                    \n                \n            \n                \n                    \n                        Type :     File[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/lib/drag-drop/drag-drop.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filesSelected\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/lib/drag-drop/drag-drop.component.ts:45\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {HttpContext} from \"@angular/common/http\";\nimport {Component, Input} from \"@angular/core\";\n\nimport {DragDropService} from \"./drag-drop.service\";\n\n@Component({\n  selector: \"drag-drop\",\n  templateUrl: \"./drag-drop.component.html\",\n})\nexport class DragDropComponent {\n  // defines the vertical height of the component\n  @Input(\"height\")\n  height: string = \"20vh\";\n\n  // set the file limit to be uploaded in one session\n  @Input(\"file-limit\")\n  fileLimit: number = 5;\n\n  /**\n   * set the url-end of the api-service to reach. \n   * Because of the httpcontext, adjust the webpack.config.ts, \n   * if you want to add another (local) environment.\n   */\n  @Input(\"api-url\")\n  apiUrl: string | undefined;\n\n  // set the valueName for the request to the api\n  @Input(\"value-name\")\n  valueName: string | undefined;\n\n  /**\n   * send extra information regarding the http context with the request\n   * @Input http-context new http context with self defined flags\n   */\n  @Input(\"http-context\")\n  httpContext: HttpContext | undefined;\n\n\n  constructor(public dragdropService: DragDropService) { }\n\n  // Array of files being displayed\n  fileArr: File[] = [];\n\n  // bool to change view for checking files\n  filesSelected = false;\n\n  // create array from files and change view\n  submitCheck(event: any) {\n    let files = this.transformEvent(event);\n\n    if (this.checkAllowed(files.length)) {\n      this.fileArr = this.fileArr.concat(this.checkForDuplicates(files));\n      this.filesSelected = true;\n    }\n  }\n\n  //transform event from drop or click to Array\n  transformEvent(event: any): Array {\n    let files: File[] = [];\n\n    if (event.target.files) {\n      files = Array.from(event.target.files);\n    } else {\n      if (event.dataTransfer.files) {\n        files = Array.from(event.dataTransfer.files);\n      }\n    }\n\n    return files;\n  }\n\n  // check if number of files are allowed\n  checkAllowed(fileLength: number): boolean {\n    let hypothetical_files = this.fileArr.length + fileLength;\n\n    if (hypothetical_files > this.fileLimit) {\n      alert(\"Only \" + this.fileLimit + \" files allowed\");\n      return false;\n    }\n\n    return true;\n  }\n\n  /* \n  checks for duplicates before uploading to the server.\n  returns an Array of the selected files\n  */\n  checkForDuplicates(files: File[]): File[] {\n    let selectList: File[] = [];\n\n    files.forEach((file: File) => {\n      if (\n        this.fileArr.find(\n          (selectedFile) =>\n            selectedFile.name === file.name && selectedFile.size === file.size\n        )\n      ) {\n        alert(\"Duplicate file found: \" + file.name);\n      } else {\n        selectList.push(file);\n      }\n    });\n\n    selectList = Array.from(selectList);\n\n    return selectList;\n  }\n\n  cleanUp(): void {\n    this.fileArr = [];\n    this.filesSelected = false;\n  }\n\n  // delete a file from the fileArr\n  deleteFile(index: number): void {\n    this.fileArr.splice(index, 1);\n\n    if (this.fileArr.length === 0) {\n      this.cleanUp();\n    }\n  }\n\n  // tries to upload a List of Files and subscribes to them\n  upload() {\n    // create a value holding the return status of the post request\n    const upload = this.dragdropService.postFiles(\n      this.fileArr,\n      this.apiUrl,\n      this.valueName,\n      this.httpContext\n    );\n\n    // subscribe to the value to finish the request\n    upload.subscribe({\n      next: (response) => {\n        alert(response);\n        this.cleanUp();\n      },\n      error: (error) => {\n        console.log(error);\n      },\n    });\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        Choose a file or drag here\n      \n      \n    \n  \n\n  \n    \n      \n        \n          {{ file.name }}\n          \n            \n              Del\n            \n          \n        \n      \n    \n  \n\n\n\n  \n    Submit\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Choose a file or drag here                                                {{ file.name }}                                    Del                                                Submit  '\n    var COMPONENTS = [{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'DragDropComponent', 'selector': 'drag-drop'},{'name': 'IfcComponent', 'selector': 'ifc'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaCalendarDirective', 'selector': '[type=\"date\"]'},{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'},{'name': 'DragDropDirective', 'selector': '[dragDropDirective]'}];\n    var ACTUAL_COMPONENT = {'name': 'DragDropComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DragDropDirective.html":{"url":"directives/DragDropDirective.html","title":"directive - DragDropDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  DragDropDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/drag-drop/drag-drop.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [dragDropDirective]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                background\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                dragLeave\n                            \n                            \n                                    \n                                dragOver\n                            \n                            \n                                    \n                                drop\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                fileDropped\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                style.background-color\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                dragleave\n                            \n                            \n                                dragover\n                            \n                            \n                                drop\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        fileDropped\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/drag-drop/drag-drop.directive.ts:16\n                            \n                        \n            \n        \n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        style.background-color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '#ffffff'\n                    \n                \n                    \n                        \n                                Defined in src/lib/drag-drop/drag-drop.directive.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            dragleave\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in src/lib/drag-drop/drag-drop.directive.ts:28\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            dragover\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in src/lib/drag-drop/drag-drop.directive.ts:21\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            drop\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in src/lib/drag-drop/drag-drop.directive.ts:35\n                \n            \n\n\n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        dragLeave\n                        \n                    \n                \n            \n            \n                \n                    \n                    dragLeave(event: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('dragleave', ['$event'])\n                \n            \n\n            \n                \n                    Defined in src/lib/drag-drop/drag-drop.directive.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        dragOver\n                        \n                    \n                \n            \n            \n                \n                    \n                    dragOver(event: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('dragover', ['$event'])\n                \n            \n\n            \n                \n                    Defined in src/lib/drag-drop/drag-drop.directive.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        drop\n                        \n                    \n                \n            \n            \n                \n                    \n                    drop(event: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('drop', ['$event'])\n                \n            \n\n            \n                \n                    Defined in src/lib/drag-drop/drag-drop.directive.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        background\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '#ffffff'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('style.background-color')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/drag-drop/drag-drop.directive.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n  HostBinding,\n  Directive,\n  EventEmitter,\n  HostListener,\n  Output\n} from \"@angular/core\";\n\n@Directive({\n  selector: '[dragDropDirective]',\n})\n\n//imports drag and drop functionality\nexport class DragDropDirective {\n  // Outputs an EventEmitter to use\n  @Output() fileDropped = new EventEmitter();\n\n  @HostBinding('style.background-color') private background = '#ffffff';\n\n  // Dragover Event\n  @HostListener('dragover', ['$event']) dragOver(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.background = '#e2eefd';\n  }\n\n  // Dragleave Event\n  @HostListener('dragleave', ['$event']) dragLeave(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.background = '#ffffff';\n  }\n\n  // Drop Event\n  @HostListener('drop', ['$event']) drop(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.background = '#ffffff';\n\n    this.fileDropped.emit(event);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DragDropService.html":{"url":"injectables/DragDropService.html","title":"injectable - DragDropService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DragDropService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/drag-drop/drag-drop.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                httpBaseContext\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleError\n                            \n                            \n                                postFiles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/lib/drag-drop/drag-drop.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleError\n                        \n                    \n                \n            \n            \n                \nhandleError(msg: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/drag-drop/drag-drop.service.ts:72\n                \n            \n\n\n            \n                \n                    creates an Observable with an error to subscribe to it and logs the information in the console.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    msg\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        error meesage\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        observable with contained error.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postFiles\n                        \n                    \n                \n            \n            \n                \npostFiles(files: File[], apiUrl?: string, listName?: string, httpContext?: HttpContext)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/drag-drop/drag-drop.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    apiUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    listName\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    httpContext\n                                    \n                                            HttpContext\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        httpBaseContext\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpContext\n\n                    \n                \n                \n                    \n                        Default value : new HttpContext()\n    .set(USE_API_URL, true)\n    .set(USE_LOADER, false)\n    .set(USE_ERROR_HANDLER, 1)\n                    \n                \n                    \n                        \n                                Defined in src/lib/drag-drop/drag-drop.service.ts:19\n                        \n                    \n\n            \n                \n                    httpContext with base values, in order to prevent the request from having no context at all.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {HttpClient, HttpContext} from \"@angular/common/http\";\nimport {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\n\nimport {USE_API_URL} from \"../http-context/use-api-url\";\nimport {USE_LOADER} from \"../http-context/use-loader\";\nimport {USE_ERROR_HANDLER} from \"../http-context/use-error-handler\";\n\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class DragDropService {\n  constructor(private http: HttpClient) { }\n\n  /**\n   * httpContext with base values, in order to prevent the request from having no context at all.\n   */\n  httpBaseContext: HttpContext = new HttpContext()\n    .set(USE_API_URL, true)\n    .set(USE_LOADER, false)\n    .set(USE_ERROR_HANDLER, 1);\n\n\n  /* \n  adds all files to a formdata object, sends post request and returns res\n  @param files: a list of files to be uploaded\n  @param apiUrL: the URL where to upload the files to\n  @param listName: name of the fileList to identify it at the server side\n  @param httpContext: a context for extra functionality regarding the http-context component in common\n  */\n  postFiles(files: File[], apiUrl?: string, listName?: string, httpContext?: HttpContext): Observable {\n\n    let formData: FormData = new FormData();\n\n    if (!files) {\n      return this.handleError(\"There are no files to upload\");\n    }\n\n    if (!apiUrl) {\n      return this.handleError(\"No URL provided\");\n    }\n\n    if (!listName) {\n      return this.handleError(\"No name provided for the list of files\");\n    } else {\n      for (let file of files) {\n        formData.append(listName, file);\n      }\n    }\n\n    let ctx;\n    if (!httpContext) {\n      ctx = this.httpBaseContext;\n      console.log(\"BaseHttpContext provided automatically\")\n    } else {\n      ctx = httpContext;\n    }\n\n    return this.http.post(apiUrl, formData, {\n      responseType: \"text\",\n      context: ctx\n    });\n\n  }\n\n  /**\n     * creates an Observable with an error to subscribe to it and logs the information in the console.\n     * @param msg error meesage\n     * @returns observable with contained error.\n     */\n  handleError(msg: string): Observable {\n\n    return new Observable((observer) => {\n      observer.error(new Error(msg));\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorHttpContextToken.html":{"url":"classes/ErrorHttpContextToken.html","title":"class - ErrorHttpContextToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorHttpContextToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/http-context/use-error-handler.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the HttpContextToken class to expose the ErrorHandler\nenum.\nThis class allows accessing the ErrorHandler enum through the\nUSE_ERROR_HANDLER token.\n\n            \n\n            \n                Extends\n            \n            \n                    HttpContextToken\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                handler\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        handler\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ErrorHandler\n                    \n                \n                    \n                        \n                                Defined in src/lib/http-context/use-error-handler.ts:40\n                        \n                    \n\n            \n                \n                    Re-export of the ErrorHandler enum for accessing it via the\nUSE_ERROR_HANDLER token.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {HttpContextToken} from \"@angular/common/http\";\n\n/**\n * Variants of the error handler.\n *\n * This enum is exposed via the {@link USE_ERROR_HANDLER#handler} property.\n */\nenum ErrorHandler {\n  /**\n   * Raise a curtain displaying the error message and covering the whole main\n   * container.\n   */\n  CURTAIN,\n\n  /**\n   * Spawn a small toast notification displaying the error and allowing further\n   * use of the main container.\n   */\n  TOAST,\n\n  /**\n   * The error is passed through and should be handled by the implementor.\n   */\n  CUSTOM,\n}\n\n/**\n * Extension of the HttpContextToken class to expose the {@link ErrorHandler}\n * enum.\n *\n * This class allows accessing the {@link ErrorHandler} enum through the\n * {@link USE_ERROR_HANDLER} token.\n */\nclass ErrorHttpContextToken extends HttpContextToken {\n\n  /**\n   * Re-export of the {@link ErrorHandler} enum for accessing it via the\n   * {@link USE_ERROR_HANDLER} token.\n   */\n  readonly handler = ErrorHandler;\n}\n\n/**\n * {@link HttpContextToken} used to determine how HTTP errors should be handled.\n *\n * The enum associated with this token has three variants that define the behavior\n * when an error occurs:\n *\n * - `CURTAIN`: Raise a curtain displaying the error message and covering the\n *   entire main container.\n *\n * - `TOAST`: Display a small toast notification showing the error and allowing\n *   continued use of the main container.\n *\n * - `CUSTOM`: The error is passed through and should be handled by the implementor.\n *\n * This token defaults to {@link ErrorHandler#CURTAIN}.\n */\nexport const USE_ERROR_HANDLER = new ErrorHttpContextToken(() => ErrorHandler.CURTAIN);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/IfcComponent.html":{"url":"components/IfcComponent.html","title":"component - IfcComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  IfcComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/ifc/ifc.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component for displaying IFC models.\n\n    \n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n                OnDestroy\n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ifc\n            \n\n\n\n\n\n            \n                template\n                \n  \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isDestroyed\n                            \n                            \n                                loadedModels\n                            \n                            \n                                    Private\n                                modelLoadAbort\n                            \n                            \n                                    Private\n                                modelLoadDone\n                            \n                            \n                                    Private\n                                models\n                            \n                            \n                                    \n                                    Private\n                                resizeContainer\n                            \n                            \n                                    Private\n                                    Optional\n                                resizeObserver\n                            \n                            \n                                    Optional\n                                viewer\n                            \n                            \n                                    \n                                    Private\n                                viewerContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hideModel\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                    Async\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                showModel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                height\n                            \n                            \n                                models\n                            \n                            \n                                picking\n                            \n                            \n                                recursive\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                selected\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: IfcService, loader: LoaderInjector, translate: TranslateService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ifc/ifc.component.ts:170\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        IfcService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                IFC service to lazily fetch models\n\n                                                        \n                                                \n                                                \n                                                        loader\n                                                  \n                                                        \n                                                                        LoaderInjector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Loader injector to lower the loading curtain while loading models\n\n                                                        \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Translate service to translate loading text\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"70vh\"\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ifc/ifc.component.ts:79\n                            \n                        \n                \n                    \n                        Input for the height of the component.\nThe height should be adjusted by this property to allow the renderer to\ncorrectly output the height.\nThe width is dynamically inferred.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        models\n                    \n                \n                \n                    \n                        Type :         InputModels\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ifc/ifc.component.ts:101\n                            \n                        \n                \n                    \n                        Input for the models that should be displayed.\nThe keys of the given record will be used for the show and hide functions.\nThe order of the given record is respected at any time, the first model\nwill define the coordinate system used by all models.\nThe finally fully loaded models will also have the ordering given by this\nrecord.\nExample:\nSee ModelEntry\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        picking\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ifc/ifc.component.ts:105\n                            \n                        \n                \n                    \n                        Input indicating whether picking should be enabled.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        recursive\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ifc/ifc.component.ts:109\n                            \n                        \n                \n                    \n                        Input indicating whether the picker should load object data recursively.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        selected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ifc/ifc.component.ts:120\n                            \n                        \n                \n                    \n                        Output for the selected model.\nThis event is emitted when a model is selected if picking is enabled.\nThe event data is a JSON object representing the selected model.\nThe specific structure of the object depends on the model and needs to be\ninferred by other means.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hideModel\n                        \n                    \n                \n            \n            \n                \nhideModel(model: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ifc/ifc.component.ts:319\n                \n            \n\n\n            \n                \n                    Hides a model from the viewer.\nThis function ensures that no errors occur, but it does not keep a queue\nof all the models to be hidden.\nIf called too early, the models cannot be hidden.\nTo avoid race conditions, await the loadedModels promise.\nTo hide a model from the start, set the visible property of the\ncorresponding model entry in inputModels to false.\nModels with the fixed property set to true cannot be hidden using this\nfunction.\nIt is recommended to use this function to hide models from the viewer\ninstead of hiding them manually via the viewer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The model to hide, using the keys from inputModels\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ifc/ifc.component.ts:203\n                \n            \n\n\n            \n                \n                    Main function of this component.\nAfter the view is initialized, this function prepares the viewer\nand loads all the models for loadedModels.\nWhile loading, the loading curtain will be lowered.\nWhen loading is complete, loadedModels is resolved, and\nviewer can be used.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ifc/ifc.component.ts:345\n                \n            \n\n\n            \n                \n                    Disconnects the resizeObserver and clears the memory from the\nmodels of the viewer.\nThis ensures that models will no longer be loaded when this\ncomponent is destroyed.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ifc/ifc.component.ts:185\n                \n            \n\n\n            \n                \n                    Prepares the loadedModels promise.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showModel\n                        \n                    \n                \n            \n            \n                \nshowModel(model: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ifc/ifc.component.ts:334\n                \n            \n\n\n            \n                \n                    Shows a model in the viewer.\nThis function ensures that no errors occur, but it does not keep a queue\nof all the models to be shown.\nIf called too early, the models cannot be shown.\nTo avoid race conditions, await the loadedModels promise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The model to show, using the keys from inputModels\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isDestroyed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/lib/ifc/ifc.component.ts:170\n                        \n                    \n\n            \n                \n                    Flag whether this component is destroyed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadedModels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Promise\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/ifc/ifc.component.ts:145\n                        \n                    \n\n            \n                \n                    A promise for the loaded IFC models.\nThis promise resolves with the loaded models when the viewer has fully\nloaded them.\nIt may also be rejected if the component is destroyed before fully loading\nthe models.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        modelLoadAbort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/ifc/ifc.component.ts:167\n                        \n                    \n\n            \n                \n                    Reject function for the loadedModels promise.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        modelLoadDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/ifc/ifc.component.ts:165\n                        \n                    \n\n            \n                \n                    Resolve function for the loadedModels promise.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        models\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoadedModels\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/lib/ifc/ifc.component.ts:162\n                        \n                    \n\n            \n                \n                    Models loaded by this component.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        resizeContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('resizeContainer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/ifc/ifc.component.ts:153\n                        \n                    \n\n            \n                \n                    Container for the resizeObserver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        resizeObserver\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ResizeObserver\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/ifc/ifc.component.ts:159\n                        \n                    \n\n            \n                \n                    Resize observer detecting changes on the resizeContainer to update\nthe size of the viewerContainer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        viewer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     IfcViewerAPI\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/ifc/ifc.component.ts:135\n                        \n                    \n\n            \n                \n                    Ifc viewer containing every interaction with the viewer.\nAttention: This viewer is only fully available after the models have\nfully loaded.\nTo avoid race conditions await the loadedModels.\nBeware of directly using this viewer, as it may not be easy to use directly.\nMost important interactions are available via the loadedModels and\nselectedModel properties.\nSee https://ifcjs.github.io/info/docs/Guide/web-ifc-viewer/web-ifc-viewer-API\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        viewerContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('viewerContainer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/ifc/ifc.component.ts:149\n                        \n                    \n\n            \n                \n                    Container for the viewer.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n  ViewChild,\n  Component,\n  OnDestroy,\n  EventEmitter,\n  OnInit,\n  AfterViewInit,\n  Input,\n  Output,\n  ElementRef\n} from \"@angular/core\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {JSONObject} from \"web-ifc-three/IFC/BaseDefinitions\";\nimport {IFCModel} from \"web-ifc-three/IFC/components/IFCModel\";\nimport {IfcViewerAPI} from \"web-ifc-viewer\";\n\nimport {IfcService} from \"./ifc.service\";\nimport {LoaderInjector} from \"../loader/loader.injector\";\n\nexport namespace IfcComponent {\n  /**\n   * Model entry.\n   */\n  export type ModelEntry = {\n    /** Specifies the path to the IFC model file. */\n    path: string,\n\n    /**\n     * Indicates whether the model should be displayed after loading.\n     * This is optional, with the model being visible by default.\n     */\n    visible?: boolean,\n\n    /**\n     * Denotes whether this model's visibility can be altered.\n     * This is optional, with the model being disable-able by default.\n     */\n    fixed?: boolean,\n\n    /**\n     * Decides whether this model should be adjusted to fit within the frame.\n     * This is recommended to be set only for one model.\n     * This is optional, with the model not fitting to frame by default.\n     */\n    fitToFrame?: boolean,\n\n    /**\n     * Decides whether to use caching on this model.\n     * This is recommended for static models with static paths.\n     * This is optional, caching is enabled by default.\n     */\n    cache?: boolean\n  };\n}\n\ntype ModelEntry = IfcComponent.ModelEntry;\ntype InputModels = Record;\ntype LoadedModels = Record;\n\n/** Component for displaying IFC models. */\n@Component({\n  selector: 'ifc',\n  template: `\n    \n      \n    \n  `\n})\nexport class IfcComponent implements AfterViewInit, OnDestroy, OnInit {\n\n  /**\n   * Input for the height of the component.\n   *\n   * The height should be adjusted by this property to allow the renderer to\n   * correctly output the height.\n   * The width is dynamically inferred.\n   */\n  @Input()\n  height = \"70vh\";\n\n  /**\n   * Input for the models that should be displayed.\n   *\n   * The keys of the given record will be used for the show and hide functions.\n   * The order of the given record is respected at any time, the first model\n   * will define the coordinate system used by all models.\n   * The finally fully loaded models will also have the ordering given by this\n   * record.\n   *\n   * **Example**:\n   * ```\n   * \n   * ```\n   *\n   * @see ModelEntry\n   */\n  @Input(\"models\")\n  inputModels: InputModels = {};\n\n  /** Input indicating whether picking should be enabled. */\n  @Input(\"picking\")\n  usePicking: boolean = false;\n\n  /** Input indicating whether the picker should load object data recursively. */\n  @Input(\"recursive\")\n  useRecursive: boolean = false;\n\n  /**\n   * Output for the selected model.\n   *\n   * This event is emitted when a model is selected if picking is enabled.\n   * The event data is a JSON object representing the selected model.\n   * The specific structure of the object depends on the model and needs to be\n   * inferred by other means.\n   */\n  @Output(\"selected\")\n  selectedModel: EventEmitter = new EventEmitter();\n\n  /**\n   * Ifc viewer containing every interaction with the viewer.\n   *\n   * **Attention**: This viewer is only fully available after the models have\n   * fully loaded.\n   * To avoid race conditions await the {@link loadedModels}.\n   *\n   * Beware of directly using this viewer, as it may not be easy to use directly.\n   * Most important interactions are available via the {@link loadedModels} and\n   * {@link selectedModel} properties.\n   *\n   * @see https://ifcjs.github.io/info/docs/Guide/web-ifc-viewer/web-ifc-viewer-API\n   */\n  viewer?: IfcViewerAPI;\n\n  /**\n   * A promise for the loaded IFC models.\n   *\n   * This promise resolves with the loaded models when the viewer has fully\n   * loaded them.\n   * It may also be rejected if the component is destroyed before fully loading\n   * the models.\n   */\n  loadedModels!: Promise;\n\n  /** Container for the viewer. */\n  @ViewChild(\"viewerContainer\")\n  private viewerContainer!: ElementRef;\n\n  /** Container for the {@link resizeObserver}. */\n  @ViewChild(\"resizeContainer\")\n  private resizeContainer!: ElementRef;\n\n  /**\n   * Resize observer detecting changes on the {@link resizeContainer} to update\n   * the size of the {@link viewerContainer}.\n   */\n  private resizeObserver?: ResizeObserver;\n\n  /** Models loaded by this component. */\n  private models: LoadedModels = {};\n\n  /** Resolve function for the {@link loadedModels} promise. */\n  private modelLoadDone!: (value: LoadedModels) => void;\n  /** Reject function for the {@link loadedModels} promise. */\n  private modelLoadAbort!: () => void;\n\n  /** Flag whether this component is destroyed. */\n  private isDestroyed: boolean = false;\n\n  /**\n   * Constructor.\n   * @param service IFC service to lazily fetch models\n   * @param loader Loader injector to lower the loading curtain while loading models\n   * @param translate Translate service to translate loading text\n   */\n  constructor(\n    private service: IfcService,\n    private loader: LoaderInjector,\n    private translate: TranslateService\n  ) {}\n\n  /** Prepares the {@link loadedModels} promise. */\n  ngOnInit(): void {\n    this.loadedModels = new Promise((resolve, reject) => {\n      this.modelLoadDone = resolve;\n      this.modelLoadAbort = reject;\n    });\n  }\n\n  /**\n   * Main function of this component.\n   *\n   * After the view is initialized, this function prepares the {@link viewer}\n   * and loads all the models for {@link loadedModels}.\n   *\n   * While loading, the loading curtain will be lowered.\n   *\n   * When loading is complete, {@link loadedModels} is resolved, and\n   * {@link viewer} can be used.\n   */\n  ngAfterViewInit(): Promise {\n    const loadAll: Promise = new Promise(async allLoaded => {\n      // make code clearer by this alias\n      const abort = allLoaded;\n\n      // @ts-ignore the models do not have the ifcModel at this point, but this\n      // is fine\n      this.models = this.inputModels;\n      const container = this.viewerContainer.nativeElement;\n\n      // set initial width and height to properly render, after load is done,\n      // resize will fix this size\n      container.style.width = \"500px\";\n      container.style.height = \"500px\";\n\n      // initialize ifc viewer\n      this.viewer = new IfcViewerAPI({container});\n      await this.viewer.IFC.loader.ifcManager.useWebWorkers(true, \"IFCWorker.js\");\n\n      // fetch models from path or local db\n      let fetchModels = [];\n      for (let [model, opts] of Object.entries(this.inputModels)) {\n        let {path, cache} = opts;\n        fetchModels.push(\n          this.service.fetchModel(path, cache === false)\n            .then(file => [model, Object.assign({}, opts, {file})])\n        );\n      }\n      let fetchedInput: Record =\n        Object.fromEntries(await Promise.all(fetchModels));\n\n      // load models\n      let modelIter = Object.entries(fetchedInput);\n      const loadModel = async (modelEntry: typeof modelIter[0], first: boolean) => {\n        const [model, opts] = modelEntry;\n        const {file, fitToFrame, visible, path, fixed} = opts;\n\n        // COORDINATE_TO_ORIGIN sets the origin of the model\n        // only first run should align this, the other should use same system\n        await this.viewer!.IFC.loader.ifcManager.applyWebIfcConfig({\n          USE_FAST_BOOLS: true,\n          COORDINATE_TO_ORIGIN: first\n        });\n        const ifcModel = await this.viewer!.IFC.loadIfc(file, fitToFrame);\n\n        // this just hides model from scene\n        if (visible === false) this.viewer!.context.scene.removeModel(ifcModel);\n        this.models[model].ifcModel = ifcModel;\n      };\n\n      let first = true;\n      let count = modelIter.length;\n      for (let i in modelIter) {\n        // do not load another model if this component is destroyed\n        if (this.isDestroyed) {\n          abort();\n          this.modelLoadAbort();\n          return;\n        }\n\n        let loading = loadModel(modelIter[i], first);\n        first = false;\n        // TODO: clean this translation up\n        let translated = this.translate.instant(\"common.ifc.loading\");\n        this.loader.addLoader(loading, `${translated} [${+i + 1}/${count}]`);\n        await loading;\n      }\n\n      // initialize observer to automatically resize ifc viewer\n      this.resizeObserver = new ResizeObserver(entries => {\n        container.style.width = entries[0].contentRect.width + \"px\";\n        container.style.height = entries[0].contentRect.height + \"px\";\n        this.viewer!.context.updateAspect();\n      });\n      this.resizeObserver.observe(this.resizeContainer.nativeElement);\n\n      // everything is loaded, allow curtain to rise\n      allLoaded();\n      this.modelLoadDone(this.models);\n\n      // if picking is disabled, return here, otherwise add events for picking\n      if (!this.usePicking) return;\n\n      this.viewerContainer.nativeElement.onmousemove = () => {\n        this.viewer!.IFC.selector.prePickIfcItem();\n      };\n\n      this.viewerContainer.nativeElement.onclick = async () => {\n        const picked = await this.viewer!.IFC.selector.pickIfcItem();\n        if (!picked) return;\n        const {modelID, id} = picked;\n        const props = await this.viewer!.IFC.getProperties(modelID, id, true, this.useRecursive);\n        this.selectedModel.emit(props);\n      };\n    });\n\n    this.loader.addLoader(loadAll);\n    return loadAll;\n  }\n\n  /**\n   * Hides a model from the viewer.\n   *\n   * This function ensures that no errors occur, but it does not keep a queue\n   * of all the models to be hidden.\n   * If called too early, the models cannot be hidden.\n   * To avoid race conditions, await the {@link loadedModels} promise.\n   * To hide a model from the start, set the `visible` property of the\n   * corresponding model entry in {@link inputModels} to `false`.\n   * Models with the `fixed` property set to `true` cannot be hidden using this\n   * function.\n   * It is recommended to use this function to hide models from the viewer\n   * instead of hiding them manually via the {@link viewer}.\n   *\n   * @param model The model to hide, using the keys from {@link inputModels}\n   */\n  hideModel(model: string) {\n    if (this.models[model].fixed) return;\n    if (this.viewer) this.viewer.context.scene.removeModel(this.models[model].ifcModel);\n  }\n\n  /**\n   * Shows a model in the viewer.\n   *\n   * This function ensures that no errors occur, but it does not keep a queue\n   * of all the models to be shown.\n   * If called too early, the models cannot be shown.\n   * To avoid race conditions, await the {@link loadedModels} promise.\n   *\n   * @param model The model to show, using the keys from {@link inputModels}\n   */\n  showModel(model: string) {\n    if (this.viewer) this.viewer.context.scene.addModel(this.models[model].ifcModel);\n  }\n\n  /**\n   * Disconnects the {@link resizeObserver} and clears the memory from the\n   * models of the {@link viewer}.\n   *\n   * This ensures that models will no longer be loaded when this\n   * component is destroyed.\n   */\n  async ngOnDestroy(): Promise {\n    this.isDestroyed = true;\n    if (this.resizeObserver) this.resizeObserver.disconnect();\n    if (this.viewer) await this.viewer.dispose();\n  }\n\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'DragDropComponent', 'selector': 'drag-drop'},{'name': 'IfcComponent', 'selector': 'ifc'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaCalendarDirective', 'selector': '[type=\"date\"]'},{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'},{'name': 'DragDropDirective', 'selector': '[dragDropDirective]'}];\n    var ACTUAL_COMPONENT = {'name': 'IfcComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IfcDB.html":{"url":"interfaces/IfcDB.html","title":"interface - IfcDB","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IfcDB\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ifc/ifc.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The schema the ifc db uses.\n\n            \n\n            \n                Extends\n            \n            \n                    DBSchema\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            models\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        models\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        models:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Cached IFC models.\nThe key is the path where the model is found.\nThe value is the raw bytes of the model stored as a Blob.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {HttpClient, HttpContext} from \"@angular/common/http\";\nimport {Injectable} from \"@angular/core\";\nimport {openDB, DBSchema} from \"idb\";\nimport {firstValueFrom} from \"rxjs\";\n\nimport {USE_LOADER} from \"../http-context/use-loader\";\n\n/** Indexed DB name. */\nconst DB_NAME = \"ifc-db\";\n\n/** Indexed DB schema version. */\nconst SCHEMA_V = 1;\n\n/** The schema the ifc db uses. */\ninterface IfcDB extends DBSchema {\n  /**\n   * Cached IFC models.\n   *\n   * The key is the path where the model is found.\n   *\n   * The value is the raw bytes of the model stored as a Blob.\n   */\n  models: {\n    key: string,\n    value: Blob\n  }\n}\n\n/**\n * Service to lazily fetch IFC models.\n * The fetch will try to load from the local indexed db first.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class IfcService {\n\n  /** Indexed DB client. */\n  private readonly idb;\n\n  /**\n   * Constructor.\n   * @param http Client to request geo data\n   */\n  constructor(private http: HttpClient) {\n    this.idb = openDB(DB_NAME, SCHEMA_V, {\n      upgrade(db, oldV) {\n        if (oldV) db.deleteObjectStore(\"models\");\n        db.createObjectStore(\"models\");\n      }\n    });\n  }\n\n  /**\n   * Asynchronously fetch IFC models.\n   *\n   * Will only fetch data if not already stored in the indexedDB.\n   * @param path The path where to download model from, will also be the cache key\n   * @param force If true, this will ignore the cache and request everything\n   */\n  async fetchModel(path: string, force: boolean = false): Promise {\n    const idb = await this.idb;\n    let dbBlob = force ? undefined : await idb.get(\"models\", path);\n    if (dbBlob) return new File([dbBlob], path);\n    let res = await firstValueFrom(this.http.get(path, {\n      responseType: \"blob\",\n      context: new HttpContext().set(USE_LOADER, \"common.ifc.fetching\")\n    }));\n    await idb.put(\"models\", res, path);\n    return new File([res], path);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IfcService.html":{"url":"injectables/IfcService.html","title":"injectable - IfcService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IfcService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ifc/ifc.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to lazily fetch IFC models.\nThe fetch will try to load from the local indexed db first.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                idb\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                fetchModel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ifc/ifc.service.ts:39\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Client to request geo data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchModel\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchModel(path: string, force: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ifc/ifc.service.ts:61\n                \n            \n\n\n            \n                \n                    Asynchronously fetch IFC models.\nWill only fetch data if not already stored in the indexedDB.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The path where to download model from, will also be the cache key\n\n                                    \n                                \n                                \n                                    force\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        If true, this will ignore the cache and request everything\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        idb\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/lib/ifc/ifc.service.ts:39\n                        \n                    \n\n            \n                \n                    Indexed DB client.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {HttpClient, HttpContext} from \"@angular/common/http\";\nimport {Injectable} from \"@angular/core\";\nimport {openDB, DBSchema} from \"idb\";\nimport {firstValueFrom} from \"rxjs\";\n\nimport {USE_LOADER} from \"../http-context/use-loader\";\n\n/** Indexed DB name. */\nconst DB_NAME = \"ifc-db\";\n\n/** Indexed DB schema version. */\nconst SCHEMA_V = 1;\n\n/** The schema the ifc db uses. */\ninterface IfcDB extends DBSchema {\n  /**\n   * Cached IFC models.\n   *\n   * The key is the path where the model is found.\n   *\n   * The value is the raw bytes of the model stored as a Blob.\n   */\n  models: {\n    key: string,\n    value: Blob\n  }\n}\n\n/**\n * Service to lazily fetch IFC models.\n * The fetch will try to load from the local indexed db first.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class IfcService {\n\n  /** Indexed DB client. */\n  private readonly idb;\n\n  /**\n   * Constructor.\n   * @param http Client to request geo data\n   */\n  constructor(private http: HttpClient) {\n    this.idb = openDB(DB_NAME, SCHEMA_V, {\n      upgrade(db, oldV) {\n        if (oldV) db.deleteObjectStore(\"models\");\n        db.createObjectStore(\"models\");\n      }\n    });\n  }\n\n  /**\n   * Asynchronously fetch IFC models.\n   *\n   * Will only fetch data if not already stored in the indexedDB.\n   * @param path The path where to download model from, will also be the cache key\n   * @param force If true, this will ignore the cache and request everything\n   */\n  async fetchModel(path: string, force: boolean = false): Promise {\n    const idb = await this.idb;\n    let dbBlob = force ? undefined : await idb.get(\"models\", path);\n    if (dbBlob) return new File([dbBlob], path);\n    let res = await firstValueFrom(this.http.get(path, {\n      responseType: \"blob\",\n      context: new HttpContext().set(USE_LOADER, \"common.ifc.fetching\")\n    }));\n    await idb.put(\"models\", res, path);\n    return new File([res], path);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/IonIconComponent.html":{"url":"components/IonIconComponent.html","title":"component - IonIconComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  IonIconComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/ion-icon/ion-icon.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component is used to inject the icons from IonIcons.\nIonIcons uses WebComponents to display the icons.\nTo allow to use them here, this component adds the icons via js.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ion-icon\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(elRef: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ion-icon/ion-icon.component.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Element reference to itself\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ion-icon/ion-icon.component.ts:31\n                            \n                        \n                \n                    \n                        The name of the icon.\nIs not used by angular but needed to render the correct icon and necessary\nso that angular stops complaining.\nThis setter also directly modifies the native element to have the \"name\"\ndirectly as an attribute which is needed to make ion icons work.\nYou can find the names at the official website\nhttps://ionic.io/ionicons.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n\n                \n                    \n                        setname(name: string | undefined)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/ion-icon/ion-icon.component.ts:31\n                                \n                            \n                    \n                        \n                                The name of the icon.\nIs not used by angular but needed to render the correct icon and necessary\nso that angular stops complaining.\nThis setter also directly modifies the native element to have the \"name\"\ndirectly as an attribute which is needed to make ion icons work.\nYou can find the names at the official website\nhttps://ionic.io/ionicons.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            name\n                                                    \n                                                            \n                                                                        string | undefined\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {Component, Input, ElementRef} from \"@angular/core\";\n\n/**\n * This component is used to inject the icons from IonIcons.\n * IonIcons uses WebComponents to display the icons.\n * To allow to use them here, this component adds the icons via js.\n */\n@Component({\n  selector: \"ion-icon\",\n  template: \"\"\n})\nexport class IonIconComponent {\n\n  /**\n   * Constructor.\n   * @param elRef Element reference to itself\n   */\n  constructor(private elRef: ElementRef) {}\n\n  /**\n   * The name of the icon.\n   * Is not used by angular but needed to render the correct icon and necessary\n   * so that angular stops complaining.\n   *\n   * This setter also directly modifies the native element to have the \"name\"\n   * directly as an attribute which is needed to make ion icons work.\n   *\n   * You can find the names at the official website\n   * {@link https://ionic.io/ionicons}.\n   */\n  @Input() set name(name: string | undefined) {\n    this.elRef.nativeElement?.setAttribute(\"name\", name);\n  };\n\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'DragDropComponent', 'selector': 'drag-drop'},{'name': 'IfcComponent', 'selector': 'ifc'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaCalendarDirective', 'selector': '[type=\"date\"]'},{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'},{'name': 'DragDropDirective', 'selector': '[dragDropDirective]'}];\n    var ACTUAL_COMPONENT = {'name': 'IonIconComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LayerData.html":{"url":"interfaces/LayerData.html","title":"interface - LayerData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LayerData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/layer-data.ts\n        \n\n\n            \n                Description\n            \n            \n                Type to represent layer data received from the geo data server.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            box\n                                        \n                                \n                                \n                                        \n                                            shapes\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        box\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        box:     [, , , ]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [, , , ]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Corner coordinates of a box containing all the shapes this displays.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shapes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shapes:         ShapeData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ShapeData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of shapes.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {GeoJsonObject} from \"geojson\";\n\nimport * as L from \"leaflet\";\n\n/** Type to represent a single shape with all of its metadata. */\nexport interface ShapeData {\n  /** Name of the shape. */\n  name: string,\n  /** Key of the shape. */\n  key: string,\n  /** Nomenclature of Territorial Units code of the shape. */\n  nutsKey: string,\n  /** GeoJson representing the shape. */\n  geoJson: GeoJsonObject\n}\n\n/** Type to represent layer data received from the geo data server. */\nexport interface LayerData {\n  /** Corner coordinates of a box containing all the shapes this displays. */\n  box: [[number, number], [number, number], [number, number], [number, number]],\n  /** List of shapes. */\n  shapes: ShapeData[]\n}\n\nexport default LayerData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoaderInjector.html":{"url":"injectables/LoaderInjector.html","title":"injectable - LoaderInjector","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoaderInjector\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/loader/loader.injector.ts\n        \n\n\n            \n                Description\n            \n            \n                Injector for the LoaderService from the core module.\nThe service in the core injects this injector and listens to emitted loaders.\nThis allows centralized logic in the core while also allowing other\ncomponents to inject custom loaders.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loaders\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addLoader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addLoader\n                        \n                    \n                \n            \n            \n                \naddLoader(toResolve: Promise, displayText?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/loader/loader.injector.ts:25\n                \n            \n\n\n            \n                \n                    Add a custom loader to the loader service.\nThis will insert the promise resolution into the frame's loader curtain.\n                   translation key\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    toResolve\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A promise that when resolved clears the loader\n\n                                    \n                                \n                                \n                                    displayText\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Text to display under the loader, may contain a\ntranslation key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        loaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EventEmitter<>\n\n                    \n                \n                \n                    \n                        Default value : new EventEmitter()\n                    \n                \n                    \n                        \n                                Defined in src/lib/loader/loader.injector.ts:16\n                        \n                    \n\n            \n                \n                    Event emitter for the loaders, do not touch this.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {EventEmitter, Injectable} from \"@angular/core\";\n\n/**\n * Injector for the `LoaderService` from the core module.\n *\n * The service in the core injects this injector and listens to emitted loaders.\n * This allows centralized logic in the core while also allowing other\n * components to inject custom loaders.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoaderInjector {\n\n  /** Event emitter for the loaders, do not touch this. */\n  loaders: EventEmitter, string?]> = new EventEmitter();\n\n  /**\n   * Add a custom loader to the loader service.\n   * This will insert the promise resolution into the frame's loader curtain.\n   * @param toResolve A promise that when resolved clears the loader\n   * @param displayText Text to display under the loader, may contain a\n   *                    translation key\n   */\n  addLoader(toResolve: Promise, displayText?: string) {\n    this.loaders.emit([toResolve, displayText]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MapComponent.html":{"url":"components/MapComponent.html","title":"component - MapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/map/map.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component for displaying maps.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                map\n            \n\n\n\n            \n                styleUrls\n                ./map.component.css\n            \n\n\n            \n                template\n                \n  \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                center\n                            \n                            \n                                height\n                            \n                            \n                                    Private\n                                layerConfig\n                            \n                            \n                                    Private\n                                layerData\n                            \n                            \n                                    Private\n                                layerNames\n                            \n                            \n                                    Optional\n                                map\n                            \n                            \n                                    \n                                    Private\n                                mapElement\n                            \n                            \n                                    Private\n                                markers\n                            \n                            \n                                    Private\n                                    Optional\n                                selectedGeoJsonLayer\n                            \n                            \n                                    Private\n                                    Optional\n                                selectedLayer\n                            \n                            \n                                    Private\n                                selectedShapes\n                            \n                            \n                                tileUrl\n                            \n                            \n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                emitSelection\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                center\n                            \n                            \n                                height\n                            \n                            \n                                layers\n                            \n                            \n                                layerSelectable\n                            \n                            \n                                markers\n                            \n                            \n                                scrollWheelZoom\n                            \n                            \n                                selectedColor\n                            \n                            \n                                tileUrl\n                            \n                            \n                                unselectedColor\n                            \n                            \n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                keyNames\n                            \n                            \n                                selected\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    inputLayers\n                                \n                                \n                                    inputMarkers\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: MapService, translate: TranslateService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/map/map.component.ts:182\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        MapService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to interact with the server for geo data\n\n                                                        \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Translation service to update resolution names\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        center\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:61\n                            \n                        \n                \n                    \n                        Input for the center coordinates of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:51\n                            \n                        \n                \n                    \n                        Input for the height of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        layers\n                    \n                \n                \n                    \n                        Type :         LayerConfig\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:125\n                            \n                        \n                \n                    \n                        Input for the layers that should be displayed.\nThe key of the record is layer key and is also emitted on the selection.\nThe value of the record is an array and the values of that should be the\nfollowing:\n\n  \n    The name of the layer, this will be only used to display a name of\n    the layer (may also be a translation key).\n  \n  \n    This should be the resolution to display the layer at, this may also\nbe\n    null to display the keys directly without any shape intersection\n    resolving.\n  \n  \n    These should be the keys used to display the shapes from.\n    If the given keys are empty or null, this will display everything from\n    the give resolution.\n  \n\n\nAttention: The service needs at least one of the resolution or the\nkeys\nto properly respond.\n```html\n// TODO: update link when geo data docs update\nSee https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n```\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        layerSelectable\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:147\n                            \n                        \n                \n                    \n                        Should the layers be selectable.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        markers\n                    \n                \n                \n                    \n                        Type :         Marker[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:150\n                            \n                        \n                \n                    \n                        Markers that should be displayed on the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        scrollWheelZoom\n                    \n                \n                \n                    \n                        Type :     boolean | \"center\"\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:74\n                            \n                        \n                \n                    \n                        Input for the option if the map should scroll zoom on mouse scroll.\nIf \"center\" is passed, the map will always zoom onto the center.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#d35a0c\"\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:79\n                            \n                        \n                \n                    \n                        Input for a hex code selected shapes.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        tileUrl\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:56\n                            \n                        \n                \n                    \n                        Input for the tile url of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        unselectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#1f5aec\"\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:77\n                            \n                        \n                \n                    \n                        Input for a hex code for unselected shapes.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        zoom\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:66\n                            \n                        \n                \n                    \n                        Input for the map zoom level.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        keyNames\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:182\n                            \n                        \n                \n                    \n                        Outputs the currently rendered keys, mapped to their names.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        selected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:175\n                            \n                        \n                \n                    \n                        Outputs the currently selected shapes.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        emitSelection\n                        \n                    \n                \n            \n            \n                \n                    \n                    emitSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:386\n                \n            \n\n\n            \n                \n                    Internally used function to emit the currently selected shapes via the\nselected output.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:235\n                \n            \n\n\n            \n                \n                    Renders the map with the given input values.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:197\n                \n            \n\n\n            \n                \n                    While init this sets the input values to the inner, private values.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        center\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"53.1434501, 8.2145521\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:63\n                        \n                    \n\n            \n                \n                    Center of the map, defaults to longitude and latitude of Oldenburg.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"500px\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:53\n                        \n                    \n\n            \n                \n                    Height of map, defaults to 500px.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        layerConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject({})\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:133\n                        \n                    \n\n            \n                \n                    Subject of the LayerConfig, to be used as\nObservable.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        layerData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject>\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject({})\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:139\n                        \n                    \n\n            \n                \n                    Subject of the pairs of Layerkey and LayerData,\nto be used as Observable.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        layerNames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:144\n                        \n                    \n\n            \n                \n                    Subject of the layer names mapped by the LayerKey.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        map\n                        \n                    \n                \n            \n                \n                    \n                        Type :     L.Map\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:157\n                        \n                    \n\n            \n                \n                    The leaflet map that is displayed here.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        mapElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('map')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:48\n                        \n                    \n\n            \n                \n                    The ref to the map html element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        markers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:154\n                        \n                    \n\n            \n                \n                    Markers Subject to be used as Observable.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        selectedGeoJsonLayer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     L.Layer\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:172\n                        \n                    \n\n            \n                \n                    The currently selected geo json layer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        selectedLayer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LayerKey\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:170\n                        \n                    \n\n            \n                \n                    The currently selected layer in the map control.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedShapes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record>\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:164\n                        \n                    \n\n            \n                \n                    Internally holds all elements that are currently selected.\nThe set holds all keys of shapes currently selected.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tileUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:58\n                        \n                    \n\n            \n                \n                    Tile url of the map, defaults to the osm.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 7\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:68\n                        \n                    \n\n            \n                \n                    Zoom level of the map, defaults to 7.\n\n                \n            \n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        inputLayers\n                    \n                \n\n\n                \n                    \n                        setinputLayers(layerConfig: LayerConfig)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/map/map.component.ts:125\n                                \n                            \n                    \n                        \n                                Input for the layers that should be displayed.\nThe key of the record is layer key and is also emitted on the selection.\nThe value of the record is an array and the values of that should be the\nfollowing:\n\n  \n    The name of the layer, this will be only used to display a name of\n    the layer (may also be a translation key).\n  \n  \n    This should be the resolution to display the layer at, this may also\nbe\n    null to display the keys directly without any shape intersection\n    resolving.\n  \n  \n    These should be the keys used to display the shapes from.\n    If the given keys are empty or null, this will display everything from\n    the give resolution.\n  \n\n\nAttention: The service needs at least one of the resolution or the\nkeys\nto properly respond.\n```html\n// TODO: update link when geo data docs update\nSee https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n```\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            layerConfig\n                                                    \n                                                            \n                                                                            LayerConfig\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                        Example :\n                                            \n                                                &lt;map\n  height=&quot;70vh&quot;\n  [layers]=&quot;{\n    full_res: [&#39;All of municipal resolution&#39;, Resolution.MUNICIPAL, null],\n    only_keys: [&#39;Only show exactly these&#39;, null, [&#39;01&#39;, &#39;034030000000&#39;]],\n    mixed: [&#39;Show district resolution&#39;, Resolution.DISTRICT, [&#39;01&#39;,\n  &#39;034030000000&#39;]]\n  }&quot;\n&gt;&lt;/map&gt;// TODO: update link when geo data docs update\n                                            \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        inputMarkers\n                    \n                \n\n\n                \n                    \n                        setinputMarkers(markers: Marker[])\n                    \n                \n                            \n                                \n                                    Defined in src/lib/map/map.component.ts:150\n                                \n                            \n                    \n                        \n                                Markers that should be displayed on the map.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            markers\n                                                    \n                                                            \n                                                                            Marker[]\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n  ViewChild,\n  Component,\n  EventEmitter,\n  OnInit,\n  AfterViewInit,\n  Input,\n  Output,\n  ElementRef\n} from \"@angular/core\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {firstValueFrom, BehaviorSubject, Subject} from \"rxjs\";\n\nimport * as L from \"leaflet\";\n\nimport {MapService} from \"./map.service\";\nimport LayerData from \"./layer-data\";\nimport {Resolution} from \"./resolution\";\nimport {Marker} from \"./marker\";\n\nimport * as LX from \"./invert-selection\";\n\nimport \"leaflet.markercluster\";\n\n/** Type alias to enforce the meaning of the layer keys. */\ntype LayerKey = string;\n\n/** A layer config for the input of {@link MapComponent.inputLayers}. */\ntype LayerConfig = Record;\n\n/**\n * Component for displaying maps.\n */\n@Component({\n  selector: \"map\",\n  template: `\n    \n      \n    \n  `,\n  styleUrls: [\n    \"./map.component.css\"\n  ]\n})\nexport class MapComponent implements OnInit, AfterViewInit {\n\n  /** The ref to the map html element. */\n  @ViewChild(\"map\") private mapElement!: ElementRef;\n\n  /** Input for the height of the map. */\n  @Input(\"height\") inputHeight?: string;\n  /** Height of map, defaults to 500px. */\n  height = \"500px\";\n\n  /** Input for the tile url of the map. */\n  @Input(\"tileUrl\") inputTileUrl?: string;\n  /** Tile url of the map, defaults to the osm. */\n  tileUrl = \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\";\n\n  /** Input for the center coordinates of the map. */\n  @Input(\"center\") inputCenter?: string;\n  /** Center of the map, defaults to longitude and latitude of Oldenburg. */\n  center = \"53.1434501, 8.2145521\";\n\n  /** Input for the map zoom level. */\n  @Input(\"zoom\") inputZoom?: string;\n  /** Zoom level of the map, defaults to 7. */\n  zoom = 7;\n\n  /**\n   * Input for the option if the map should scroll zoom on mouse scroll.\n   * If \"center\" is passed, the map will always zoom onto the center.\n   */\n  @Input(\"scrollWheelZoom\") inputScrollWheelZoom: boolean | \"center\" = true;\n\n  /** Input for a hex code for unselected shapes. */\n  @Input(\"unselectedColor\") unselectedColor = \"#1f5aec\";\n  /** Input for a hex code selected shapes. */\n  @Input(\"selectedColor\") selectedColor = \"#d35a0c\";\n\n  /**\n   * Input for the layers that should be displayed.\n   *\n   * The key of the record is layer key and is also emitted on the selection.\n   * The value of the record is an array and the values of that should be the\n   * following:\n   * \n   *   \n   *     The name of the layer, this will be only used to display a name of\n   *     the layer (may also be a translation key).\n   *   \n   *   \n   *     This should be the resolution to display the layer at, this may also\n   * be\n   *     null to display the keys directly without any shape intersection\n   *     resolving.\n   *   \n   *   \n   *     These should be the keys used to display the shapes from.\n   *     If the given keys are empty or null, this will display everything from\n   *     the give resolution.\n   *   \n   * \n   *\n   * **Attention**: The service needs at least one of the resolution or the\n   * keys\n   * to properly respond.\n   *\n   * @example\n   * ```html\n   * \n   * ```\n   * // TODO: update link when geo data docs update\n   * @see https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n   */\n  @Input(\"layers\")\n  set inputLayers(layerConfig: LayerConfig) {\n    this.layerConfig.next(layerConfig);\n  };\n  /**\n   * {@link Subject} of the {@link LayerConfig}, to be used as\n   * {@link Observable}.\n   * @private\n   */\n  private layerConfig: BehaviorSubject = new BehaviorSubject({});\n  /**\n   * {@link Subject} of the pairs of {@link Layerkey} and {@link LayerData},\n   * to be used as {@link Observable}.\n   * @private\n   */\n  private layerData: BehaviorSubject> = new BehaviorSubject({});\n  /**\n   * {@link Subject} of the layer names mapped by the {@link LayerKey}.\n   * @private\n   */\n  private layerNames: Record = {};\n\n  /** Should the layers be selectable. */\n  @Input(\"layerSelectable\") inputLayerSelectable: boolean = true;\n\n  /** Markers that should be displayed on the map. */\n  @Input(\"markers\") set inputMarkers(markers: Marker[]) {\n    this.markers.next(markers);\n  };\n  /** {@link Marker}s {@link Subject} to be used as {@link Observable}. */\n  private markers = new BehaviorSubject([]);\n\n  /** The leaflet map that is displayed here. */\n  map?: L.Map;\n\n  /**\n   * Internally holds all elements that are currently selected.\n   *\n   * The set holds all keys of shapes currently selected.\n   */\n  private selectedShapes: Record> = {};\n\n  /**\n   * The currently selected layer in the map control.\n   * @private\n   */\n  private selectedLayer?: LayerKey;\n  /** The currently selected geo json layer. */\n  private selectedGeoJsonLayer?: L.Layer;\n\n  /** Outputs the currently selected shapes. */\n  @Output() selected = new EventEmitter();\n\n  /** Outputs the currently rendered keys, mapped to their names. */\n  @Output() keyNames = new EventEmitter>();\n\n  /**\n   * Constructor.\n   * @param service Service to interact with the server for geo data\n   * @param translate Translation service to update resolution names\n   */\n  constructor(\n    private service: MapService,\n    private translate: TranslateService\n  ) {}\n\n  /**\n   * While init this sets the input values to the inner, private values.\n   */\n  ngOnInit(): void {\n    if (this.inputHeight) this.height = this.inputHeight;\n    if (this.inputTileUrl) this.tileUrl = this.inputTileUrl;\n    if (this.inputCenter) this.center = this.inputCenter;\n    if (this.inputZoom) this.zoom = parseInt(this.inputZoom);\n\n    this.layerConfig.subscribe(async config => {\n      let layerData = {};\n      let requests: Record> = {};\n      for (\n        let [layerKey, [displayName, resolution, keys]]\n        of Object.entries(config)\n      ) {\n        this.layerNames[layerKey] = displayName;\n        requests[layerKey] = this.service.fetchLayerData(\n          resolution,\n          keys ? [keys].flat().map(k => k.split(\" \").join(\"\")) : null\n        );\n      }\n      let fetched: Record = {};\n      for (let [layerKey, data] of Object.entries(requests)) {\n        fetched[layerKey] = await data;\n      }\n      this.layerData.next(fetched);\n\n      let keyNames = new Map();\n      for (let entry of Object.values(fetched)) {\n        for (let {name, key} of entry.shapes) {\n          keyNames.set(key, name);\n        }\n      }\n      this.keyNames.next(Object.fromEntries(keyNames));\n    });\n  }\n\n  /**\n   * Renders the map with the given input values.\n   */\n  ngAfterViewInit(): void {\n    const nativeMapElement = this.mapElement.nativeElement;\n\n    const map = L.map(nativeMapElement, {\n      scrollWheelZoom: this.inputScrollWheelZoom,\n      center: this.center\n        .split(\", \")\n        .map(str => parseFloat(str)) as [number, number],\n      zoom: this.zoom\n    });\n    map.getRenderer(map as any).options.padding = 100;\n\n    L.tileLayer(this.tileUrl).addTo(map);\n\n    this.map = map;\n    let layersControl: L.Control.Layers;\n    // TODO: make a clear type from this\n    let invertSelectionControl: any;\n\n    this.layerData.subscribe(async layerData => {\n      let displayLayer = true;\n\n      // reset selected data\n      this.selectedShapes = {};\n\n      if (layersControl) map.removeControl(layersControl);\n      layersControl = L.control.layers();\n      // layer index to allow sorting by it\n      // this allows updating the names without having to worry about layer\n      // shuffling\n      let layerIndex = 0;\n      layersControl.options.sortLayers = true;\n      layersControl.options.sortFunction = (layerA, layerB) => {\n        // @ts-ignore these orders are injected here to allow fixed ordering\n        return layerA.options.order - layerB.options.order;\n      }\n      let layers: L.Layer[] = [];\n\n      if (this.selectedGeoJsonLayer) map.removeLayer(this.selectedGeoJsonLayer);\n\n      // update map with new layer data\n      for (let [key, data] of Object.entries(layerData)) {\n        let selectedShapes = this.selectedShapes[key] = new Set();\n        // use for every layer a new geoJSON layer\n        let geoJsonLayer = L.geoJSON(undefined, {\n          // @ts-ignore insert order here to allow fixed ordering when updating\n          // translation\n          order: layerIndex++,\n          attribution: `\n            \n              📐 © GeoBasis-DE / BKG 2022\n            \n            |\n            \n              🔖 dl-de/by-2-0\n            \n          `,\n          style: {color: this.unselectedColor},\n          onEachFeature: (feature, layer) => {\n            // used properties are injected later into the feature\n            layer.bindTooltip(feature.properties.name, {direction: \"center\"});\n            if (this.inputLayerSelectable) {\n              layer.on(\"click\", () => {\n                let [key, path] = [feature.properties.key, layer as L.Path];\n                if (selectedShapes.has(key)) {\n                  path.setStyle({color: this.unselectedColor});\n                  path.bringToBack();\n                  selectedShapes.delete(key);\n                }\n                else {\n                  path.setStyle({color: this.selectedColor});\n                  path.bringToFront();\n                  selectedShapes.add(key);\n                }\n                this.emitSelection();\n              });\n            }\n            layers.push(layer);\n          }\n        });\n        for (let shape of data.shapes) {\n          geoJsonLayer.addData(Object.assign(shape.geoJson, {properties: {\n            name: shape.name,\n            key: shape.key\n          }}));\n          if (displayLayer) {\n            geoJsonLayer.addTo(map);\n            displayLayer = false;\n            this.selectedLayer = key;\n            this.selectedGeoJsonLayer = geoJsonLayer;\n            map.fitBounds([\n              data.box[0],\n              data.box[2]\n            ]);\n          }\n        }\n        this.translate.onLangChange.subscribe(() => {\n          layersControl.removeLayer(geoJsonLayer);\n          layersControl.addBaseLayer(\n            geoJsonLayer,\n            this.translate.instant(this.layerNames[key])\n          );\n        });\n        let layerName: string;\n        if (this.layerNames[key].length) {\n          layerName = await firstValueFrom(\n            this.translate.get(this.layerNames[key])\n          );\n        } else layerName = \"layer\";\n        layersControl.addBaseLayer(geoJsonLayer, layerName);\n        map.on(\"baselayerchange\", ({layer}) => {\n          if (layer == geoJsonLayer) {\n            this.selectedGeoJsonLayer = layer;\n            this.selectedLayer = key;\n            this.emitSelection();\n          }\n        })\n      }\n      if (Object.keys(layerData).length > 1) layersControl.addTo(map);\n\n      if (this.inputLayerSelectable) {\n        if (invertSelectionControl) map.removeControl(invertSelectionControl);\n        invertSelectionControl = LX.control.invertSelection(() => {\n          for (let layer of layers) {\n            layer.fire(\"click\");\n          }\n        });\n        invertSelectionControl.addTo(map);\n      }\n    });\n\n    let markerLayer = L.markerClusterGroup();\n    this.markers.subscribe(markers => {\n      markerLayer.removeFrom(map);\n      markerLayer = L.markerClusterGroup();\n      for (let marker of markers) {\n        let lMarker = L.marker(marker.coordinates);\n        if (marker.icon) lMarker.setIcon(marker.icon);\n        if (marker.tooltip) lMarker.bindTooltip(marker.tooltip);\n        if (marker.onClick) lMarker.on(\"click\", marker.onClick)\n        lMarker.addTo(markerLayer);\n      }\n      markerLayer.addTo(map);\n    });\n  }\n\n  /**\n   * Internally used function to emit the currently selected shapes via the\n   * {@link selected} output.\n   * @private\n   */\n  private emitSelection(): void {\n    let layerKey = this.selectedLayer!;\n    let layerName = this.layerNames[layerKey]!;\n    let keys = Array.from(this.selectedShapes[layerKey]);\n    this.selected.emit({\n      layer: layerKey,\n      name: layerName,\n      keys\n    });\n  }\n}\n\n    \n\n\n    \n                \n                    ./map.component.css\n                \n                .map-container {}\n\n.map {\n  z-index: 10;\n  height: 100%;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'DragDropComponent', 'selector': 'drag-drop'},{'name': 'IfcComponent', 'selector': 'ifc'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaCalendarDirective', 'selector': '[type=\"date\"]'},{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'},{'name': 'DragDropDirective', 'selector': '[dragDropDirective]'}];\n    var ACTUAL_COMPONENT = {'name': 'MapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MapDB.html":{"url":"interfaces/MapDB.html","title":"interface - MapDB","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MapDB\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/map.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The schema the map db uses.\n\n            \n\n            \n                Extends\n            \n            \n                    DBSchema\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            queries\n                                        \n                                \n                                \n                                        \n                                            shapes\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        queries\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queries:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    All cached queries, used to identify if a query is already in the db.\nThe key[0] represents the resolution of the query, a -1 represents no\nresolution.\nThe rest are the given keys.\nThe value is an array of all the keys the query returned.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shapes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shapes:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    All shapes in the indexed db.\nThe key is the key of the shape.\nThe value is some ShapeData.\nSince LayerData is simply an array of ShapeData, this may\nbe used to reconstruct some layer data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  HttpClient,\n  HttpContext,\n  HttpHeaders,\n  HttpParams\n} from \"@angular/common/http\";\nimport {Injectable} from \"@angular/core\";\nimport {openDB, DBSchema} from \"idb\";\nimport {Layer} from \"leaflet\";\nimport {firstValueFrom} from \"rxjs\";\n\nimport {Resolution} from \"./resolution\";\nimport {LayerData, ShapeData} from \"./layer-data\";\nimport {USE_API_URL} from \"../http-context/use-api-url\";\nimport {USE_LOADER} from \"../http-context/use-loader\";\n\n/** API url for the map to request data from. */\nconst API_URL = \"geodata\";\n/** Indexed DB name. */\nconst DB_NAME = \"map-db\";\n/** Indexed DB schema version. */\nconst SCHEMA_V = 2;\n\n/** The schema the map db uses. */\ninterface MapDB extends DBSchema {\n  /**\n   * All cached queries, used to identify if a query is already in the db.\n   *\n   * The key[0] represents the resolution of the query, a -1 represents no\n   * resolution.\n   * The rest are the given keys.\n   *\n   * The value is an array of all the keys the query returned.\n   */\n  queries: {\n    key: [number, ...string[]],\n    value: {\n      box: LayerData[\"box\"],\n      shapes: string[]\n    }\n  },\n\n  /**\n   * All shapes in the indexed db.\n   *\n   * The key is the key of the shape.\n   *\n   * The value is some {@link ShapeData}.\n   * Since {@link LayerData} is simply an array of {@link ShapeData}, this may\n   * be used to reconstruct some layer data.\n   */\n  shapes: {\n    key: string,\n    value: ShapeData\n  }\n}\n\n/**\n * Service to interact with the geo data api to fetch map data.\n *\n * Fetched map data is cached in the indexedDB and therefore only retrieved\n * lazily.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n\n  /** Indexed DB client. */\n  private readonly idb;\n\n  /**\n   * Constructor.\n   * @param http Client to request geo data\n   */\n  constructor(private http: HttpClient) {\n    this.idb = openDB(DB_NAME, SCHEMA_V, {\n      upgrade(db, oldV) {\n        if (oldV) {\n          db.deleteObjectStore(\"queries\");\n          db.deleteObjectStore(\"shapes\");\n        }\n        db.createObjectStore(\"queries\");\n        db.createObjectStore(\"shapes\");\n      }\n    });\n  }\n\n  /**\n   * Asynchronously fetch the map from the geo data rest api.\n   *\n   * Will only fetch data if not already stored in the indexedDB.\n   * @param resolution The resolution the of the shapes returned by the service\n   * @param keys The keys given to look for shapes\n   * @param force If true, this will ignore the cache and request everything\n   */\n  async fetchLayerData(\n    resolution: Resolution | null | undefined,\n    keys?: string[] | null,\n    force: boolean = false\n  ): Promise {\n    // prepare db and keys\n    let idb = await this.idb;\n    let trimmedKeys = keys ?? [];\n    let resolutionNum = resolution ? Resolution.toKeyLength(resolution) : -1;\n    let queryKey = [resolutionNum, ...trimmedKeys] as [number, ...string[]];\n\n    // check for cached keys or ignore if is force is true\n    let cachedQuery = force ? undefined : await idb.get(\"queries\", queryKey);\n    if (cachedQuery) {\n      let tx = idb.transaction(\"shapes\", \"readonly\");\n      let store = tx.objectStore(\"shapes\");\n      let shapes: ShapeData[] = [];\n      let operations = [];\n      for (let key of cachedQuery.shapes) {\n        operations.push(store.get(key).then(shape => {\n          if (shape) shapes.push(shape);\n        }));\n      }\n      operations.push(tx.done);\n      await Promise.all(operations);\n      return {\n        box: cachedQuery.box,\n        shapes\n      };\n    }\n\n    // if cachedKeys was empty, request data from the server\n    let params = new HttpParams();\n    if (resolution) params = params.set(\"resolution\", resolution);\n    if (keys && keys.length) params = params.appendAll({key: keys.map(k => {\n      if (resolution) return k.substring(0, resolutionNum);\n      return k;\n    })});\n\n    let rawLayerData = await firstValueFrom(this.http.get(`${API_URL}/`, {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      }),\n      params,\n      responseType: \"json\",\n      context: new HttpContext()\n        .set(USE_API_URL, true)\n        .set(USE_LOADER, true)\n    }));\n\n    rawLayerData.shapes = rawLayerData.shapes.map(rawShape => ({\n      nutsKey: rawShape.nuts_key,\n      geoJson: rawShape.geojson,\n      ...rawShape\n    }));\n\n    let layerData = rawLayerData as unknown as LayerData;\n\n    // store the requested data back into the db\n    let tx = idb.transaction([\"queries\", \"shapes\"], \"readwrite\");\n    let operations = [];\n    let shapeStore = tx.objectStore(\"shapes\");\n    let shapeKeys = [];\n    for (let shape of layerData.shapes) {\n      operations.push(shapeStore.put(shape, shape.key));\n      shapeKeys.push(shape.key);\n    }\n    let queryStore = tx.objectStore(\"queries\");\n    operations.push(queryStore.put({\n      box: layerData.box,\n      shapes: shapeKeys\n    }, queryKey));\n    await Promise.all(operations);\n\n    return layerData;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MapService.html":{"url":"injectables/MapService.html","title":"injectable - MapService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MapService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/map.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to interact with the geo data api to fetch map data.\nFetched map data is cached in the indexedDB and therefore only retrieved\nlazily.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                idb\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                fetchLayerData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/lib/map/map.service.ts:70\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Client to request geo data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchLayerData\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchLayerData(resolution: Resolution | null | undefined, keys?: string[] | null, force: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.service.ts:97\n                \n            \n\n\n            \n                \n                    Asynchronously fetch the map from the geo data rest api.\nWill only fetch data if not already stored in the indexedDB.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    resolution\n                                    \n                                                Resolution | null | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The resolution the of the shapes returned by the service\n\n                                    \n                                \n                                \n                                    keys\n                                    \n                                            string[] | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The keys given to look for shapes\n\n                                    \n                                \n                                \n                                    force\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        If true, this will ignore the cache and request everything\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        idb\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/lib/map/map.service.ts:70\n                        \n                    \n\n            \n                \n                    Indexed DB client.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpClient,\n  HttpContext,\n  HttpHeaders,\n  HttpParams\n} from \"@angular/common/http\";\nimport {Injectable} from \"@angular/core\";\nimport {openDB, DBSchema} from \"idb\";\nimport {Layer} from \"leaflet\";\nimport {firstValueFrom} from \"rxjs\";\n\nimport {Resolution} from \"./resolution\";\nimport {LayerData, ShapeData} from \"./layer-data\";\nimport {USE_API_URL} from \"../http-context/use-api-url\";\nimport {USE_LOADER} from \"../http-context/use-loader\";\n\n/** API url for the map to request data from. */\nconst API_URL = \"geodata\";\n/** Indexed DB name. */\nconst DB_NAME = \"map-db\";\n/** Indexed DB schema version. */\nconst SCHEMA_V = 2;\n\n/** The schema the map db uses. */\ninterface MapDB extends DBSchema {\n  /**\n   * All cached queries, used to identify if a query is already in the db.\n   *\n   * The key[0] represents the resolution of the query, a -1 represents no\n   * resolution.\n   * The rest are the given keys.\n   *\n   * The value is an array of all the keys the query returned.\n   */\n  queries: {\n    key: [number, ...string[]],\n    value: {\n      box: LayerData[\"box\"],\n      shapes: string[]\n    }\n  },\n\n  /**\n   * All shapes in the indexed db.\n   *\n   * The key is the key of the shape.\n   *\n   * The value is some {@link ShapeData}.\n   * Since {@link LayerData} is simply an array of {@link ShapeData}, this may\n   * be used to reconstruct some layer data.\n   */\n  shapes: {\n    key: string,\n    value: ShapeData\n  }\n}\n\n/**\n * Service to interact with the geo data api to fetch map data.\n *\n * Fetched map data is cached in the indexedDB and therefore only retrieved\n * lazily.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n\n  /** Indexed DB client. */\n  private readonly idb;\n\n  /**\n   * Constructor.\n   * @param http Client to request geo data\n   */\n  constructor(private http: HttpClient) {\n    this.idb = openDB(DB_NAME, SCHEMA_V, {\n      upgrade(db, oldV) {\n        if (oldV) {\n          db.deleteObjectStore(\"queries\");\n          db.deleteObjectStore(\"shapes\");\n        }\n        db.createObjectStore(\"queries\");\n        db.createObjectStore(\"shapes\");\n      }\n    });\n  }\n\n  /**\n   * Asynchronously fetch the map from the geo data rest api.\n   *\n   * Will only fetch data if not already stored in the indexedDB.\n   * @param resolution The resolution the of the shapes returned by the service\n   * @param keys The keys given to look for shapes\n   * @param force If true, this will ignore the cache and request everything\n   */\n  async fetchLayerData(\n    resolution: Resolution | null | undefined,\n    keys?: string[] | null,\n    force: boolean = false\n  ): Promise {\n    // prepare db and keys\n    let idb = await this.idb;\n    let trimmedKeys = keys ?? [];\n    let resolutionNum = resolution ? Resolution.toKeyLength(resolution) : -1;\n    let queryKey = [resolutionNum, ...trimmedKeys] as [number, ...string[]];\n\n    // check for cached keys or ignore if is force is true\n    let cachedQuery = force ? undefined : await idb.get(\"queries\", queryKey);\n    if (cachedQuery) {\n      let tx = idb.transaction(\"shapes\", \"readonly\");\n      let store = tx.objectStore(\"shapes\");\n      let shapes: ShapeData[] = [];\n      let operations = [];\n      for (let key of cachedQuery.shapes) {\n        operations.push(store.get(key).then(shape => {\n          if (shape) shapes.push(shape);\n        }));\n      }\n      operations.push(tx.done);\n      await Promise.all(operations);\n      return {\n        box: cachedQuery.box,\n        shapes\n      };\n    }\n\n    // if cachedKeys was empty, request data from the server\n    let params = new HttpParams();\n    if (resolution) params = params.set(\"resolution\", resolution);\n    if (keys && keys.length) params = params.appendAll({key: keys.map(k => {\n      if (resolution) return k.substring(0, resolutionNum);\n      return k;\n    })});\n\n    let rawLayerData = await firstValueFrom(this.http.get(`${API_URL}/`, {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      }),\n      params,\n      responseType: \"json\",\n      context: new HttpContext()\n        .set(USE_API_URL, true)\n        .set(USE_LOADER, true)\n    }));\n\n    rawLayerData.shapes = rawLayerData.shapes.map(rawShape => ({\n      nutsKey: rawShape.nuts_key,\n      geoJson: rawShape.geojson,\n      ...rawShape\n    }));\n\n    let layerData = rawLayerData as unknown as LayerData;\n\n    // store the requested data back into the db\n    let tx = idb.transaction([\"queries\", \"shapes\"], \"readwrite\");\n    let operations = [];\n    let shapeStore = tx.objectStore(\"shapes\");\n    let shapeKeys = [];\n    for (let shape of layerData.shapes) {\n      operations.push(shapeStore.put(shape, shape.key));\n      shapeKeys.push(shape.key);\n    }\n    let queryStore = tx.objectStore(\"queries\");\n    operations.push(queryStore.put({\n      box: layerData.box,\n      shapes: shapeKeys\n    }, queryKey));\n    await Promise.all(operations);\n\n    return layerData;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Marker.html":{"url":"interfaces/Marker.html","title":"interface - Marker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Marker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/marker.ts\n        \n\n\n            \n                Description\n            \n            \n                Marker interface for creating custom markers on a MapComponent.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            coordinates\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onClick\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tooltip\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coordinates\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        coordinates:     [number, number]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [number, number]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Coordinates of the marker.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:     L.Icon | L.DivIcon\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     L.Icon | L.DivIcon\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional icon for the marker, if not set a default one will be used.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onClick\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onClick:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Event handler for a click on the marker.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tooltip\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tooltip:     Content |  | Tooltip\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Content |  | Tooltip\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Displayed tooltip when hovering the marker.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {Content, LeafletMouseEvent, Layer, Tooltip} from \"leaflet\";\n\nimport * as L from \"leaflet\";\n\n/** Marker interface for creating custom markers on a {@link MapComponent}. */\nexport interface Marker {\n  /** Coordinates of the marker. */\n  coordinates: [number, number],\n  /** Displayed tooltip when hovering the marker. */\n  tooltip?: Content | ((layer: Layer) => Content) | Tooltip,\n  /** Event handler for a click on the marker. */\n  onClick?: (evt: LeafletMouseEvent) => void,\n  /** Optional icon for the marker, if not set a default one will be used. */\n  icon?: L.Icon | L.DivIcon\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueryParameterGuard.html":{"url":"injectables/QueryParameterGuard.html","title":"injectable - QueryParameterGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueryParameterGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/guards/query-parameter.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard to check if certain query parameters are set.\nIn the data attribute of route it expects an optional redirectTo\ncontaining an Observable, a Promise or a direct\nUrlTree or a string that will be passed to Router#parseUrl\nand queryParams containing a string or an array of strings.\n\nredirect will be used when the check fails.\nqueryParams will be iterated to check for the keys\n\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/lib/guards/query-parameter.guard.ts:24\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Router used to parse redirect entries\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/guards/query-parameter.guard.ts:40\n                \n            \n\n\n            \n                \n                    Whether the route can be activated.\nFor more info check QueryParameterGuard.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                            ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently activated route snapshot\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                            RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state of the router\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise | boolean | UrlTree\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from \"@angular/core\";\nimport {\n  Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree\n} from \"@angular/router\";\nimport {Observable} from \"rxjs\";\n\n/**\n * Guard to check if certain query parameters are set.\n *\n * In the `data` attribute of route it expects an optional `redirectTo`\n * containing an {@link Observable}, a {@link Promise} or a direct\n * {@link UrlTree} or a string that will be passed to {@link Router#parseUrl}\n * and `queryParams` containing a string or an array of strings.\n *\n * - `redirect` will be used when the check fails.\n * - `queryParams` will be iterated to check for the keys\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class QueryParameterGuard  {\n\n  /**\n   * Constructor.\n   * @param router Router used to parse redirect entries\n   */\n  constructor(private router: Router) {}\n\n  /**\n   * Whether the route can be activated.\n   *\n   * For more info check {@link QueryParameterGuard}.\n   *\n   * @param route Currently activated route snapshot\n   * @param state Current state of the router\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable | Promise | boolean | UrlTree {\n    let redirect  = route.data[\"redirect\"] ?? false;\n    if (typeof redirect === \"string\") redirect = this.router.parseUrl(redirect);\n    for (let param of [route.data[\"queryParams\"] ?? []].flat()) {\n      if (route.queryParams[param] === undefined) return redirect;\n    }\n    return true;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ShapeData.html":{"url":"interfaces/ShapeData.html","title":"interface - ShapeData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ShapeData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/layer-data.ts\n        \n\n\n            \n                Description\n            \n            \n                Type to represent a single shape with all of its metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            geoJson\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            nutsKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        geoJson\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        geoJson:     GeoJsonObject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     GeoJsonObject\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    GeoJson representing the shape.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Key of the shape.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the shape.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nutsKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nutsKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Nomenclature of Territorial Units code of the shape.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {GeoJsonObject} from \"geojson\";\n\nimport * as L from \"leaflet\";\n\n/** Type to represent a single shape with all of its metadata. */\nexport interface ShapeData {\n  /** Name of the shape. */\n  name: string,\n  /** Key of the shape. */\n  key: string,\n  /** Nomenclature of Territorial Units code of the shape. */\n  nutsKey: string,\n  /** GeoJson representing the shape. */\n  geoJson: GeoJsonObject\n}\n\n/** Type to represent layer data received from the geo data server. */\nexport interface LayerData {\n  /** Corner coordinates of a box containing all the shapes this displays. */\n  box: [[number, number], [number, number], [number, number], [number, number]],\n  /** List of shapes. */\n  shapes: ShapeData[]\n}\n\nexport default LayerData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WisdomInterface.html":{"url":"interfaces/WisdomInterface.html","title":"interface - WisdomInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WisdomInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/WisdomInterface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for the wisdom modules.\nEvery wisdom module must provide such an object implementing this interface.\nThe object must be exported under the name \"wisdomInterface\".\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            route\n                                        \n                                \n                                \n                                        \n                                            scopes\n                                        \n                                \n                                \n                                        \n                                            translations\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        route\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        route:     Route\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Route\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The route that leads to this module.\nThis may also include guards but some guards will be automatically injected.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scopes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scopes:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The scopes required to see the component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translations:     Record>>>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record>>>\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The translations the modules provides and uses.\nThe top most entry should be the namespace, the following the component and\nin the component there should be keys for the translation keys.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {Route} from \"@angular/router\";\n\n/**\n * Interface for the wisdom modules.\n *\n * Every wisdom module must provide such an object implementing this interface.\n * The object must be exported under the name \"wisdomInterface\".\n */\nexport interface WisdomInterface {\n  /**\n   * The route that leads to this module.\n   * This may also include guards but some guards will be automatically injected.\n   */\n  route: Route;\n  /** The scopes required to see the component. */\n  scopes: string[];\n  /**\n   * The translations the modules provides and uses.\n   *\n   * The top most entry should be the namespace, the following the component and\n   * in the component there should be keys for the translation keys.\n   */\n  translations: Record>>>\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WisdomModule.html":{"url":"modules/WisdomModule.html","title":"module - WisdomModule","body":"\n                   \n\n\n\n\n    Modules\n    WisdomModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_WisdomModule\n\n\n\ncluster_WisdomModule_declarations\n\n\n\ncluster_WisdomModule_exports\n\n\n\n\nBreadcrumbsComponent\n\nBreadcrumbsComponent\n\n\n\nWisdomModule\n\nWisdomModule\n\nWisdomModule -->\n\nBreadcrumbsComponent->WisdomModule\n\n\n\n\n\nBulmaCalendarDirective\n\nBulmaCalendarDirective\n\nWisdomModule -->\n\nBulmaCalendarDirective->WisdomModule\n\n\n\n\n\nBulmaIsToggleableDirective\n\nBulmaIsToggleableDirective\n\nWisdomModule -->\n\nBulmaIsToggleableDirective->WisdomModule\n\n\n\n\n\nDragDropComponent\n\nDragDropComponent\n\nWisdomModule -->\n\nDragDropComponent->WisdomModule\n\n\n\n\n\nDragDropDirective\n\nDragDropDirective\n\nWisdomModule -->\n\nDragDropDirective->WisdomModule\n\n\n\n\n\nIfcComponent\n\nIfcComponent\n\nWisdomModule -->\n\nIfcComponent->WisdomModule\n\n\n\n\n\nIonIconComponent\n\nIonIconComponent\n\nWisdomModule -->\n\nIonIconComponent->WisdomModule\n\n\n\n\n\nMapComponent\n\nMapComponent\n\nWisdomModule -->\n\nMapComponent->WisdomModule\n\n\n\n\n\nBreadcrumbsComponent \n\nBreadcrumbsComponent \n\nBreadcrumbsComponent  -->\n\nWisdomModule->BreadcrumbsComponent \n\n\n\n\n\nBulmaCalendarDirective \n\nBulmaCalendarDirective \n\nBulmaCalendarDirective  -->\n\nWisdomModule->BulmaCalendarDirective \n\n\n\n\n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective  -->\n\nWisdomModule->BulmaIsToggleableDirective \n\n\n\n\n\nDragDropComponent \n\nDragDropComponent \n\nDragDropComponent  -->\n\nWisdomModule->DragDropComponent \n\n\n\n\n\nDragDropDirective \n\nDragDropDirective \n\nDragDropDirective  -->\n\nWisdomModule->DragDropDirective \n\n\n\n\n\nIfcComponent \n\nIfcComponent \n\nIfcComponent  -->\n\nWisdomModule->IfcComponent \n\n\n\n\n\nIonIconComponent \n\nIonIconComponent \n\nIonIconComponent  -->\n\nWisdomModule->IonIconComponent \n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nWisdomModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/wisdom.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BreadcrumbsComponent\n                        \n                        \n                            BulmaCalendarDirective\n                        \n                        \n                            BulmaIsToggleableDirective\n                        \n                        \n                            DragDropComponent\n                        \n                        \n                            DragDropDirective\n                        \n                        \n                            IfcComponent\n                        \n                        \n                            IonIconComponent\n                        \n                        \n                            MapComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BreadcrumbsComponent\n                        \n                        \n                            BulmaCalendarDirective\n                        \n                        \n                            BulmaIsToggleableDirective\n                        \n                        \n                            DragDropComponent\n                        \n                        \n                            DragDropDirective\n                        \n                        \n                            IfcComponent\n                        \n                        \n                            IonIconComponent\n                        \n                        \n                            MapComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\nimport {RouterModule} from \"@angular/router\";\nimport {TranslateModule} from \"@ngx-translate/core\";\n\nimport {BreadcrumbsComponent} from \"./breadcrumbs/breadcrumbs.component\";\nimport {\n  BulmaIsToggleableDirective\n} from \"./bulma/bulma-is-toggleable.directive\";\nimport {DragDropComponent} from \"./drag-drop/drag-drop.component\";\nimport {DragDropDirective} from \"./drag-drop/drag-drop.directive\";\nimport {IfcComponent} from \"./ifc/ifc.component\";\nimport {IonIconComponent} from \"./ion-icon/ion-icon.component\";\nimport {MapComponent} from \"./map/map.component\";\nimport { BulmaCalendarDirective } from './bulma/bulma-calendar.directive';\n\n@NgModule({\n  declarations: [\n    IonIconComponent,\n    BulmaIsToggleableDirective,\n    MapComponent,\n    BreadcrumbsComponent,\n    IfcComponent,\n    DragDropComponent,\n    DragDropDirective,\n    BulmaCalendarDirective,\n  ],\n  imports: [TranslateModule, CommonModule, RouterModule],\n  exports: [\n    IonIconComponent,\n    IfcComponent,\n    BulmaCalendarDirective,\n    BulmaIsToggleableDirective,\n    MapComponent,\n    BreadcrumbsComponent,\n    DragDropComponent,\n    DragDropDirective,\n  ],\n})\nexport class WisdomModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/WisdomInterface.ts\n            \n            interface\n            WisdomInterface\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/breadcrumbs/breadcrumbs.component.ts\n            \n            component\n            BreadcrumbsComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/lib/breadcrumbs/breadcrumbs.service.ts\n            \n            injectable\n            BreadcrumbsService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/breadcrumbs/breadcrumbs.service.ts\n            \n            interface\n            Breadcrumb\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/bulma/bulma-calendar.directive.ts\n            \n            directive\n            BulmaCalendarDirective\n            \n                90 %\n                (20/22)\n            \n        \n        \n            \n                \n                src/lib/bulma/bulma-is-toggleable.directive.ts\n            \n            directive\n            BulmaIsToggleableDirective\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/drag-drop/drag-drop.component.ts\n            \n            component\n            DragDropComponent\n            \n                11 %\n                (2/17)\n            \n        \n        \n            \n                \n                src/lib/drag-drop/drag-drop.directive.ts\n            \n            directive\n            DragDropDirective\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/lib/drag-drop/drag-drop.service.ts\n            \n            injectable\n            DragDropService\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/lib/guards/query-parameter.guard.ts\n            \n            injectable\n            QueryParameterGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/http-context/send-auth.ts\n            \n            variable\n            SEND_AUTH\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-api-url.ts\n            \n            variable\n            USE_API_URL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-base-url.ts\n            \n            variable\n            USE_BASE_URL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-cache.ts\n            \n            variable\n            USE_CACHE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-error-handler.ts\n            \n            class\n            ErrorHttpContextToken\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-error-handler.ts\n            \n            variable\n            USE_ERROR_HANDLER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-loader.ts\n            \n            variable\n            USE_LOADER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/ifc/ifc.component.ts\n            \n            component\n            IfcComponent\n            \n                100 %\n                (21/21)\n            \n        \n        \n            \n                \n                src/lib/ifc/ifc.service.ts\n            \n            injectable\n            IfcService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/ifc/ifc.service.ts\n            \n            interface\n            IfcDB\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/lib/ifc/ifc.service.ts\n            \n            variable\n            DB_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/ifc/ifc.service.ts\n            \n            variable\n            SCHEMA_V\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/ion-icon/ion-icon.component.ts\n            \n            component\n            IonIconComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/loader/loader.injector.ts\n            \n            injectable\n            LoaderInjector\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/map/invert-selection.ts\n            \n            variable\n            control\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/layer-data.ts\n            \n            interface\n            LayerData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/map/layer-data.ts\n            \n            interface\n            ShapeData\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/map/map.component.ts\n            \n            component\n            MapComponent\n            \n                100 %\n                (30/30)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            injectable\n            MapService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            interface\n            MapDB\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            API_URL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            DB_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            SCHEMA_V\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/marker.ts\n            \n            interface\n            Marker\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/map/resolution.ts\n            \n            function\n            toEnum\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/resolution.ts\n            \n            function\n            toKeyLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            getBulmaPrimaryColors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            getResolvedUrl\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            prettyPrintNum\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            stringToColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            translateObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            tupleSwap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.5.3\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ~16.1.0\n        \n            @angular/core : ~16.1.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BulmaCalendarMode   (src/.../bulma-calendar.directive.ts)\n                        \n                        \n                            ErrorHandler   (src/.../use-error-handler.ts)\n                        \n                        \n                            Resolution   (src/.../resolution.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/bulma/bulma-calendar.directive.ts\n    \n        \n            \n                \n                    \n                        \n                        BulmaCalendarMode\n                    \n                \n                    \n                        \n                            Enum to decide in which mode the Bulma Calendar should take values.\n\n                        \n                    \n                        \n                            \n                                 DEFAULT\n                            \n                        \n                        \n                            \n                                Value : default\n                            \n                        \n                        \n                            \n                                 MONTH\n                            \n                        \n                        \n                            \n                                Value : month\n                            \n                        \n                        \n                            \n                                 YEAR\n                            \n                        \n                        \n                            \n                                Value : year\n                            \n                        \n            \n        \n\n    src/lib/http-context/use-error-handler.ts\n    \n        \n            \n                \n                    \n                        \n                        ErrorHandler\n                    \n                \n                    \n                        \n                            Variants of the error handler.\nThis enum is exposed via the USE_ERROR_HANDLER.handler property.\n\n                        \n                    \n                        \n                            \n                                 CURTAIN\n                            \n                        \n                        \n                            \n                                 TOAST\n                            \n                        \n                        \n                            \n                                 CUSTOM\n                            \n                        \n            \n        \n\n    src/lib/map/resolution.ts\n    \n        \n            \n                \n                    \n                        \n                        Resolution\n                    \n                \n                    \n                        \n                            Resolutions the map may display.\n\n                        \n                    \n                        \n                            \n                                 STATE\n                            \n                        \n                        \n                            \n                                Value : state\n                            \n                        \n                        \n                            \n                                 DISTRICT\n                            \n                        \n                        \n                            \n                                Value : district\n                            \n                        \n                        \n                            \n                                 ADMINISTRATION\n                            \n                        \n                        \n                            \n                                Value : administration\n                            \n                        \n                        \n                            \n                                 MUNICIPAL\n                            \n                        \n                        \n                            \n                                Value : municipal\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getBulmaPrimaryColors   (src/.../util.ts)\n                        \n                        \n                            getResolvedUrl   (src/.../util.ts)\n                        \n                        \n                            prettyPrintNum   (src/.../util.ts)\n                        \n                        \n                            stringToColor   (src/.../util.ts)\n                        \n                        \n                            toEnum   (src/.../resolution.ts)\n                        \n                        \n                            toKeyLength   (src/.../resolution.ts)\n                        \n                        \n                            translateObject   (src/.../util.ts)\n                        \n                        \n                            tupleSwap   (src/.../util.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getBulmaPrimaryColors\n                        \n                    \n                \n            \n            \n                \ngetBulmaPrimaryColors()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getResolvedUrl\n                        \n                    \n                \n            \n            \n                \ngetResolvedUrl(route: ActivatedRouteSnapshot)\n                \n            \n\n\n\n\n            \n                \n                    Function to return a fully resolved url in a string from an activated route\nsnapshot.\nRecreated by this solution on StackOverflow.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                            ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Route snapshot of a component.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prettyPrintNum\n                        \n                    \n                \n            \n            \n                \nprettyPrintNum(num: number)\n                \n            \n\n\n\n\n            \n                \n                    Returns a number presentation where every third digit from the end is\nseparated by a dot.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Number to pretty print\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            prettyPrintNum(12345678) =&gt; &quot;12.345.678&quot;\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stringToColor\n                        \n                    \n                \n            \n            \n                \nstringToColor(str: string, map?: Record)\n                \n            \n\n\n\n\n            \n                \n                    Generates deterministically a hex color code from any string.\nThis is a modernized version of this\nStackOverflow reply.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A string to generate a hex color for\n\n                                    \n                                \n                                \n                                    map\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A color map for predefined strings\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A hex color code in the style of '#abc123'\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        translateObject\n                        \n                    \n                \n            \n            \n                \ntranslateObject(service: TranslateService, obj: T)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to translate strings in any data object using the given\ntranslate service.\nInternally the instant() method is used, causing this to be sync, beware.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    service\n                                    \n                                            TranslateService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Translate service to translate with\n\n                                    \n                                \n                                \n                                    obj\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to iterate and translate through\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tupleSwap\n                        \n                    \n                \n            \n            \n                \ntupleSwap(tuple)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to swap the values of a tuple.\nUseful if coordinates are in the wrong order.\n(e.g. geojson to leaflet)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tuple\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Tuple of two values\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/lib/map/resolution.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toEnum\n                        \n                    \n                \n            \n            \n                \ntoEnum(length: number)\n                \n            \n\n\n\n\n            \n                \n                    Get the Resolution from a key length.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key length\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Resolution | undefined\n\n                    \n                    \n                        Resolution if found, otherwise undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toKeyLength\n                        \n                    \n                \n            \n            \n                \ntoKeyLength(res: Resolution)\n                \n            \n\n\n\n\n            \n                \n                    Transforms a Resolution into the key length.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                                Resolution\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Resolution to find key length\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_WisdomModule\n\n\n\ncluster_WisdomModule_declarations\n\n\n\ncluster_WisdomModule_exports\n\n\n\n\nBreadcrumbsComponent\n\nBreadcrumbsComponent\n\n\n\nWisdomModule\n\nWisdomModule\n\nWisdomModule -->\n\nBreadcrumbsComponent->WisdomModule\n\n\n\n\n\nBulmaCalendarDirective\n\nBulmaCalendarDirective\n\nWisdomModule -->\n\nBulmaCalendarDirective->WisdomModule\n\n\n\n\n\nBulmaIsToggleableDirective\n\nBulmaIsToggleableDirective\n\nWisdomModule -->\n\nBulmaIsToggleableDirective->WisdomModule\n\n\n\n\n\nDragDropComponent\n\nDragDropComponent\n\nWisdomModule -->\n\nDragDropComponent->WisdomModule\n\n\n\n\n\nDragDropDirective\n\nDragDropDirective\n\nWisdomModule -->\n\nDragDropDirective->WisdomModule\n\n\n\n\n\nIfcComponent\n\nIfcComponent\n\nWisdomModule -->\n\nIfcComponent->WisdomModule\n\n\n\n\n\nIonIconComponent\n\nIonIconComponent\n\nWisdomModule -->\n\nIonIconComponent->WisdomModule\n\n\n\n\n\nMapComponent\n\nMapComponent\n\nWisdomModule -->\n\nMapComponent->WisdomModule\n\n\n\n\n\nBreadcrumbsComponent \n\nBreadcrumbsComponent \n\nBreadcrumbsComponent  -->\n\nWisdomModule->BreadcrumbsComponent \n\n\n\n\n\nBulmaCalendarDirective \n\nBulmaCalendarDirective \n\nBulmaCalendarDirective  -->\n\nWisdomModule->BulmaCalendarDirective \n\n\n\n\n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective  -->\n\nWisdomModule->BulmaIsToggleableDirective \n\n\n\n\n\nDragDropComponent \n\nDragDropComponent \n\nDragDropComponent  -->\n\nWisdomModule->DragDropComponent \n\n\n\n\n\nDragDropDirective \n\nDragDropDirective \n\nDragDropDirective  -->\n\nWisdomModule->DragDropDirective \n\n\n\n\n\nIfcComponent \n\nIfcComponent \n\nIfcComponent  -->\n\nWisdomModule->IfcComponent \n\n\n\n\n\nIonIconComponent \n\nIonIconComponent \n\nIonIconComponent  -->\n\nWisdomModule->IonIconComponent \n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nWisdomModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Components\n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        WisdomModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            InputModels   (src/.../ifc.component.ts)\n                        \n                        \n                            LayerConfig   (src/.../map.component.ts)\n                        \n                        \n                            LayerKey   (src/.../map.component.ts)\n                        \n                        \n                            LoadedModels   (src/.../ifc.component.ts)\n                        \n                        \n                            ModelEntry   (src/.../ifc.component.ts)\n                        \n                        \n                            ModelEntry   (src/.../ifc.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/ifc/ifc.component.ts\n    \n    \n        \n            \n                \n                    \n                    InputModels\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LoadedModels\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ModelEntry\n                \n            \n            \n                \n                    Model entry.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ModelEntry\n                \n            \n            \n                \n                            IfcComponent.ModelEntry\n\n                \n            \n        \n    \n    src/lib/map/map.component.ts\n    \n    \n        \n            \n                \n                    \n                    LayerConfig\n                \n            \n            \n                \n                    A layer config for the input of MapComponent.inputLayers.\n\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LayerKey\n                \n            \n            \n                \n                    Type alias to enforce the meaning of the layer keys.\n\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            API_URL   (src/.../map.service.ts)\n                        \n                        \n                            control   (src/.../invert-selection.ts)\n                        \n                        \n                            DB_NAME   (src/.../ifc.service.ts)\n                        \n                        \n                            DB_NAME   (src/.../map.service.ts)\n                        \n                        \n                            SCHEMA_V   (src/.../ifc.service.ts)\n                        \n                        \n                            SCHEMA_V   (src/.../map.service.ts)\n                        \n                        \n                            SEND_AUTH   (src/.../send-auth.ts)\n                        \n                        \n                            USE_API_URL   (src/.../use-api-url.ts)\n                        \n                        \n                            USE_BASE_URL   (src/.../use-base-url.ts)\n                        \n                        \n                            USE_CACHE   (src/.../use-cache.ts)\n                        \n                        \n                            USE_ERROR_HANDLER   (src/.../use-error-handler.ts)\n                        \n                        \n                            USE_LOADER   (src/.../use-loader.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/map/map.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        API_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"geodata\"\n                    \n                \n\n            \n                \n                    API url for the map to request data from.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DB_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"map-db\"\n                    \n                \n\n            \n                \n                    Indexed DB name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SCHEMA_V\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 2\n                    \n                \n\n            \n                \n                    Indexed DB schema version.\n\n                \n            \n\n        \n    \n\n    src/lib/map/invert-selection.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  invertSelection: (callback: (arg0: MouseEvent) => void, options?: L.ControlOptions) => {\n    let InvertSelection = L.Control.extend({\n      options: {\n        position: \"topright\"\n      },\n      initialize: function (options: any) {\n        L.Util.setOptions(this, options);\n      },\n      onAdd: function (map: L.Map) {\n        let centerContent = [\n          \"is-flex is-align-content-center\",\n          \"is-align-items-center\",\n          \"is-justify-content-center\"\n        ].join(\" \");\n\n        let container = L.DomUtil.create(\n          \"div\",\n          \"select-all-container leaflet-control-layers leaflet-control\"\n        );\n        container.addEventListener(\"click\", callback);\n        let button = L.DomUtil.create(\n          \"a\",\n          \"leaflet-control-layers-toggle \" + centerContent,\n          container\n        );\n        button.style.backgroundImage = \"none\";\n        let icon = L.DomUtil.create(\n          \"ion-icon\",\n          \"select-all-icon\",\n          button\n        );\n        icon.style.pointerEvents = \"none\";\n        icon.setAttribute(\"name\", \"extension-puzzle\");\n        icon.setAttribute(\"size\", \"large\");\n        icon.style.color = \"#a0a0a0\";\n        return container;\n      }\n    });\n    return new InvertSelection(options);\n  }\n}\n                    \n                \n\n            \n                \n                    Custom control to invert the currently selected shapes on a\nMapComponent.\n\n                \n            \n\n        \n    \n\n    src/lib/ifc/ifc.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DB_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"ifc-db\"\n                    \n                \n\n            \n                \n                    Indexed DB name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SCHEMA_V\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n\n            \n                \n                    Indexed DB schema version.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/send-auth.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SEND_AUTH\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => undefined)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if the authorization header should\nbe sent.\nAs long as this context is set to undefined it is implied by\nUSE_API_URL to be true.\nDefaults to undefined.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-api-url.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_API_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :     miscellaneous\n\n                    \n                \n                \n                    \n                        Default value : new HttpContextToken(() => false)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if the api url should be used.\nImplies SEND_AUTH.\nSetting SEND_AUTH to false will deny filling the Authorization\nheader.\nDefaults to false.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-base-url.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_BASE_URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => false)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if the base url should be used.\nDefaults to false.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-cache.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_CACHE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => true)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if cache headers should be sent.\nDefaults to true.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-error-handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_ERROR_HANDLER\n                        \n                    \n                \n            \n                \n                    \n                        Type :     miscellaneous\n\n                    \n                \n                \n                    \n                        Default value : new ErrorHttpContextToken(() => ErrorHandler.CURTAIN)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine how HTTP errors should be handled.\nThe enum associated with this token has three variants that define the behavior\nwhen an error occurs:\n\nCURTAIN: Raise a curtain displaying the error message and covering the\n entire main container.\n\nTOAST: Display a small toast notification showing the error and allowing\n continued use of the main container.\n\nCUSTOM: The error is passed through and should be handled by the implementor.\n\n\nThis token defaults to ErrorHandler.CURTAIN.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-loader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_LOADER\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => false)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if loader should be shown.\nA given string will be run through the translator and therefore may get\ntranslated.\nUseful for longer loading times.\nDefaults to false.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
