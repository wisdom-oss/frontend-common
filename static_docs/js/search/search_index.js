var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/Breadcrumb.html",[0,0.432,1,1.697]],["body/interfaces/Breadcrumb.html",[0,0.687,1,3.26,2,1.322,3,0.46,4,0.46,5,0.401,6,2.306,7,0.46,8,4.839,9,0.402,10,0.78,11,1.429,12,3.188,13,2.006,14,3.076,15,2.874,16,0.966,17,0.466,18,0.039,19,0.732,20,2.579,21,3.563,22,2.4,23,1.446,24,3.672,25,1.909,26,3.228,27,1.189,28,2.419,29,2.696,30,1.943,31,2.696,32,2.4,33,0.687,34,1.076,35,0.656,36,2.027,37,2.306,38,1.805,39,3.029,40,3.445,41,3.445,42,1.199,43,0.611,44,0.987,45,2.679,46,3.066,47,1.322,48,1.322,49,0.73,50,1.805,51,2.027,52,3.445,53,2.679,54,0.987,55,1.199,56,1.312,57,2.679,58,2.679,59,1.62,60,1.076,61,1.336,62,1.461,63,2.679,64,1.088,65,2.679,66,1.199,67,2.679,68,2.679,69,3.066,70,0.894,71,2.679,72,0.027,73,0.027]],["title/components/BreadcrumbsComponent.html",[74,0.928,75,1.243]],["body/components/BreadcrumbsComponent.html",[1,3.127,3,0.396,4,0.396,5,0.346,7,0.552,9,0.209,10,0.704,11,0.697,13,1.306,15,2.168,17,0.405,18,0.039,19,0.688,20,2.423,23,0.937,25,1.793,27,0.77,30,1.754,33,0.636,35,0.565,42,1.032,43,0.396,44,1.71,46,3.934,49,0.628,50,2.941,52,4.09,55,1.658,59,2.423,60,0.697,61,1.074,62,2.186,69,2.77,70,1.237,72,0.024,73,0.024,74,1.71,75,1.978,76,1.945,77,1.746,78,1.746,79,1.746,80,2.307,81,3.898,82,3.898,83,3.218,84,3.898,85,4.856,86,3.898,87,3.218,88,3.898,89,2.435,90,3.898,91,2.435,92,3.189,93,3.705,94,1.258,95,3.018,96,3.898,97,3.898,98,5.428,99,1.44,100,4.856,101,4.009,102,3.45,103,1.504,104,1.986,105,1.855,106,3.898,107,2.795,108,2.435,109,3.218,110,1.793,111,1.886,112,2.77,113,3.898,114,2.77,115,1.365,116,1.978,117,2.795,118,3.898,119,3.898,120,3.898,121,3.898,122,3.218,123,1.793,124,2.795,125,3.898,126,3.218,127,2.77,128,3.218,129,1.185,130,1.44,131,2.795,132,2.77,133,2.795,134,2.795,135,1.138,136,2.795,137,2.795,138,3.898,139,2.795,140,2.795,141,2.795,142,2.795,143,2.435,144,1.746,145,2.435,146,1.138,147,3.033,148,1.746,149,1.746,150,1.138,151,1.746,152,1.395,153,1.746,154,0.937,155,1.032,156,1.554,157,1.032,158,1.554,159,1.746]],["title/injectables/BreadcrumbsService.html",[34,0.761,50,1.697]],["body/injectables/BreadcrumbsService.html",[0,0.601,1,3.35,3,0.448,4,0.448,5,0.391,6,2.25,7,0.601,8,4.707,9,0.426,10,0.767,11,1.194,12,2.663,13,1.911,14,2.361,15,1.761,16,0.857,17,0.432,18,0.039,19,0.678,20,2.118,21,2.614,22,1.761,23,1.061,24,3.016,25,2.072,26,2.652,27,1.17,28,2.39,29,1.978,30,1.425,31,1.978,32,1.761,33,0.678,34,1.058,35,0.64,36,1.978,37,2.25,38,1.761,39,3.333,40,3.791,41,3.903,42,1.169,43,0.601,44,1.291,45,3.504,46,3.791,47,1.29,48,1.29,49,0.712,50,2.361,51,2.652,52,3.986,53,2.614,54,1.291,55,1.769,56,1.556,57,3.504,58,3.504,59,2.118,60,1.058,61,1.546,62,1.911,63,3.504,64,1.605,65,2.614,66,1.169,67,2.614,68,2.614,69,3.903,70,0.873,71,2.614,72,0.026,73,0.026,99,1.568,105,1.715,115,1.291,123,1.169,129,1.291,160,1.761,161,3.166,162,3.166,163,3.166,164,3.166]],["title/directives/BulmaIsToggleableDirective.html",[146,1.243,157,1.127]],["body/directives/BulmaIsToggleableDirective.html",[3,0.532,4,0.532,5,0.464,7,0.672,9,0.281,11,0.937,17,0.339,18,0.039,19,0.532,27,1.035,30,2.536,33,0.532,35,0.759,43,0.532,49,1.294,60,0.937,72,0.029,73,0.029,94,1.691,95,2.639,99,1.753,103,1.743,105,1.743,115,1.142,123,1.388,135,1.531,146,2.344,156,2.089,157,1.753,158,3.038,165,4.51,166,3.102,167,4.746,168,4.746,169,5.635,170,4.746,171,4.746,172,4.75,173,5.754,174,4.746,175,3.917,176,3.757,177,3.65,178,3.757,179,3.917,180,4.746,181,4.746,182,5.202,183,4.294,184,5.202,185,5.202,186,2.67,187,3.757,188,3.757,189,2.089,190,3.757,191,3.757,192,3.757]],["title/components/IfcComponent.html",[74,0.928,150,1.243]],["body/components/IfcComponent.html",[3,0.156,4,0.156,5,0.36,7,0.412,9,0.082,10,0.526,11,1.114,13,1.753,15,1.045,16,0.644,17,0.472,18,0.039,19,0.504,20,1.227,22,1.98,23,0.369,25,1.315,27,0.678,30,0.846,32,1.618,33,0.538,35,0.222,43,0.348,44,1.156,49,0.247,54,1.082,55,1.978,56,0.994,59,0.549,60,0.814,61,1.048,70,0.981,72,0.012,73,0.012,74,1.542,75,0.448,76,0.938,77,1.174,78,0.687,79,0.687,91,1.174,92,1.748,93,2.031,94,0.495,95,2.115,99,0.694,101,2.402,102,2.067,103,0.975,104,0.782,105,1.737,109,0.908,111,1.65,114,3.08,115,0.994,116,1.82,123,1.315,127,1.335,129,1.318,130,1.315,132,3.08,143,2.503,144,0.687,145,1.174,146,0.448,147,1.817,148,0.687,149,0.687,150,1.331,151,0.687,152,0.549,153,0.687,154,0.369,155,0.406,156,0.612,157,0.406,158,0.612,159,0.687,177,2.041,183,0.908,186,1.335,189,2.411,193,0.782,194,1.551,195,3.237,196,4.163,197,2.031,198,2.46,199,4.451,200,2.46,201,2.46,202,3.268,203,4.183,204,5.635,205,3.268,206,1.879,207,2.402,208,1.817,209,1.879,210,1.335,211,3.579,212,4.008,213,1.879,214,1.551,215,2.848,216,1.618,217,1.602,218,1.817,219,1.879,220,1.045,221,1.368,222,1.551,223,1.879,224,4.135,225,2.322,226,1.879,227,1.1,228,2.46,229,3.56,230,1.748,231,1.879,232,1.879,233,2.697,234,2.46,235,1.879,236,2.909,237,3.579,238,1.1,239,1.602,240,1.776,241,2.326,242,2.067,243,4.008,244,1.335,245,1.335,246,1.879,247,1.879,248,2.848,249,3.596,250,1.879,251,1.879,252,2.46,253,1.879,254,4.865,255,1.551,256,1.335,257,2.067,258,2.939,259,1.1,260,2.909,261,3.268,262,1.1,263,1.879,264,2.322,265,2.224,266,0.885,267,1.879,268,2.067,269,1.1,270,2.067,271,1.335,272,1.174,273,1.335,274,1.879,275,1.879,276,1.879,277,1.551,278,1.879,279,1.879,280,1.1,281,2.46,282,2.531,283,3.56,284,2.402,285,2.909,286,2.909,287,2.909,288,3.56,289,2.909,290,2.909,291,3.56,292,3.56,293,3.56,294,2.34,295,2.354,296,1.879,297,3.56,298,1.879,299,1.537,300,2.402,301,3.308,302,2.909,303,1.879,304,1.879,305,1.879,306,2.067,307,1.1,308,1.551,309,1.879,310,1.879,311,2.909,312,1.879,313,1.879,314,1.879,315,1.335,316,1.1,317,1.879,318,1.551,319,1.879,320,1.551,321,3.803,322,1.1,323,1.879,324,1.1,325,1.879,326,2.402,327,1.879,328,1.1,329,1.879,330,1.879,331,1.879,332,1.1,333,2.909,334,1.1,335,2.46,336,1.1,337,1.1,338,1.1,339,2.322,340,1.1,341,2.909,342,2.46,343,1.879,344,1.879,345,2.46,346,2.46,347,1.1,348,1.174,349,1.879,350,1.551,351,2.909,352,1.551,353,2.067,354,1.879,355,1.879,356,1.879,357,2.46,358,1.879,359,1.879,360,1.045,361,1.1,362,1.1,363,0.908,364,2.46,365,2.909,366,1.1,367,1.1,368,1.1,369,1.1,370,1.1,371,0.782,372,0.782,373,0.908,374,1.1,375,2.041,376,1.1,377,1.879,378,1.1,379,1.1,380,1.1,381,0.908,382,1.879,383,1.1,384,1.1,385,1.879,386,1.1,387,2.46,388,1.879,389,1.879,390,1.1,391,1.227,392,0.908,393,1.1,394,1.1,395,1.1,396,1.1,397,1.1,398,1.1,399,1.1,400,1.1,401,1.1,402,1.1,403,1.1,404,1.879,405,2.163,406,1.879,407,1.1,408,2.46,409,0.782,410,0.612,411,1.1,412,0.782,413,1.879,414,0.908,415,0.549,416,1.1,417,1.1,418,1.1,419,1.1,420,1.1,421,1.1,422,0.908,423,0.908,424,1.1,425,1.1,426,1.879,427,1.551,428,1.879,429,1.551,430,2.909,431,1.1,432,1.1,433,1.1,434,0.782,435,0.549,436,1.1,437,3.268,438,1.1,439,1.1,440,1.1,441,1.1,442,1.1,443,1.1,444,1.1,445,1.1,446,1.879,447,1.1,448,1.1,449,0.908,450,1.1,451,1.879,452,0.908,453,1.1,454,0.908,455,0.908,456,1.1,457,1.1,458,1.1,459,1.1,460,1.1,461,1.1,462,1.1,463,1.1,464,1.1,465,1.1,466,1.879,467,1.1,468,0.908,469,1.1,470,0.687,471,1.551,472,1.1,473,1.1,474,1.1,475,0.908,476,1.879,477,1.1,478,1.1,479,1.879,480,1.1,481,1.1,482,1.1,483,0.549,484,1.1,485,1.1,486,1.1,487,0.782,488,0.908,489,0.908,490,1.1,491,1.1,492,1.1,493,1.1,494,1.1,495,2.46,496,1.1,497,1.1,498,1.879,499,1.1,500,1.1,501,1.1,502,1.1,503,1.1,504,1.1,505,1.1,506,1.1,507,1.1,508,1.1]],["title/interfaces/IfcDB.html",[0,0.432,509,1.906]],["body/interfaces/IfcDB.html",[0,0.449,2,1.292,3,0.449,4,0.449,5,0.392,7,0.449,9,0.237,10,0.768,16,0.682,17,0.433,18,0.039,19,0.449,33,0.756,34,1.059,35,0.641,42,1.171,43,0.449,44,0.964,47,1.292,48,1.292,49,0.713,55,1.171,56,1.457,60,1.195,61,1.321,66,1.171,70,1.171,72,0.026,73,0.026,103,1.063,110,1.171,111,1.171,116,1.292,130,1.171,135,1.292,195,3.506,196,4.053,208,1.763,216,1.763,217,1.427,220,1.763,221,2.847,248,2.253,249,3.335,264,2.253,266,1.292,294,2.555,295,1.427,375,3.563,391,2.12,405,2.391,415,1.582,434,2.253,435,2.801,483,1.582,509,2.654,510,1.981,511,2.665,512,2.12,513,2.654,514,2.993,515,3.019,516,2.654,517,1.891,518,3.019,519,3.507,520,3.507,521,2.993,522,4.226,523,1.981,524,2.993,525,2.654,526,1.981,527,1.981,528,1.582,529,2.993,530,1.582,531,1.763,532,2.847,533,1.582,534,1.427,535,2.12,536,2.617,537,2.654,538,1.981,539,2.363,540,1.427,541,2.654,542,1.981,543,1.981,544,2.654,545,2.617,546,2.617,547,1.981,548,1.981,549,1.981,550,2.617,551,2.993,552,2.617,553,3.507,554,2.617,555,2.617,556,3.019,557,2.617,558,1.981,559,1.763,560,2.617,561,2.617,562,2.617,563,2.617]],["title/injectables/IfcService.html",[34,0.761,216,1.697]],["body/injectables/IfcService.html",[0,0.415,3,0.415,4,0.415,5,0.362,7,0.652,9,0.219,10,0.728,11,1.004,16,0.796,17,0.364,18,0.039,19,0.652,27,1.11,33,0.736,34,1.004,35,0.592,42,1.083,43,0.415,44,1.225,47,1.194,48,1.194,49,0.659,55,1.7,56,1.4,60,1.147,61,1.268,66,1.083,70,1.11,72,0.025,73,0.025,99,1.488,103,1.543,105,1.543,110,1.083,111,1.488,115,0.891,116,1.875,129,0.891,130,1.488,135,1.194,160,1.63,195,3.435,196,3.814,208,2.56,216,2.24,217,1.32,220,2.24,221,3.115,248,2.863,249,3.096,264,2.863,266,1.507,294,2.473,295,1.813,375,3.55,391,2.473,405,2.297,415,2.01,434,2.863,435,2.795,483,2.01,509,1.831,510,1.831,511,2.24,512,1.463,513,1.831,514,2.517,516,1.831,517,1.831,518,2.083,519,2.42,520,2.42,521,2.875,522,3.8,523,1.831,524,3.245,525,3.096,526,1.831,527,1.831,528,1.463,529,3.096,530,1.463,531,1.63,532,2.985,533,1.463,534,1.32,535,2.01,536,3.326,537,3.096,538,2.875,539,2.756,540,1.813,541,2.517,542,1.831,543,1.831,544,2.517,545,2.42,546,2.42,547,2.517,548,2.517,549,2.517,550,3.326,551,3.245,552,3.326,553,3.326,554,2.42,555,2.42,556,2.863,557,2.42,558,1.831,559,1.63,560,2.42,561,2.42,562,2.42,563,2.42,564,4.029,565,2.42,566,4.029,567,2.932]],["title/components/IonIconComponent.html",[23,1.023,74,0.928]],["body/components/IonIconComponent.html",[3,0.428,4,0.428,5,0.373,7,0.582,9,0.226,11,1.025,12,3.136,13,1.012,16,0.806,17,0.422,18,0.039,19,0.855,22,2.286,23,1.682,25,1.115,27,1.133,30,2.494,33,0.428,35,0.61,43,0.428,49,0.679,54,1.596,60,0.753,62,1.85,72,0.025,73,0.025,74,1.685,75,1.23,76,2.051,77,1.886,78,1.886,79,1.886,94,1.359,95,3.082,103,1.566,105,1.566,110,1.853,115,0.918,123,1.115,128,4.471,135,1.23,144,1.886,145,2.568,146,1.23,147,3.134,148,1.886,149,1.886,150,1.23,151,1.886,152,2.703,153,1.886,154,1.012,155,1.115,156,1.679,157,1.115,158,1.679,159,1.886,177,3.134,179,3.393,189,2.286,210,2.921,230,2.921,306,2.921,353,3.848,409,3.321,423,3.858,487,2.921,512,2.051,568,4.142,569,3.565,570,2.492,571,3.393,572,5.719,573,5.018,574,4.111,575,4.111,576,4.111,577,3.393,578,3.019,579,3.019,580,4.674,581,4.111,582,4.111,583,5.416,584,4.674,585,4.674,586,4.674,587,4.674,588,4.674,589,4.674,590,4.674,591,3.858,592,4.674,593,3.858,594,3.858,595,4.674,596,4.674,597,4.674,598,3.019,599,3.019,600,3.019]],["title/interfaces/LayerData.html",[0,0.432,601,1.373]],["body/interfaces/LayerData.html",[0,0.678,2,1.553,3,0.54,4,0.54,5,0.471,7,0.54,9,0.285,10,0.865,16,0.841,17,0.511,18,0.039,19,0.678,33,0.678,43,0.742,51,2.992,64,1.987,72,0.029,73,0.029,94,1.716,129,1.159,266,1.67,273,2.709,348,2.992,410,2.12,517,1.769,540,2.156,601,2.357,602,2.709,603,2.709,604,4.323,605,2.156,606,3.953,607,2.663,608,3.608,609,2.958,610,3.953,611,2.663,612,3.953,613,2.741,614,2.382,615,1.553,616,3.953,617,2.613,618,3.147,619,3.147,620,3.147,621,3.147,622,3.147,623,2.382]],["title/injectables/LoaderInjector.html",[34,0.761,218,1.906]],["body/injectables/LoaderInjector.html",[3,0.498,4,0.498,5,0.434,7,0.644,9,0.263,10,0.822,11,0.876,15,2.528,16,0.856,17,0.41,18,0.038,19,0.498,27,0.968,33,0.498,34,1.133,35,0.71,43,0.498,44,1.621,47,1.431,48,1.431,49,0.79,56,1.382,60,1.133,61,0.968,62,2.047,72,0.028,73,0.028,76,2.269,99,1.679,105,1.524,112,3.231,115,1.069,123,1.298,129,1.069,160,1.954,217,2.675,218,2.84,222,4.4,225,3.231,268,3.922,270,3.231,271,3.231,295,2.59,315,3.231,318,3.753,470,3.149,489,3.753,517,1.862,571,3.753,624,2.901,625,4.547,626,5.655,627,2.84,628,4.547,629,4.547,630,5.894,631,4.547,632,4.547,633,4.547,634,3.787,635,4.547,636,4.547,637,5.52,638,3.514,639,3.753,640,2.269,641,4.547,642,4.547,643,2.497,644,3.753,645,4.547,646,3.514,647,4.547,648,4.547,649,3.514]],["title/components/MapComponent.html",[74,0.928,154,1.023]],["body/components/MapComponent.html",[3,0.148,4,0.148,5,0.129,7,0.254,9,0.176,10,0.507,11,1.019,13,1.676,16,0.769,17,0.498,18,0.039,19,0.689,20,1.951,22,0.58,23,0.349,25,1.168,27,0.651,28,1.179,30,1.263,31,1.121,32,1.56,33,0.601,35,0.211,39,2.159,40,3.111,41,2.904,42,0.385,43,0.148,44,1.29,49,0.234,54,1.455,55,2.079,56,1.368,59,1.179,60,0.447,61,1.34,62,2.154,64,0.792,66,0.385,70,0.287,72,0.011,73,0.011,74,0.962,75,0.425,76,0.895,77,1.121,78,0.651,79,0.651,91,1.121,92,1.678,94,0.469,95,2.058,99,0.663,102,1.994,103,0.94,104,0.741,105,1.849,111,0.385,112,0.741,115,0.962,116,1.143,123,1.444,126,1.481,127,3.111,129,1.4,130,1.276,143,1.753,144,0.651,145,2.312,146,0.425,147,1.753,148,0.651,149,0.651,150,0.425,151,0.651,152,0.52,153,0.651,154,0.94,155,2.122,156,0.58,157,0.385,158,0.58,159,0.651,177,1.475,186,0.741,189,2.923,194,1.481,197,1.95,207,2.317,210,1.275,211,3.502,214,2.853,215,3.634,230,1.678,233,2.611,239,2.325,240,1.578,241,2.561,242,0.741,245,1.275,255,1.481,256,1.275,257,1.678,266,1.455,268,2.247,271,1.678,272,1.121,277,1.95,282,0.895,294,0.895,299,0.651,300,1.481,306,1.275,339,0.741,350,1.95,353,1.678,363,0.86,371,0.741,372,0.741,375,0.651,405,0.895,409,0.741,410,1.56,412,0.741,414,1.481,415,0.895,422,1.95,427,2.317,452,1.481,468,2.611,470,2.159,483,1.179,487,1.994,517,1.768,531,0.998,540,1.971,577,1.481,594,3.055,601,1.759,605,2.542,607,0.998,609,2.298,611,0.998,614,0.651,615,0.962,617,0.52,619,1.56,639,0.86,640,2.388,650,1.042,651,0.741,652,1.794,653,1.794,654,2.362,655,4.074,656,3.614,657,2.362,658,2.362,659,3.614,660,2.362,661,2.362,662,2.806,663,3.163,664,3.34,665,2.806,666,3.374,667,1.794,668,2.362,669,2.362,670,2.362,671,2.806,672,1.794,673,1.794,674,1.56,675,1.794,676,1.275,677,1.042,678,1.042,679,1.794,680,2.806,681,3.374,682,1.95,683,2.904,684,2.806,685,2.362,686,2.362,687,1.678,688,2.362,689,2.362,690,2.806,691,2.362,692,2.362,693,2.362,694,1.042,695,1.794,696,2.312,697,1.794,698,1.042,699,1.794,700,2.806,701,1.794,702,1.794,703,1.794,704,1.794,705,1.042,706,2.317,707,1.042,708,2.806,709,1.56,710,1.794,711,1.042,712,1.794,713,1.042,714,2.806,715,3.34,716,1.794,717,2.806,718,1.042,719,1.042,720,2.317,721,1.794,722,1.042,723,1.794,724,1.042,725,1.794,726,1.794,727,1.794,728,1.042,729,3.227,730,1.794,731,1.794,732,1.794,733,1.042,734,1.042,735,1.042,736,1.794,737,3.614,738,1.042,739,1.481,740,1.042,741,1.042,742,1.042,743,1.794,744,1.042,745,2.362,746,1.042,747,1.042,748,1.275,749,1.042,750,2.806,751,1.794,752,1.794,753,1.042,754,1.794,755,2.317,756,1.042,757,1.042,758,1.042,759,1.042,760,1.042,761,1.042,762,1.042,763,0.86,764,1.794,765,1.042,766,1.042,767,1.042,768,1.042,769,1.042,770,1.794,771,1.794,772,1.042,773,1.042,774,0.86,775,1.042,776,1.042,777,1.042,778,1.042,779,1.042,780,1.042,781,0.86,782,1.042,783,0.86,784,0.86,785,1.481,786,0.86,787,1.042,788,1.042,789,1.042,790,1.042,791,1.042,792,1.042,793,1.042,794,1.042,795,1.042,796,1.042,797,1.042,798,1.042,799,1.042,800,1.042,801,1.042,802,1.042,803,1.042,804,1.042,805,1.042,806,1.042,807,1.042,808,1.042,809,1.794,810,1.042,811,1.794,812,1.042,813,1.794,814,1.794,815,1.042,816,1.794,817,1.042,818,1.042,819,0.86,820,1.794,821,1.042,822,1.794,823,1.042,824,1.042,825,1.042,826,1.042,827,0.86,828,0.741,829,1.042,830,1.042,831,1.042,832,1.042,833,1.042,834,1.042,835,1.042,836,1.042,837,1.042,838,1.042,839,1.042,840,1.042,841,1.042,842,1.042,843,1.042,844,1.042,845,1.481,846,1.042,847,1.042,848,2.362,849,1.794,850,1.042,851,2.362,852,1.042,853,2.362,854,0.741,855,1.042,856,1.042,857,1.042,858,1.794,859,1.042,860,1.042,861,1.042,862,1.794,863,1.794,864,1.042,865,1.042,866,1.042,867,1.042,868,1.042,869,1.481,870,1.042,871,1.042,872,2.362,873,1.042,874,1.042,875,1.042,876,2.806,877,1.042,878,1.042,879,1.042,880,1.042,881,1.042,882,1.042,883,1.042,884,1.042,885,0.651,886,0.86,887,0.86,888,1.794,889,1.042,890,1.794,891,1.042,892,1.042,893,1.042,894,1.794,895,1.042,896,1.042,897,1.042,898,1.042,899,1.794,900,1.042,901,1.042,902,1.042,903,1.042,904,1.042,905,1.794,906,1.042,907,1.042,908,1.042,909,1.042,910,0.741,911,1.042,912,2.362,913,1.042,914,1.042,915,1.042,916,1.042,917,1.042,918,1.042,919,1.042,920,3.456,921,1.042,922,1.042,923,1.042,924,1.042,925,1.042,926,1.042,927,1.042,928,1.042,929,1.042,930,1.042,931,1.794,932,1.794,933,1.042,934,1.042,935,1.042,936,1.042,937,1.042,938,1.042,939,1.042,940,1.042,941,1.794,942,1.042,943,1.042,944,1.042,945,1.042,946,1.042,947,1.042,948,1.042]],["title/interfaces/MapDB.html",[0,0.432,949,1.906]],["body/interfaces/MapDB.html",[0,0.321,2,0.922,3,0.321,4,0.321,5,0.28,7,0.321,9,0.169,10,0.605,13,1.336,14,2.739,16,0.755,17,0.46,18,0.039,19,0.321,26,2.753,28,2.199,33,0.757,34,0.835,35,0.457,42,0.836,43,0.321,44,1.019,47,0.922,48,0.922,49,0.509,54,1.34,55,0.836,56,1.212,60,1.099,61,1.357,64,1.123,66,1.473,70,1.214,72,0.021,73,0.021,89,1.414,103,0.759,108,1.414,110,1.237,111,0.836,116,0.922,130,1.628,135,0.922,155,1.882,208,1.259,217,1.019,220,1.259,221,2.217,239,2.482,240,1.99,266,1.697,272,1.414,294,2.347,295,1.019,360,2.451,391,1.13,405,1.99,415,1.672,435,2.785,483,1.13,511,2.217,512,1.672,513,2.093,514,2.491,515,3.131,516,2.753,517,1.882,521,1.414,523,1.414,524,2.491,525,2.093,526,2.093,527,1.414,528,1.13,529,2.753,530,1.672,531,1.259,532,2.616,533,1.13,534,1.019,535,1.672,537,2.093,538,2.093,539,2.451,540,1.795,541,2.093,542,1.414,543,1.414,544,2.093,547,1.414,548,2.491,549,2.093,551,2.753,558,1.414,559,1.259,601,2.217,605,1.984,607,1.259,608,2.491,609,2.814,613,2.543,615,0.922,617,1.13,619,2.451,623,1.414,640,2.839,674,1.259,676,1.609,683,2.38,687,1.609,709,1.863,828,1.609,885,1.414,910,1.609,949,2.093,950,1.414,951,4.065,952,2.765,953,2.765,954,3.638,955,3.292,956,3.292,957,2.765,958,2.765,959,2.765,960,2.765,961,1.414,962,1.414,963,1.609,964,1.869,965,1.869,966,1.869,967,1.869,968,1.869,969,1.869,970,1.869,971,1.869,972,1.869,973,2.765,974,3.292,975,1.869,976,3.292,977,2.765,978,1.869,979,2.765,980,1.869,981,2.765,982,2.765,983,2.765,984,1.869,985,1.869,986,1.869,987,1.869,988,2.765,989,1.869,990,1.869,991,1.869,992,1.869,993,1.869,994,1.869,995,1.869,996,1.869,997,2.765,998,1.869,999,1.609,1000,1.414,1001,1.869,1002,1.869,1003,1.869,1004,1.869,1005,1.869,1006,1.869,1007,1.869,1008,1.869,1009,1.869,1010,1.869,1011,1.869,1012,1.869,1013,1.869,1014,1.869,1015,2.765,1016,1.869,1017,1.869,1018,1.869,1019,1.869,1020,1.869,1021,1.869,1022,1.869]],["title/injectables/MapService.html",[34,0.761,674,1.697]],["body/injectables/MapService.html",[0,0.305,3,0.305,4,0.305,5,0.266,7,0.548,9,0.161,10,0.583,11,0.804,13,1.297,14,2.152,16,0.805,17,0.349,18,0.039,19,0.548,26,2.686,27,0.889,28,1.61,33,0.747,34,0.804,35,0.435,42,0.795,43,0.305,44,1.307,47,0.877,48,0.877,49,0.484,54,0.981,55,1.43,56,1.177,60,1.072,61,1.269,64,1.082,66,1.192,70,1.185,72,0.02,73,0.02,89,2.016,99,1.192,103,1.297,105,1.297,108,1.345,110,1.588,111,1.192,115,0.655,116,1.577,129,0.655,130,1.701,135,0.877,155,1.947,160,1.197,208,2.152,217,0.969,220,1.795,221,2.689,239,2.486,240,1.932,266,1.753,272,1.345,294,2.298,295,1.453,360,2.689,391,1.61,405,1.932,415,1.932,435,2.68,483,1.61,511,1.795,512,1.074,513,1.345,514,2.016,516,2.686,517,1.701,521,2.016,523,1.345,524,2.877,525,2.686,526,2.016,527,1.345,528,1.074,529,2.877,530,1.61,531,1.197,532,2.561,533,1.074,534,0.969,535,1.61,537,2.686,538,2.686,539,2.689,540,2.176,541,2.016,542,1.345,543,1.345,544,2.016,547,2.016,548,2.418,549,2.686,551,3.02,558,1.345,559,1.197,565,1.777,601,2.073,605,1.742,607,1.197,608,2.418,609,2.721,613,2.298,615,0.877,617,1.074,619,2.152,623,1.345,640,2.857,643,1.53,674,1.795,676,2.293,683,3.435,687,1.53,709,1.795,828,2.293,885,1.345,910,1.53,949,1.345,950,1.345,951,2.664,952,1.777,953,1.777,954,2.664,955,3.195,956,3.195,957,1.777,958,1.777,959,2.664,960,2.664,961,1.345,962,1.345,963,1.53,964,1.777,965,2.664,966,1.777,967,1.777,968,1.777,969,1.777,970,2.664,971,3.195,972,1.777,973,2.664,974,3.195,975,1.777,976,3.195,977,2.664,978,1.777,979,2.664,980,1.777,981,2.664,982,2.664,983,2.664,984,1.777,985,1.777,986,1.777,987,1.777,988,2.664,989,1.777,990,1.777,991,1.777,992,1.777,993,1.777,994,1.777,995,1.777,996,1.777,997,2.664,998,1.777,999,1.53,1000,1.345,1001,1.777,1002,1.777,1003,1.777,1004,1.777,1005,1.777,1006,1.777,1007,1.777,1008,1.777,1009,1.777,1010,1.777,1011,1.777,1012,1.777,1013,1.777,1014,1.777,1015,2.664,1016,1.777,1017,1.777,1018,1.777,1019,1.777,1020,1.777,1021,1.777,1022,1.777,1023,3.227,1024,2.153,1025,2.153]],["title/interfaces/Marker.html",[0,0.432,696,1.906]],["body/interfaces/Marker.html",[0,0.734,2,1.518,3,0.528,4,0.528,5,0.461,7,0.528,9,0.279,10,0.853,11,1.471,12,3.193,13,1.249,17,0.492,18,0.039,20,2.356,25,1.744,33,0.669,43,0.528,54,1.436,59,2.356,64,1.925,72,0.029,73,0.029,123,1.377,129,1.436,154,1.582,175,3.898,270,3.355,282,2.356,605,2.333,611,3.193,614,2.328,615,1.923,634,3.355,659,3.898,696,3.792,1000,3.511,1026,3.077,1027,4.722,1028,5.448,1029,6.002,1030,5.182,1031,5.182,1032,4.722,1033,4.722,1034,4.722,1035,3.728]],["title/guards/QueryParameterGuard.html",[1036,1.906,1037,2.168]],["body/guards/QueryParameterGuard.html",[3,0.677,4,0.447,5,0.39,7,0.677,9,0.236,11,1.274,13,1.787,14,2.356,16,0.856,17,0.382,18,0.039,19,0.6,24,4.18,25,1.565,27,1.408,28,2.114,29,2.647,31,2.647,33,0.677,34,1.056,35,0.638,36,3.193,37,3.788,38,1.756,39,3.33,42,1.166,43,0.447,47,1.286,48,1.286,49,0.71,54,1.554,60,1.274,70,1.168,72,0.026,73,0.026,87,3.498,91,1.973,99,1.565,103,1.603,105,1.42,108,3.56,110,1.166,111,1.166,115,0.96,116,1.726,130,1.166,132,3.011,135,1.286,239,1.907,266,1.288,295,2.301,348,3.193,449,2.607,591,3.498,715,3.011,1036,2.647,1037,3.632,1038,2.607,1039,3.948,1040,2.607,1041,4.238,1042,4.101,1043,4.238,1044,4.238,1045,4.238,1046,4.238,1047,5.111,1048,5.699,1049,4.238,1050,4.238,1051,5.331,1052,3.158,1053,3.158,1054,4.238,1055,4.238,1056,3.158,1057,4.531,1058,5.111,1059,3.158,1060,4.219,1061,4.238,1062,3.498,1063,3.158,1064,3.158,1065,3.158,1066,3.158,1067,3.158]],["title/interfaces/ShapeData.html",[0,0.432,613,1.523]],["body/interfaces/ShapeData.html",[0,0.672,2,1.531,3,0.532,4,0.532,5,0.464,7,0.532,9,0.281,10,0.858,16,0.958,17,0.527,18,0.039,19,0.815,33,0.672,43,0.737,51,2.347,64,1.981,72,0.029,73,0.029,94,2.136,129,1.142,266,1.443,273,3.372,348,2.347,410,2.639,517,2.125,540,1.691,601,2.136,602,2.67,603,2.67,604,4.294,605,1.691,606,3.102,607,2.089,608,2.964,609,2.596,610,3.102,611,2.089,612,3.102,613,2.596,614,2.347,615,1.531,616,4.51,617,2.916,618,3.917,619,3.342,620,3.917,621,3.917,622,3.917,623,3.413]],["title/interfaces/WisdomInterface.html",[0,0.432,1068,2.168]],["body/interfaces/WisdomInterface.html",[0,0.798,2,1.533,3,0.533,4,0.533,5,0.465,7,0.533,9,0.281,10,0.858,16,0.836,17,0.47,18,0.039,19,0.673,33,0.533,38,2.093,43,0.533,72,0.029,73,0.029,74,1.75,239,2.461,241,2.895,257,3.375,265,3.415,299,2.967,373,3.921,470,2.967,475,3.921,512,2.37,627,3.415,644,3.921,682,3.921,869,3.921,1038,4.513,1042,4.271,1068,3.884,1069,3.107,1070,5.467,1071,3.415,1072,4.75,1073,4.75,1074,4.75,1075,4.75,1076,5.757,1077,5.757,1078,4.75,1079,4.75,1080,4.75,1081,4.75,1082,4.75]],["title/modules/WisdomModule.html",[627,1.906,1083,1.906]],["body/modules/WisdomModule.html",[3,0.525,4,0.525,5,0.459,18,0.038,23,2.033,33,0.843,35,0.75,38,2.063,43,0.525,49,0.834,72,0.029,73,0.029,75,2.471,150,2.471,152,1.851,154,2.033,157,2.241,371,2.636,372,2.636,569,2.636,664,3.345,854,2.636,1071,2.317,1083,3.872,1084,2.94,1085,3.062,1086,3.062,1087,3.062,1088,3.062,1089,3.71,1090,4.707,1091,4.707,1092,4.707,1093,3.062,1094,4.707,1095,4.707,1096,4.707,1097,3.71,1098,3.71,1099,3.71,1100,3.71,1101,3.71,1102,3.71,1103,3.71]],["title/coverage.html",[1104,3.418]],["body/coverage.html",[0,0.798,1,1.792,5,0.398,6,3.052,17,0.291,18,0.039,23,1.08,34,1.285,50,1.792,56,0.98,72,0.026,73,0.026,74,1.567,75,1.313,80,2.661,146,1.313,150,1.313,154,1.08,157,1.19,165,2.661,166,2.661,193,2.29,216,1.792,218,2.013,282,2.812,360,1.792,509,2.013,510,3.219,528,1.608,530,2.678,533,2.144,535,2.144,568,2.661,569,2.29,570,2.661,601,1.451,602,3.052,603,3.052,613,1.608,624,2.661,651,2.29,674,1.792,696,2.013,748,2.29,845,5.172,949,2.013,950,3.353,961,2.013,962,2.013,1026,2.661,1036,2.013,1037,2.29,1039,2.661,1040,2.661,1068,2.29,1069,2.661,1104,2.661,1105,3.223,1106,3.223,1107,3.223,1108,5.154,1109,3.223,1110,5.154,1111,5.368,1112,4.557,1113,2.661,1114,2.661,1115,5.945,1116,2.661,1117,6.118,1118,3.546,1119,2.661,1120,2.661,1121,2.661,1122,2.661,1123,2.661,1124,2.661,1125,2.661,1126,2.661,1127,3.223,1128,3.223,1129,2.661,1130,2.661,1131,3.223,1132,3.052,1133,2.661,1134,2.661,1135,4.431,1136,2.661,1137,2.661,1138,2.661,1139,2.661,1140,2.661,1141,3.223,1142,3.223]],["title/dependencies.html",[1084,2.288,1143,2.113]],["body/dependencies.html",[18,0.037,35,0.964,72,0.034,73,0.034,1084,3.423,1093,3.938,1144,4.771,1145,4.771,1146,4.771,1147,5.481]],["title/miscellaneous/enumerations.html",[1148,1.043,1149,3.024]],["body/miscellaneous/enumerations.html",[9,0.347,18,0.037,61,1.617,62,2.088,72,0.033,73,0.033,155,1.713,640,2.691,763,4.451,774,4.451,1057,4.451,1132,3.295,1148,1.889,1149,3.829,1150,3.829,1151,4.638,1152,5.392]],["title/miscellaneous/functions.html",[244,2.603,1148,1.043]],["body/miscellaneous/functions.html",[7,0.802,9,0.246,11,1.412,16,0.924,17,0.501,18,0.038,19,0.802,27,1.561,29,2.721,32,2.422,36,2.721,44,1.485,54,1.001,64,1.898,70,0.907,72,0.027,73,0.027,74,1.001,83,2.717,110,1.609,114,2.339,115,1.722,143,3.376,155,1.803,240,1.642,241,2.422,244,2.339,245,2.339,256,2.339,265,2.721,266,1.001,282,2.436,301,2.717,315,2.339,352,2.717,410,2.422,488,2.717,517,1.919,518,2.339,534,1.481,556,2.339,593,2.717,611,1.83,615,1.341,617,1.642,640,2.827,643,2.339,681,3.596,706,4.03,709,1.83,720,2.717,886,2.717,887,4.29,1042,3.469,1060,2.717,1062,3.596,1132,2.339,1133,3.596,1134,3.596,1135,2.717,1136,3.596,1137,3.596,1138,3.596,1139,3.596,1140,3.596,1148,1.341,1150,3.596,1153,5.405,1154,3.291,1155,3.291,1156,3.291,1157,4.356,1158,3.291,1159,3.291,1160,3.291,1161,3.291,1162,3.291,1163,3.291,1164,3.291,1165,3.291,1166,3.291,1167,3.291,1168,3.291,1169,3.291,1170,3.291,1171,3.291,1172,3.291,1173,3.291,1174,3.291,1175,3.291,1176,3.291,1177,3.291,1178,3.291,1179,3.291,1180,4.356,1181,4.883,1182,4.356,1183,3.291,1184,3.291,1185,3.291,1186,3.291,1187,3.291,1188,2.717,1189,3.291,1190,3.291,1191,4.883,1192,2.717,1193,3.291,1194,3.291,1195,3.291,1196,3.291,1197,5.405,1198,3.291,1199,3.291]],["title/index.html",[9,0.228,1200,2.519]],["body/index.html",[2,1.694,18,0.038,23,2.001,66,2.011,72,0.031,73,0.031,75,2.432,76,2.075,146,1.694,150,2.432,154,2.001,157,2.205,160,2.313,627,2.598,664,3.591,755,3.433,854,2.955,1036,2.598,1083,3.896,1084,3.157,1085,3.433,1086,3.433,1087,3.433,1088,3.433,1200,3.433,1201,5.054]],["title/modules.html",[1071,2.586]],["body/modules.html",[18,0.034,72,0.034,73,0.034,1071,3.017,1083,3.017,1202,4.83,1203,4.83,1204,4.83,1205,4.83]],["title/properties.html",[10,0.662,1143,2.113]],["body/properties.html",[10,0.876,18,0.036,72,0.034,73,0.034,534,2.183,1206,4.85]],["title/miscellaneous/typealiases.html",[1148,1.043,1207,3.664]],["body/miscellaneous/typealiases.html",[9,0.335,16,0.721,17,0.508,18,0.033,72,0.033,73,0.033,189,2.495,193,3.188,199,4.365,237,4.365,239,2.019,241,3.127,249,2.802,258,4.794,299,2.802,392,3.704,412,3.188,515,3.188,605,2.38,651,3.188,656,4.365,737,4.365,783,3.704,784,3.704,785,3.704,786,3.704,1148,1.828,1208,4.487,1209,5.807,1210,5.288]],["title/miscellaneous/variables.html",[1148,1.043,1211,3.024]],["body/miscellaneous/variables.html",[9,0.204,12,2.464,16,0.772,17,0.487,18,0.039,19,0.543,25,1.008,54,1.673,56,1.639,61,1.594,64,1.285,66,1.008,70,1.056,72,0.024,73,0.024,89,1.705,110,1.637,111,1.991,122,2.253,123,1.008,129,1.759,130,1.87,152,1.362,154,0.915,155,1.637,172,2.253,195,1.705,215,1.939,217,1.229,224,2.253,225,1.939,240,1.362,242,1.939,265,1.705,266,0.83,282,1.913,284,2.253,308,2.253,320,2.253,326,2.253,339,3.597,360,2.673,381,2.253,391,1.362,429,2.253,435,2.62,454,2.253,455,3.165,471,2.253,510,1.705,511,2.132,528,1.913,530,2.526,532,2.673,533,2.398,534,1.726,535,2.398,539,1.518,559,1.518,609,1.362,615,1.805,634,1.939,655,3.658,666,3.165,709,2.464,715,1.939,729,4.334,739,2.253,748,3.73,781,2.253,819,2.253,827,2.253,885,1.705,950,1.705,961,2.768,962,2.395,963,1.939,999,1.939,1000,2.395,1112,4.334,1113,2.253,1114,3.165,1116,3.967,1118,3.967,1119,3.658,1120,3.165,1121,3.165,1122,3.165,1123,3.967,1124,3.165,1125,3.165,1126,3.165,1129,2.253,1130,3.165,1148,1.562,1188,2.253,1192,2.253,1211,2.253,1212,4.432,1213,2.73,1214,3.834,1215,2.73,1216,5.063,1217,3.834,1218,3.834,1219,2.73,1220,2.73,1221,4.806,1222,2.73,1223,2.73,1224,2.73,1225,2.73,1226,2.73,1227,2.73,1228,3.834,1229,2.73,1230,2.73,1231,2.73,1232,4.432,1233,2.73,1234,3.834,1235,2.73,1236,3.834,1237,2.73,1238,3.834,1239,2.73,1240,2.73,1241,2.73,1242,2.73,1243,2.73,1244,2.73,1245,2.73,1246,2.73,1247,2.73,1248,5.784,1249,5.25,1250,3.834,1251,3.834,1252,3.834,1253,2.73,1254,2.73,1255,2.73,1256,2.73,1257,2.73,1258,2.73,1259,2.73,1260,2.73,1261,2.73,1262,2.73,1263,2.73,1264,2.73,1265,2.73]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":863,"title":{},"body":{"components/MapComponent.html":{}}}],["0.0.1",{"_index":1206,"title":{},"body":{"properties.html":{}}}],["1",{"_index":66,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["1/1",{"_index":1117,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":948,"title":{},"body":{"components/MapComponent.html":{}}}],["100",{"_index":845,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["15.0.3",{"_index":1147,"title":{},"body":{"dependencies.html":{}}}],["1f5aec",{"_index":710,"title":{},"body":{"components/MapComponent.html":{}}}],["1}/${count",{"_index":474,"title":{},"body":{"components/IfcComponent.html":{}}}],["2",{"_index":885,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["2.4.0",{"_index":1145,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1128,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":882,"title":{},"body":{"components/MapComponent.html":{}}}],["21/21",{"_index":1127,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":1111,"title":{},"body":{"coverage.html":{}}}],["30/30",{"_index":1131,"title":{},"body":{"coverage.html":{}}}],["39;01&#39",{"_index":770,"title":{},"body":{"components/MapComponent.html":{}}}],["39;034030000000&#39",{"_index":771,"title":{},"body":{"components/MapComponent.html":{}}}],["39;all",{"_index":762,"title":{},"body":{"components/MapComponent.html":{}}}],["39;only",{"_index":767,"title":{},"body":{"components/MapComponent.html":{}}}],["39;show",{"_index":773,"title":{},"body":{"components/MapComponent.html":{}}}],["4",{"_index":1201,"title":{},"body":{"index.html":{}}}],["4/4",{"_index":1108,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":1110,"title":{},"body":{"coverage.html":{}}}],["500px",{"_index":427,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["53.1434501",{"_index":726,"title":{},"body":{"components/MapComponent.html":{}}}],["7",{"_index":755,"title":{},"body":{"components/MapComponent.html":{},"index.html":{}}}],["7/7",{"_index":1109,"title":{},"body":{"coverage.html":{}}}],["70vh",{"_index":226,"title":{},"body":{"components/IfcComponent.html":{}}}],["8.2145521",{"_index":727,"title":{},"body":{"components/MapComponent.html":{}}}],["a0a0a0",{"_index":1246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abc123",{"_index":1178,"title":{},"body":{"miscellaneous/functions.html":{}}}],["abort",{"_index":413,"title":{},"body":{"components/IfcComponent.html":{}}}],["accessors",{"_index":577,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["activated",{"_index":1060,"title":{},"body":{"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["activatedroutesnapshot",{"_index":36,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["active",{"_index":173,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["actual_component",{"_index":159,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["add",{"_index":489,"title":{},"body":{"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{}}}],["addloader",{"_index":635,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["addloader(toresolve",{"_index":636,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["adds",{"_index":575,"title":{},"body":{"components/IonIconComponent.html":{}}}],["adjusted",{"_index":228,"title":{},"body":{"components/IfcComponent.html":{}}}],["administration",{"_index":1152,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["afterviewinit",{"_index":197,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["alias",{"_index":412,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":1208,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":455,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["alive",{"_index":98,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["allloaded",{"_index":408,"title":{},"body":{"components/IfcComponent.html":{}}}],["allow",{"_index":230,"title":{},"body":{"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["allowing",{"_index":633,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["allows",{"_index":112,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{}}}],["already",{"_index":548,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["altered",{"_index":380,"title":{},"body":{"components/IfcComponent.html":{}}}],["always",{"_index":702,"title":{},"body":{"components/MapComponent.html":{}}}],["angular",{"_index":583,"title":{},"body":{"components/IonIconComponent.html":{}}}],["angular/common",{"_index":1093,"title":{},"body":{"modules/WisdomModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":527,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["angular/core",{"_index":35,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"modules/WisdomModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":38,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["another",{"_index":465,"title":{},"body":{"components/IfcComponent.html":{}}}],["any).options.padding",{"_index":844,"title":{},"body":{"components/MapComponent.html":{}}}],["api",{"_index":360,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["api_url",{"_index":962,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["application/json",{"_index":1001,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["applied",{"_index":180,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["arg0",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":28,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["array.from(this.selectedshapes[layerkey",{"_index":945,"title":{},"body":{"components/MapComponent.html":{}}}],["async",{"_index":208,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["asynchronously",{"_index":547,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["attention",{"_index":350,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["attribute",{"_index":591,"title":{},"body":{"components/IonIconComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["attribution",{"_index":878,"title":{},"body":{"components/MapComponent.html":{}}}],["auth.ts",{"_index":1114,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["authorization",{"_index":1250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["automatically",{"_index":475,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["available",{"_index":351,"title":{},"body":{"components/IfcComponent.html":{}}}],["avoid",{"_index":291,"title":{},"body":{"components/IfcComponent.html":{}}}],["await",{"_index":294,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["back",{"_index":1011,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["base",{"_index":1119,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["before",{"_index":331,"title":{},"body":{"components/IfcComponent.html":{}}}],["behaviorsubject",{"_index":40,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{}}}],["being",{"_index":377,"title":{},"body":{"components/IfcComponent.html":{}}}],["beware",{"_index":352,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/functions.html":{}}}],["bkg",{"_index":881,"title":{},"body":{"components/MapComponent.html":{}}}],["blob",{"_index":522,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["boolean",{"_index":116,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["box",{"_index":608,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["breadcrumb",{"_index":1,"title":{"interfaces/Breadcrumb.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"coverage.html":{}}}],["breadcrumbs",{"_index":46,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{}}}],["breadcrumbs'},{'name",{"_index":149,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["breadcrumbs.component.html",{"_index":97,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["breadcrumbs.service",{"_index":134,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["breadcrumbs/breadcrumbs.component",{"_index":1097,"title":{},"body":{"modules/WisdomModule.html":{}}}],["breadcrumbscomponent",{"_index":75,"title":{"components/BreadcrumbsComponent.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["breadcrumbsservice",{"_index":50,"title":{"injectables/BreadcrumbsService.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"coverage.html":{}}}],["breadcrumb}s",{"_index":53,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["browse",{"_index":1205,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1202,"title":{},"body":{"modules.html":{}}}],["bulma",{"_index":169,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["bulma/bulma",{"_index":1098,"title":{},"body":{"modules/WisdomModule.html":{}}}],["bulmaistoggleabledirective",{"_index":157,"title":{"directives/BulmaIsToggleableDirective.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["button",{"_index":1236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["button.style.backgroundimage",{"_index":1237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bytes",{"_index":520,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["cache",{"_index":391,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["cache.ts",{"_index":1121,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cached",{"_index":516,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedkeys",{"_index":990,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedquery",{"_index":977,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedquery.box",{"_index":989,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedquery.shapes",{"_index":984,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["caching",{"_index":388,"title":{},"body":{"components/IfcComponent.html":{}}}],["callback",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["called",{"_index":289,"title":{},"body":{"components/IfcComponent.html":{}}}],["canactivate",{"_index":1051,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["canactivate(route",{"_index":1056,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["causing",{"_index":1185,"title":{},"body":{"miscellaneous/functions.html":{}}}],["center",{"_index":655,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["centercontent",{"_index":1228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["centralized",{"_index":631,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["certain",{"_index":1041,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["changes",{"_index":344,"title":{},"body":{"components/IfcComponent.html":{}}}],["check",{"_index":108,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["class",{"_index":49,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"modules/WisdomModule.html":{}}}],["clean",{"_index":469,"title":{},"body":{"components/IfcComponent.html":{}}}],["clear",{"_index":850,"title":{},"body":{"components/MapComponent.html":{}}}],["clearer",{"_index":411,"title":{},"body":{"components/IfcComponent.html":{}}}],["clears",{"_index":318,"title":{},"body":{"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{}}}],["click",{"_index":175,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"interfaces/Marker.html":{}}}],["clickable",{"_index":90,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["clicking",{"_index":170,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["client",{"_index":537,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cluster_wisdommodule",{"_index":1085,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["cluster_wisdommodule_declarations",{"_index":1087,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["cluster_wisdommodule_exports",{"_index":1086,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["code",{"_index":410,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{}}}],["collected",{"_index":81,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["collecting",{"_index":45,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["color",{"_index":887,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["common.ifc.fetching",{"_index":561,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["commonmodule",{"_index":1092,"title":{},"body":{"modules/WisdomModule.html":{}}}],["complaining",{"_index":587,"title":{},"body":{"components/IonIconComponent.html":{}}}],["complete",{"_index":314,"title":{},"body":{"components/IfcComponent.html":{}}}],["component",{"_index":74,"title":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["component_template",{"_index":148,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["components",{"_index":76,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"index.html":{}}}],["conditions",{"_index":293,"title":{},"body":{"components/IfcComponent.html":{}}}],["config",{"_index":785,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["considered",{"_index":86,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["const",{"_index":405,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["constructor",{"_index":103,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["constructor(elementref",{"_index":176,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["constructor(elref",{"_index":578,"title":{},"body":{"components/IonIconComponent.html":{}}}],["constructor(http",{"_index":565,"title":{},"body":{"injectables/IfcService.html":{},"injectables/MapService.html":{}}}],["constructor(private",{"_index":135,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["constructor(router",{"_index":1052,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["constructor(service",{"_index":104,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["contain",{"_index":645,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["container",{"_index":339,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["container.addeventlistener(\"click",{"_index":1235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["container.style.height",{"_index":428,"title":{},"body":{"components/IfcComponent.html":{}}}],["container.style.width",{"_index":426,"title":{},"body":{"components/IfcComponent.html":{}}}],["containing",{"_index":348,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/LayerData.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{}}}],["content",{"_index":1000,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":559,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["context/send",{"_index":1113,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["context/use",{"_index":530,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["control",{"_index":748,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["coordinate",{"_index":251,"title":{},"body":{"components/IfcComponent.html":{}}}],["coordinate_to_origin",{"_index":451,"title":{},"body":{"components/IfcComponent.html":{}}}],["coordinates",{"_index":611,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{}}}],["core",{"_index":626,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["corner",{"_index":610,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["correct",{"_index":584,"title":{},"body":{"components/IonIconComponent.html":{}}}],["correctly",{"_index":232,"title":{},"body":{"components/IfcComponent.html":{}}}],["corresponding",{"_index":298,"title":{},"body":{"components/IfcComponent.html":{}}}],["count",{"_index":463,"title":{},"body":{"components/IfcComponent.html":{}}}],["coverage",{"_index":1104,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covering",{"_index":1259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creating",{"_index":1027,"title":{},"body":{"interfaces/Marker.html":{}}}],["css",{"_index":185,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["current",{"_index":87,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["currently",{"_index":715,"title":{},"body":{"components/MapComponent.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/variables.html":{}}}],["curtain",{"_index":225,"title":{},"body":{"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{},"miscellaneous/variables.html":{}}}],["curtain.ts",{"_index":1124,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":634,"title":{},"body":{"injectables/LoaderInjector.html":{},"interfaces/Marker.html":{},"miscellaneous/variables.html":{}}}],["d35a0c",{"_index":704,"title":{},"body":{"components/MapComponent.html":{}}}],["data",{"_index":266,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["data.box[0",{"_index":914,"title":{},"body":{"components/MapComponent.html":{}}}],["data.box[2",{"_index":915,"title":{},"body":{"components/MapComponent.html":{}}}],["data.shapes",{"_index":907,"title":{},"body":{"components/MapComponent.html":{}}}],["data.ts",{"_index":603,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{},"coverage.html":{}}}],["db",{"_index":435,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["db.createobjectstore(\"models",{"_index":546,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["db.createobjectstore(\"queries",{"_index":968,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db.createobjectstore(\"shapes",{"_index":969,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db.deleteobjectstore(\"models",{"_index":545,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["db.deleteobjectstore(\"queries",{"_index":966,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db.deleteobjectstore(\"shapes",{"_index":967,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db_name",{"_index":533,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbblob",{"_index":553,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["dbschema",{"_index":514,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["de",{"_index":880,"title":{},"body":{"components/MapComponent.html":{}}}],["de/by",{"_index":884,"title":{},"body":{"components/MapComponent.html":{}}}],["decides",{"_index":382,"title":{},"body":{"components/IfcComponent.html":{}}}],["declarations",{"_index":1090,"title":{},"body":{"modules/WisdomModule.html":{}}}],["decorators",{"_index":186,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["default",{"_index":129,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IfcComponent.html":{},"injectables/IfcService.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":729,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":250,"title":{},"body":{"components/IfcComponent.html":{}}}],["defined",{"_index":105,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["denotes",{"_index":378,"title":{},"body":{"components/IfcComponent.html":{}}}],["deny",{"_index":1256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":1084,"title":{"dependencies.html":{}},"body":{"modules/WisdomModule.html":{},"dependencies.html":{},"index.html":{}}}],["depends",{"_index":276,"title":{},"body":{"components/IfcComponent.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{}}}],["destroy",{"_index":118,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["destroyed",{"_index":321,"title":{},"body":{"components/IfcComponent.html":{}}}],["detecting",{"_index":343,"title":{},"body":{"components/IfcComponent.html":{}}}],["determine",{"_index":1249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deterministically",{"_index":1172,"title":{},"body":{"miscellaneous/functions.html":{}}}],["digit",{"_index":1161,"title":{},"body":{"miscellaneous/functions.html":{}}}],["direct",{"_index":1045,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["direction",{"_index":893,"title":{},"body":{"components/MapComponent.html":{}}}],["directive",{"_index":146,"title":{"directives/BulmaIsToggleableDirective.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"coverage.html":{},"index.html":{}}}],["directives",{"_index":156,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["directly",{"_index":353,"title":{},"body":{"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["disable",{"_index":381,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["disabled",{"_index":486,"title":{},"body":{"components/IfcComponent.html":{}}}],["disconnects",{"_index":317,"title":{},"body":{"components/IfcComponent.html":{}}}],["display",{"_index":62,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"miscellaneous/enumerations.html":{}}}],["displayed",{"_index":20,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{}}}],["displaying",{"_index":194,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["displaylayer",{"_index":853,"title":{},"body":{"components/MapComponent.html":{}}}],["displayname",{"_index":820,"title":{},"body":{"components/MapComponent.html":{}}}],["displays",{"_index":612,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["displaytext",{"_index":637,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["district",{"_index":774,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/enumerations.html":{}}}],["div",{"_index":1233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dl",{"_index":883,"title":{},"body":{"components/MapComponent.html":{}}}],["docs",{"_index":690,"title":{},"body":{"components/MapComponent.html":{}}}],["documentation",{"_index":1105,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":78,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["done",{"_index":424,"title":{},"body":{"components/IfcComponent.html":{}}}],["dot",{"_index":1163,"title":{},"body":{"miscellaneous/functions.html":{}}}],["download",{"_index":550,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["dynamically",{"_index":235,"title":{},"body":{"components/IfcComponent.html":{}}}],["e.g",{"_index":1194,"title":{},"body":{"miscellaneous/functions.html":{}}}],["early",{"_index":290,"title":{},"body":{"components/IfcComponent.html":{}}}],["easy",{"_index":354,"title":{},"body":{"components/IfcComponent.html":{}}}],["element",{"_index":30,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["elementref",{"_index":177,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["elements",{"_index":751,"title":{},"body":{"components/MapComponent.html":{}}}],["elref",{"_index":580,"title":{},"body":{"components/IonIconComponent.html":{}}}],["emit",{"_index":721,"title":{},"body":{"components/MapComponent.html":{}}}],["emitselection",{"_index":665,"title":{},"body":{"components/MapComponent.html":{}}}],["emitted",{"_index":271,"title":{},"body":{"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{}}}],["emitter",{"_index":647,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["empty",{"_index":687,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["enabled",{"_index":261,"title":{},"body":{"components/IfcComponent.html":{}}}],["end",{"_index":1162,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enforce",{"_index":783,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["ensures",{"_index":283,"title":{},"body":{"components/IfcComponent.html":{}}}],["ensuring",{"_index":113,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["entries",{"_index":1055,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["entries[0].contentrect.height",{"_index":480,"title":{},"body":{"components/IfcComponent.html":{}}}],["entries[0].contentrect.width",{"_index":478,"title":{},"body":{"components/IfcComponent.html":{}}}],["entry",{"_index":299,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/typealiases.html":{}}}],["entry.shapes",{"_index":833,"title":{},"body":{"components/MapComponent.html":{}}}],["enumerations",{"_index":1149,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":1123,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":284,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["event",{"_index":270,"title":{},"body":{"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{},"interfaces/Marker.html":{}}}],["eventemitter",{"_index":268,"title":{},"body":{"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{}}}],["events",{"_index":490,"title":{},"body":{"components/IfcComponent.html":{}}}],["everything",{"_index":483,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["evt",{"_index":1035,"title":{},"body":{"interfaces/Marker.html":{}}}],["exactly",{"_index":768,"title":{},"body":{"components/MapComponent.html":{}}}],["example",{"_index":256,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["expects",{"_index":1043,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["export",{"_index":43,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["exported",{"_index":1075,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["exports",{"_index":1091,"title":{},"body":{"modules/WisdomModule.html":{}}}],["extends",{"_index":513,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["extension",{"_index":1241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fails",{"_index":1049,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["false",{"_index":111,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/variables.html":{}}}],["feature",{"_index":890,"title":{},"body":{"components/MapComponent.html":{}}}],["feature.properties.key",{"_index":896,"title":{},"body":{"components/MapComponent.html":{}}}],["fetch",{"_index":221,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetched",{"_index":828,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetched[layerkey",{"_index":830,"title":{},"body":{"components/MapComponent.html":{}}}],["fetchedinput",{"_index":443,"title":{},"body":{"components/IfcComponent.html":{}}}],["fetchlayerdata",{"_index":971,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetchlayerdata(resolution",{"_index":1024,"title":{},"body":{"injectables/MapService.html":{}}}],["fetchmodel",{"_index":564,"title":{},"body":{"injectables/IfcService.html":{}}}],["fetchmodel(path",{"_index":552,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["fetchmodels",{"_index":436,"title":{},"body":{"components/IfcComponent.html":{}}}],["fetchmodels.push",{"_index":439,"title":{},"body":{"components/IfcComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{}}}],["file([dbblob",{"_index":555,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["file([res",{"_index":563,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["filling",{"_index":1257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finally",{"_index":253,"title":{},"body":{"components/IfcComponent.html":{}}}],["find",{"_index":593,"title":{},"body":{"components/IonIconComponent.html":{},"miscellaneous/functions.html":{}}}],["fine",{"_index":417,"title":{},"body":{"components/IfcComponent.html":{}}}],["first",{"_index":248,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["firstvaluefrom",{"_index":531,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["firstvaluefrom(this.http.get(`${api_url",{"_index":998,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["firstvaluefrom(this.http.get(path",{"_index":557,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["fit",{"_index":383,"title":{},"body":{"components/IfcComponent.html":{}}}],["fitting",{"_index":386,"title":{},"body":{"components/IfcComponent.html":{}}}],["fittoframe",{"_index":387,"title":{},"body":{"components/IfcComponent.html":{}}}],["fix",{"_index":425,"title":{},"body":{"components/IfcComponent.html":{}}}],["fixed",{"_index":300,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["flag",{"_index":327,"title":{},"body":{"components/IfcComponent.html":{}}}],["flat",{"_index":1066,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["flex",{"_index":1229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["following",{"_index":682,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["force",{"_index":551,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["found",{"_index":518,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"miscellaneous/functions.html":{}}}],["fragment",{"_index":8,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["fragments",{"_index":52,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{}}}],["frame",{"_index":385,"title":{},"body":{"components/IfcComponent.html":{}}}],["frame's",{"_index":641,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["full_res",{"_index":761,"title":{},"body":{"components/MapComponent.html":{}}}],["fully",{"_index":114,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"miscellaneous/functions.html":{}}}],["function",{"_index":282,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":244,"title":{"miscellaneous/functions.html":{}},"body":{"components/IfcComponent.html":{},"miscellaneous/functions.html":{}}}],["generate",{"_index":1176,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generates",{"_index":1171,"title":{},"body":{"miscellaneous/functions.html":{}}}],["geo",{"_index":540,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["geobasis",{"_index":879,"title":{},"body":{"components/MapComponent.html":{}}}],["geodata",{"_index":963,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["geojson",{"_index":617,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{}}}],["geojsonlayer",{"_index":876,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonlayer.adddata(object.assign(shape.geojson",{"_index":908,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonlayer.addto(map",{"_index":911,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonobject",{"_index":616,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["getresolvedurl",{"_index":1136,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getresolvedurl(route",{"_index":1154,"title":{},"body":{"miscellaneous/functions.html":{}}}],["give",{"_index":688,"title":{},"body":{"components/MapComponent.html":{}}}],["given",{"_index":240,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["gt",{"_index":1168,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gt;&lt;/map&gt",{"_index":777,"title":{},"body":{"components/MapComponent.html":{}}}],["guard",{"_index":1036,"title":{"guards/QueryParameterGuard.html":{}},"body":{"guards/QueryParameterGuard.html":{},"coverage.html":{},"index.html":{}}}],["guards",{"_index":1038,"title":{},"body":{"guards/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{}}}],["handle",{"_index":1262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handler",{"_index":1032,"title":{},"body":{"interfaces/Marker.html":{}}}],["having",{"_index":859,"title":{},"body":{"components/MapComponent.html":{}}}],["header",{"_index":1251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":999,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["height",{"_index":211,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["height=&quot;70vh&quot",{"_index":759,"title":{},"body":{"components/MapComponent.html":{}}}],["here",{"_index":487,"title":{},"body":{"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["hex",{"_index":706,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["hidden",{"_index":288,"title":{},"body":{"components/IfcComponent.html":{}}}],["hide",{"_index":243,"title":{},"body":{"components/IfcComponent.html":{}}}],["hidemodel",{"_index":206,"title":{},"body":{"components/IfcComponent.html":{}}}],["hidemodel(model",{"_index":279,"title":{},"body":{"components/IfcComponent.html":{}}}],["hides",{"_index":281,"title":{},"body":{"components/IfcComponent.html":{}}}],["hiding",{"_index":304,"title":{},"body":{"components/IfcComponent.html":{}}}],["higher",{"_index":58,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["holds",{"_index":750,"title":{},"body":{"components/MapComponent.html":{}}}],["hostbinding",{"_index":188,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener",{"_index":190,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener(\"click",{"_index":191,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener('click",{"_index":187,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlisteners",{"_index":174,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hovering",{"_index":1033,"title":{},"body":{"interfaces/Marker.html":{}}}],["html",{"_index":145,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["http",{"_index":529,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpclient",{"_index":525,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpcontext",{"_index":526,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpcontext().set(use_loader",{"_index":560,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["httpcontexttoken",{"_index":1248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpheaders",{"_index":959,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpparams",{"_index":960,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["https://ifcjs.github.io/info/docs/guide/web",{"_index":358,"title":{},"body":{"components/IfcComponent.html":{}}}],["https://ionic.io/ionicons",{"_index":597,"title":{},"body":{"components/IonIconComponent.html":{}}}],["https://tile.openstreetmap.org/{z}/{x}/{y}.png",{"_index":752,"title":{},"body":{"components/MapComponent.html":{}}}],["https://wisdom04.vlba.uni",{"_index":691,"title":{},"body":{"components/MapComponent.html":{}}}],["icon",{"_index":12,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"interfaces/Marker.html":{},"miscellaneous/variables.html":{}}}],["icon'},{'name",{"_index":153,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["icon.component",{"_index":1100,"title":{},"body":{"modules/WisdomModule.html":{}}}],["icon.component.ts",{"_index":570,"title":{},"body":{"components/IonIconComponent.html":{},"coverage.html":{}}}],["icon.component.ts:12",{"_index":579,"title":{},"body":{"components/IonIconComponent.html":{}}}],["icon.component.ts:31",{"_index":582,"title":{},"body":{"components/IonIconComponent.html":{}}}],["icon.setattribute(\"name",{"_index":1240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon.setattribute(\"size",{"_index":1243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon.style.color",{"_index":1245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon.style.pointerevents",{"_index":1239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon/ion",{"_index":569,"title":{},"body":{"components/IonIconComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{}}}],["icons",{"_index":572,"title":{},"body":{"components/IonIconComponent.html":{}}}],["id",{"_index":498,"title":{},"body":{"components/IfcComponent.html":{}}}],["idb",{"_index":524,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["idb.get(\"models",{"_index":554,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["idb.get(\"queries",{"_index":978,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["idb.put(\"models",{"_index":562,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["idb.transaction(\"shapes",{"_index":980,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["idb.transaction([\"queries",{"_index":1012,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["identifier",{"_index":1106,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":952,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["ifc",{"_index":195,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"miscellaneous/variables.html":{}}}],["ifc'},{'name",{"_index":151,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["ifc.service",{"_index":367,"title":{},"body":{"components/IfcComponent.html":{}}}],["ifc/ifc.component",{"_index":1102,"title":{},"body":{"modules/WisdomModule.html":{}}}],["ifccomponent",{"_index":150,"title":{"components/IfcComponent.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["ifccomponent.modelentry",{"_index":392,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/typealiases.html":{}}}],["ifcdb",{"_index":509,"title":{"interfaces/IfcDB.html":{}},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"coverage.html":{}}}],["ifcmodel",{"_index":365,"title":{},"body":{"components/IfcComponent.html":{}}}],["ifcservice",{"_index":216,"title":{"injectables/IfcService.html":{}},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"coverage.html":{}}}],["ifcviewerapi",{"_index":346,"title":{},"body":{"components/IfcComponent.html":{}}}],["ifcviewerapi({container",{"_index":431,"title":{},"body":{"components/IfcComponent.html":{}}}],["ifcworker.js",{"_index":433,"title":{},"body":{"components/IfcComponent.html":{}}}],["ignore",{"_index":415,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["implementing",{"_index":1074,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["implements",{"_index":91,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["implied",{"_index":1253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implies",{"_index":1254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import",{"_index":33,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["important",{"_index":355,"title":{},"body":{"components/IfcComponent.html":{}}}],["imports",{"_index":1103,"title":{},"body":{"modules/WisdomModule.html":{}}}],["include",{"_index":1079,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexed",{"_index":532,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["indexeddb",{"_index":549,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["indicates",{"_index":376,"title":{},"body":{"components/IfcComponent.html":{}}}],["indicating",{"_index":260,"title":{},"body":{"components/IfcComponent.html":{}}}],["inferred",{"_index":236,"title":{},"body":{"components/IfcComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["init",{"_index":126,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{}}}],["initial",{"_index":421,"title":{},"body":{"components/IfcComponent.html":{}}}],["initialize",{"_index":429,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["initialized",{"_index":310,"title":{},"body":{"components/IfcComponent.html":{}}}],["inject",{"_index":571,"title":{},"body":{"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{}}}],["injectable",{"_index":34,"title":{"injectables/BreadcrumbsService.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"injectables/MapService.html":{}},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":160,"title":{},"body":{"injectables/BreadcrumbsService.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"injectables/MapService.html":{},"index.html":{}}}],["injected",{"_index":869,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["injector",{"_index":222,"title":{},"body":{"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{}}}],["injects",{"_index":628,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["inner",{"_index":725,"title":{},"body":{"components/MapComponent.html":{}}}],["input",{"_index":189,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["input(\"center",{"_index":792,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"height",{"_index":788,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"layers",{"_index":800,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"layerselectable",{"_index":803,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"markers",{"_index":805,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"models",{"_index":393,"title":{},"body":{"components/IfcComponent.html":{}}}],["input(\"picking",{"_index":394,"title":{},"body":{"components/IfcComponent.html":{}}}],["input(\"recursive",{"_index":396,"title":{},"body":{"components/IfcComponent.html":{}}}],["input(\"scrollwheelzoom",{"_index":796,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"selectedcolor",{"_index":799,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"tileurl",{"_index":790,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"unselectedcolor",{"_index":798,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"zoom",{"_index":794,"title":{},"body":{"components/MapComponent.html":{}}}],["inputcenter",{"_index":793,"title":{},"body":{"components/MapComponent.html":{}}}],["inputheight",{"_index":789,"title":{},"body":{"components/MapComponent.html":{}}}],["inputlayers",{"_index":672,"title":{},"body":{"components/MapComponent.html":{}}}],["inputlayers(layerconfig",{"_index":801,"title":{},"body":{"components/MapComponent.html":{}}}],["inputlayerselectable",{"_index":804,"title":{},"body":{"components/MapComponent.html":{}}}],["inputmarkers",{"_index":673,"title":{},"body":{"components/MapComponent.html":{}}}],["inputmarkers(markers",{"_index":806,"title":{},"body":{"components/MapComponent.html":{}}}],["inputmodels",{"_index":237,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/typealiases.html":{}}}],["inputs",{"_index":210,"title":{},"body":{"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["inputscrollwheelzoom",{"_index":797,"title":{},"body":{"components/MapComponent.html":{}}}],["inputtileurl",{"_index":791,"title":{},"body":{"components/MapComponent.html":{}}}],["inputzoom",{"_index":795,"title":{},"body":{"components/MapComponent.html":{}}}],["insert",{"_index":639,"title":{},"body":{"injectables/LoaderInjector.html":{},"components/MapComponent.html":{}}}],["instant",{"_index":1183,"title":{},"body":{"miscellaneous/functions.html":{}}}],["instead",{"_index":303,"title":{},"body":{"components/IfcComponent.html":{}}}],["interact",{"_index":676,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["interaction",{"_index":349,"title":{},"body":{"components/IfcComponent.html":{}}}],["interactions",{"_index":356,"title":{},"body":{"components/IfcComponent.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Breadcrumb.html":{},"interfaces/IfcDB.html":{},"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{}},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Breadcrumb.html":{},"interfaces/IfcDB.html":{},"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"index.html":{}}}],["internally",{"_index":720,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["intersection",{"_index":685,"title":{},"body":{"components/MapComponent.html":{}}}],["invert",{"_index":781,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["invertselection",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invertselection(options",{"_index":1247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invertselectioncontrol",{"_index":851,"title":{},"body":{"components/MapComponent.html":{}}}],["invertselectioncontrol.addto(map",{"_index":930,"title":{},"body":{"components/MapComponent.html":{}}}],["ion",{"_index":152,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"miscellaneous/variables.html":{}}}],["ioniconcomponent",{"_index":23,"title":{"components/IonIconComponent.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["ionicons",{"_index":573,"title":{},"body":{"components/IonIconComponent.html":{}}}],["isallset",{"_index":100,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["isdestroyed",{"_index":198,"title":{},"body":{"components/IfcComponent.html":{}}}],["items",{"_index":1230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iterate",{"_index":1187,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iterated",{"_index":1050,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["itself",{"_index":581,"title":{},"body":{"components/IonIconComponent.html":{}}}],["join",{"_index":827,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["js",{"_index":576,"title":{},"body":{"components/IonIconComponent.html":{}}}],["json",{"_index":272,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["jsonobject",{"_index":369,"title":{},"body":{"components/IfcComponent.html":{}}}],["justify",{"_index":1231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["k",{"_index":996,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["k.split",{"_index":826,"title":{},"body":{"components/MapComponent.html":{}}}],["k.substring(0",{"_index":995,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keep",{"_index":286,"title":{},"body":{"components/IfcComponent.html":{}}}],["key",{"_index":517,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{}}}],["key[0",{"_index":953,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keynames",{"_index":671,"title":{},"body":{"components/MapComponent.html":{}}}],["keynames.set(key",{"_index":834,"title":{},"body":{"components/MapComponent.html":{}}}],["keys",{"_index":239,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/typealiases.html":{}}}],["keys.length",{"_index":992,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keys.map(k",{"_index":994,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keys].flat().map(k",{"_index":825,"title":{},"body":{"components/MapComponent.html":{}}}],["l",{"_index":614,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{}}}],["l.control.extend",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.control.layers",{"_index":849,"title":{},"body":{"components/MapComponent.html":{}}}],["l.controloptions",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.divicon",{"_index":1031,"title":{},"body":{"interfaces/Marker.html":{}}}],["l.domutil.create",{"_index":1232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.geojson(undefined",{"_index":877,"title":{},"body":{"components/MapComponent.html":{}}}],["l.icon",{"_index":1030,"title":{},"body":{"interfaces/Marker.html":{}}}],["l.layer",{"_index":745,"title":{},"body":{"components/MapComponent.html":{}}}],["l.map",{"_index":739,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["l.map(nativemapelement",{"_index":838,"title":{},"body":{"components/MapComponent.html":{}}}],["l.marker(marker.coordinates",{"_index":936,"title":{},"body":{"components/MapComponent.html":{}}}],["l.markerclustergroup",{"_index":932,"title":{},"body":{"components/MapComponent.html":{}}}],["l.path",{"_index":897,"title":{},"body":{"components/MapComponent.html":{}}}],["l.tilelayer(this.tileurl).addto(map",{"_index":846,"title":{},"body":{"components/MapComponent.html":{}}}],["l.util.setoptions(this",{"_index":1226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["large",{"_index":1244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["later",{"_index":891,"title":{},"body":{"components/MapComponent.html":{}}}],["latitude",{"_index":731,"title":{},"body":{"components/MapComponent.html":{}}}],["layer",{"_index":605,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/typealiases.html":{}}}],["layer.bindtooltip(feature.properties.name",{"_index":892,"title":{},"body":{"components/MapComponent.html":{}}}],["layer.fire(\"click",{"_index":929,"title":{},"body":{"components/MapComponent.html":{}}}],["layer.on(\"click",{"_index":895,"title":{},"body":{"components/MapComponent.html":{}}}],["layera",{"_index":866,"title":{},"body":{"components/MapComponent.html":{}}}],["layera.options.order",{"_index":870,"title":{},"body":{"components/MapComponent.html":{}}}],["layerb",{"_index":867,"title":{},"body":{"components/MapComponent.html":{}}}],["layerb.options.order",{"_index":871,"title":{},"body":{"components/MapComponent.html":{}}}],["layerconfig",{"_index":656,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["layerdata",{"_index":601,"title":{"interfaces/LayerData.html":{}},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"coverage.html":{}}}],["layerdata.box",{"_index":1022,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["layerdata.shapes",{"_index":1016,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["layerdata[\"box",{"_index":964,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["layerindex",{"_index":862,"title":{},"body":{"components/MapComponent.html":{}}}],["layerkey",{"_index":737,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["layername",{"_index":920,"title":{},"body":{"components/MapComponent.html":{}}}],["layernames",{"_index":657,"title":{},"body":{"components/MapComponent.html":{}}}],["layers",{"_index":666,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["layers.push(layer",{"_index":906,"title":{},"body":{"components/MapComponent.html":{}}}],["layers]=&quot",{"_index":760,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol",{"_index":848,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.addbaselayer",{"_index":918,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.addbaselayer(geojsonlayer",{"_index":923,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.addto(map",{"_index":926,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.options.sortfunction",{"_index":865,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.options.sortlayers",{"_index":864,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.removelayer(geojsonlayer",{"_index":917,"title":{},"body":{"components/MapComponent.html":{}}}],["layerselectable",{"_index":667,"title":{},"body":{"components/MapComponent.html":{}}}],["lazily",{"_index":220,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["leads",{"_index":1078,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["leaflet",{"_index":615,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["leaflet.markercluster",{"_index":782,"title":{},"body":{"components/MapComponent.html":{}}}],["leafletmouseevent",{"_index":1034,"title":{},"body":{"interfaces/Marker.html":{}}}],["left",{"_index":21,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["legend",{"_index":144,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["length",{"_index":1197,"title":{},"body":{"miscellaneous/functions.html":{}}}],["level",{"_index":714,"title":{},"body":{"components/MapComponent.html":{}}}],["link",{"_index":13,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{}}}],["list",{"_index":51,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["listens",{"_index":629,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["literal",{"_index":515,"title":{},"body":{"interfaces/IfcDB.html":{},"interfaces/MapDB.html":{},"miscellaneous/typealiases.html":{}}}],["live",{"_index":121,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["lmarker",{"_index":935,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.addto(markerlayer",{"_index":943,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.bindtooltip(marker.tooltip",{"_index":940,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.on(\"click",{"_index":942,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.seticon(marker.icon",{"_index":938,"title":{},"body":{"components/MapComponent.html":{}}}],["load",{"_index":264,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["loadall",{"_index":406,"title":{},"body":{"components/IfcComponent.html":{}}}],["loaded",{"_index":254,"title":{},"body":{"components/IfcComponent.html":{}}}],["loadedmodels",{"_index":199,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/typealiases.html":{}}}],["loader",{"_index":217,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["loader.ts",{"_index":1126,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["loader/loader.injector",{"_index":368,"title":{},"body":{"components/IfcComponent.html":{}}}],["loaderinjector",{"_index":218,"title":{"injectables/LoaderInjector.html":{}},"body":{"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{},"coverage.html":{}}}],["loaders",{"_index":630,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["loaderservice",{"_index":625,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["loading",{"_index":224,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["loadmodel",{"_index":448,"title":{},"body":{"components/IfcComponent.html":{}}}],["loadmodel(modeliter[i",{"_index":467,"title":{},"body":{"components/IfcComponent.html":{}}}],["loads",{"_index":312,"title":{},"body":{"components/IfcComponent.html":{}}}],["local",{"_index":434,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["logic",{"_index":632,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["long",{"_index":122,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"miscellaneous/variables.html":{}}}],["longer",{"_index":320,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["longitude",{"_index":730,"title":{},"body":{"components/MapComponent.html":{}}}],["look",{"_index":970,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["lower",{"_index":223,"title":{},"body":{"components/IfcComponent.html":{}}}],["lowered",{"_index":313,"title":{},"body":{"components/IfcComponent.html":{}}}],["lt;map",{"_index":758,"title":{},"body":{"components/MapComponent.html":{}}}],["lx",{"_index":780,"title":{},"body":{"components/MapComponent.html":{}}}],["lx.control.invertselection",{"_index":928,"title":{},"body":{"components/MapComponent.html":{}}}],["main",{"_index":308,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["make",{"_index":409,"title":{},"body":{"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["makes",{"_index":119,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["making",{"_index":167,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["manually",{"_index":305,"title":{},"body":{"components/IfcComponent.html":{}}}],["map",{"_index":155,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["map(str",{"_index":841,"title":{},"body":{"components/MapComponent.html":{}}}],["map.component.css",{"_index":654,"title":{},"body":{"components/MapComponent.html":{}}}],["map.fitbounds",{"_index":913,"title":{},"body":{"components/MapComponent.html":{}}}],["map.getrenderer(map",{"_index":843,"title":{},"body":{"components/MapComponent.html":{}}}],["map.on(\"baselayerchange",{"_index":924,"title":{},"body":{"components/MapComponent.html":{}}}],["map.removecontrol(invertselectioncontrol",{"_index":927,"title":{},"body":{"components/MapComponent.html":{}}}],["map.removecontrol(layerscontrol",{"_index":856,"title":{},"body":{"components/MapComponent.html":{}}}],["map.removelayer(this.selectedgeojsonlayer",{"_index":873,"title":{},"body":{"components/MapComponent.html":{}}}],["map.service",{"_index":779,"title":{},"body":{"components/MapComponent.html":{}}}],["map/map.component",{"_index":1101,"title":{},"body":{"modules/WisdomModule.html":{}}}],["mapcomponent",{"_index":154,"title":{"components/MapComponent.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mapcomponent.inputlayers",{"_index":786,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["mapdb",{"_index":949,"title":{"interfaces/MapDB.html":{}},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{}}}],["mapelement",{"_index":658,"title":{},"body":{"components/MapComponent.html":{}}}],["mapped",{"_index":717,"title":{},"body":{"components/MapComponent.html":{}}}],["maps",{"_index":652,"title":{},"body":{"components/MapComponent.html":{}}}],["mapservice",{"_index":674,"title":{"injectables/MapService.html":{}},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{}}}],["marker",{"_index":696,"title":{"interfaces/Marker.html":{}},"body":{"components/MapComponent.html":{},"interfaces/Marker.html":{},"coverage.html":{}}}],["marker.icon",{"_index":937,"title":{},"body":{"components/MapComponent.html":{}}}],["marker.onclick",{"_index":941,"title":{},"body":{"components/MapComponent.html":{}}}],["marker.tooltip",{"_index":939,"title":{},"body":{"components/MapComponent.html":{}}}],["markerlayer",{"_index":931,"title":{},"body":{"components/MapComponent.html":{}}}],["markerlayer.addto(map",{"_index":944,"title":{},"body":{"components/MapComponent.html":{}}}],["markerlayer.removefrom(map",{"_index":934,"title":{},"body":{"components/MapComponent.html":{}}}],["markers",{"_index":659,"title":{},"body":{"components/MapComponent.html":{},"interfaces/Marker.html":{}}}],["marker}s",{"_index":808,"title":{},"body":{"components/MapComponent.html":{}}}],["matching",{"_index":73,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["meaning",{"_index":784,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["means",{"_index":278,"title":{},"body":{"components/IfcComponent.html":{}}}],["memory",{"_index":319,"title":{},"body":{"components/IfcComponent.html":{}}}],["message",{"_index":1258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":94,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/ShapeData.html":{}}}],["method",{"_index":1184,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methods",{"_index":99,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["miscellaneous",{"_index":1148,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mixed",{"_index":772,"title":{},"body":{"components/MapComponent.html":{}}}],["model",{"_index":249,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"miscellaneous/typealiases.html":{}}}],["model's",{"_index":379,"title":{},"body":{"components/IfcComponent.html":{}}}],["modelentry",{"_index":258,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/typealiases.html":{}}}],["modelid",{"_index":497,"title":{},"body":{"components/IfcComponent.html":{}}}],["modeliter",{"_index":446,"title":{},"body":{"components/IfcComponent.html":{}}}],["modeliter.length",{"_index":464,"title":{},"body":{"components/IfcComponent.html":{}}}],["modeliter[0",{"_index":450,"title":{},"body":{"components/IfcComponent.html":{}}}],["modelloadabort",{"_index":200,"title":{},"body":{"components/IfcComponent.html":{}}}],["modelloaddone",{"_index":201,"title":{},"body":{"components/IfcComponent.html":{}}}],["models",{"_index":196,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["modernized",{"_index":1173,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modifies",{"_index":589,"title":{},"body":{"components/IonIconComponent.html":{}}}],["module",{"_index":627,"title":{"modules/WisdomModule.html":{}},"body":{"injectables/LoaderInjector.html":{},"interfaces/WisdomInterface.html":{},"index.html":{}}}],["modules",{"_index":1071,"title":{"modules.html":{}},"body":{"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"modules.html":{}}}],["more",{"_index":1061,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["mouse",{"_index":701,"title":{},"body":{"components/MapComponent.html":{}}}],["mouseevent",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["municipal",{"_index":763,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/enumerations.html":{}}}],["name",{"_index":19,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name(name",{"_index":599,"title":{},"body":{"components/IonIconComponent.html":{}}}],["names",{"_index":594,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["namespace",{"_index":373,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["native",{"_index":590,"title":{},"body":{"components/IonIconComponent.html":{}}}],["nativemapelement",{"_index":836,"title":{},"body":{"components/MapComponent.html":{}}}],["necessary",{"_index":585,"title":{},"body":{"components/IonIconComponent.html":{}}}],["needed",{"_index":128,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{}}}],["needs",{"_index":277,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["new",{"_index":56,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":141,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["ngafterviewinit",{"_index":207,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["ngmodule",{"_index":1094,"title":{},"body":{"modules/WisdomModule.html":{}}}],["ngondestroy",{"_index":101,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{}}}],["ngoninit",{"_index":102,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["ngx",{"_index":371,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{}}}],["node",{"_index":171,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["nomenclature",{"_index":620,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["none",{"_index":1238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["null",{"_index":683,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["num",{"_index":1164,"title":{},"body":{"miscellaneous/functions.html":{}}}],["number",{"_index":64,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nutskey",{"_index":623,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["obj",{"_index":1180,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":265,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":442,"title":{},"body":{"components/IfcComponent.html":{}}}],["object.entries(config",{"_index":821,"title":{},"body":{"components/MapComponent.html":{}}}],["object.entries(fetchedinput",{"_index":447,"title":{},"body":{"components/IfcComponent.html":{}}}],["object.entries(layerdata",{"_index":874,"title":{},"body":{"components/MapComponent.html":{}}}],["object.entries(requests",{"_index":829,"title":{},"body":{"components/MapComponent.html":{}}}],["object.entries(this.inputmodels",{"_index":438,"title":{},"body":{"components/IfcComponent.html":{}}}],["object.fromentries(await",{"_index":444,"title":{},"body":{"components/IfcComponent.html":{}}}],["object.keys(layerdata).length",{"_index":925,"title":{},"body":{"components/MapComponent.html":{}}}],["object.values(fetched",{"_index":832,"title":{},"body":{"components/MapComponent.html":{}}}],["observable",{"_index":39,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["observe",{"_index":69,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{}}}],["observer",{"_index":342,"title":{},"body":{"components/IfcComponent.html":{}}}],["occur",{"_index":285,"title":{},"body":{"components/IfcComponent.html":{}}}],["official",{"_index":595,"title":{},"body":{"components/IonIconComponent.html":{}}}],["oldenburg",{"_index":732,"title":{},"body":{"components/MapComponent.html":{}}}],["oldenburg.de/repos/service",{"_index":692,"title":{},"body":{"components/MapComponent.html":{}}}],["oldv",{"_index":544,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["onadd",{"_index":1227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onclick",{"_index":1028,"title":{},"body":{"interfaces/Marker.html":{}}}],["ondestroy",{"_index":93,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{}}}],["one",{"_index":59,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{}}}],["oneachfeature",{"_index":889,"title":{},"body":{"components/MapComponent.html":{}}}],["oninit",{"_index":92,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["only_keys",{"_index":766,"title":{},"body":{"components/MapComponent.html":{}}}],["onto",{"_index":703,"title":{},"body":{"components/MapComponent.html":{}}}],["opendb",{"_index":523,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["opendb(db_name",{"_index":542,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations",{"_index":983,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(querystore.put",{"_index":1021,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(shapestore.put(shape",{"_index":1017,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(store.get(key).then(shape",{"_index":985,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(tx.done",{"_index":987,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["option",{"_index":699,"title":{},"body":{"components/MapComponent.html":{}}}],["optional",{"_index":11,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opts",{"_index":437,"title":{},"body":{"components/IfcComponent.html":{}}}],["order",{"_index":245,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["ordering",{"_index":255,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["orders",{"_index":868,"title":{},"body":{"components/MapComponent.html":{}}}],["origin",{"_index":453,"title":{},"body":{"components/IfcComponent.html":{}}}],["osm",{"_index":754,"title":{},"body":{"components/MapComponent.html":{}}}],["otherwise",{"_index":488,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":1088,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["output",{"_index":233,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["output(\"selected",{"_index":398,"title":{},"body":{"components/IfcComponent.html":{}}}],["outputs",{"_index":214,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["overview",{"_index":1200,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":1143,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":88,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["pairs",{"_index":736,"title":{},"body":{"components/MapComponent.html":{}}}],["param",{"_index":60,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["parameter.guard.ts",{"_index":1040,"title":{},"body":{"guards/QueryParameterGuard.html":{},"coverage.html":{}}}],["parameter.guard.ts:25",{"_index":1053,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["parameter.guard.ts:41",{"_index":1059,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["parameters",{"_index":27,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":26,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["params.appendall({key",{"_index":993,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["params.set(\"resolution",{"_index":991,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["parse",{"_index":1054,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["parsefloat(str",{"_index":842,"title":{},"body":{"components/MapComponent.html":{}}}],["parseint(this.inputzoom",{"_index":817,"title":{},"body":{"components/MapComponent.html":{}}}],["passed",{"_index":31,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["path",{"_index":375,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{}}}],["path.bringtoback",{"_index":900,"title":{},"body":{"components/MapComponent.html":{}}}],["path.bringtofront",{"_index":903,"title":{},"body":{"components/MapComponent.html":{}}}],["path.setstyle({color",{"_index":899,"title":{},"body":{"components/MapComponent.html":{}}}],["paths",{"_index":390,"title":{},"body":{"components/IfcComponent.html":{}}}],["peer",{"_index":1146,"title":{},"body":{"dependencies.html":{}}}],["picked",{"_index":495,"title":{},"body":{"components/IfcComponent.html":{}}}],["picker",{"_index":263,"title":{},"body":{"components/IfcComponent.html":{}}}],["picking",{"_index":212,"title":{},"body":{"components/IfcComponent.html":{}}}],["pipe(takewhile",{"_index":137,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["point",{"_index":416,"title":{},"body":{"components/IfcComponent.html":{}}}],["position",{"_index":1224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["predefined",{"_index":1177,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prepare",{"_index":972,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["prepares",{"_index":311,"title":{},"body":{"components/IfcComponent.html":{}}}],["presentation",{"_index":1159,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pretty",{"_index":1165,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prettyprintnum",{"_index":1137,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["prettyprintnum(12345678",{"_index":1167,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prettyprintnum(num",{"_index":1158,"title":{},"body":{"miscellaneous/functions.html":{}}}],["print",{"_index":1166,"title":{},"body":{"miscellaneous/functions.html":{}}}],["private",{"_index":55,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["promise",{"_index":295,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["promise((resolve",{"_index":402,"title":{},"body":{"components/IfcComponent.html":{}}}],["promise(async",{"_index":407,"title":{},"body":{"components/IfcComponent.html":{}}}],["promise.all(fetchmodels",{"_index":445,"title":{},"body":{"components/IfcComponent.html":{}}}],["promise.all(operations",{"_index":988,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["properly",{"_index":422,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["properties",{"_index":10,"title":{"properties.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"properties.html":{}}}],["property",{"_index":229,"title":{},"body":{"components/IfcComponent.html":{}}}],["props",{"_index":499,"title":{},"body":{"components/IfcComponent.html":{}}}],["provide",{"_index":1072,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["providedin",{"_index":47,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["provides",{"_index":1081,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["puzzle",{"_index":1242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["px",{"_index":479,"title":{},"body":{"components/IfcComponent.html":{}}}],["queries",{"_index":951,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["query",{"_index":14,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["querykey",{"_index":976,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["queryparameterguard",{"_index":1037,"title":{"guards/QueryParameterGuard.html":{}},"body":{"guards/QueryParameterGuard.html":{},"coverage.html":{}}}],["queryparams",{"_index":1047,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["querystore",{"_index":1019,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["queue",{"_index":287,"title":{},"body":{"components/IfcComponent.html":{}}}],["quot",{"_index":776,"title":{},"body":{"components/MapComponent.html":{}}}],["quot;12.345.678&quot",{"_index":1169,"title":{},"body":{"miscellaneous/functions.html":{}}}],["race",{"_index":292,"title":{},"body":{"components/IfcComponent.html":{}}}],["raw",{"_index":519,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["rawlayerdata",{"_index":997,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawlayerdata.shapes",{"_index":1004,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawlayerdata.shapes.map(rawshape",{"_index":1005,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawshape",{"_index":1008,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawshape.geojson",{"_index":1007,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawshape.nuts_key",{"_index":1006,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["readonly",{"_index":538,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["readwrite",{"_index":1013,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["received",{"_index":606,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["recommended",{"_index":302,"title":{},"body":{"components/IfcComponent.html":{}}}],["reconstruct",{"_index":958,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["record",{"_index":241,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["recreated",{"_index":1155,"title":{},"body":{"miscellaneous/functions.html":{}}}],["recursive",{"_index":213,"title":{},"body":{"components/IfcComponent.html":{}}}],["recursively",{"_index":267,"title":{},"body":{"components/IfcComponent.html":{}}}],["redirect",{"_index":1048,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["redirectto",{"_index":1044,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["ref",{"_index":743,"title":{},"body":{"components/MapComponent.html":{}}}],["reference",{"_index":179,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{}}}],["reject",{"_index":333,"title":{},"body":{"components/IfcComponent.html":{}}}],["rejected",{"_index":330,"title":{},"body":{"components/IfcComponent.html":{}}}],["removes",{"_index":57,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["render",{"_index":423,"title":{},"body":{"components/IfcComponent.html":{},"components/IonIconComponent.html":{}}}],["rendered",{"_index":716,"title":{},"body":{"components/MapComponent.html":{}}}],["renderer",{"_index":231,"title":{},"body":{"components/IfcComponent.html":{}}}],["renders",{"_index":723,"title":{},"body":{"components/MapComponent.html":{}}}],["reply",{"_index":1174,"title":{},"body":{"miscellaneous/functions.html":{}}}],["represent",{"_index":604,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["representing",{"_index":273,"title":{},"body":{"components/IfcComponent.html":{},"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["represents",{"_index":954,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["request",{"_index":539,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["requested",{"_index":1010,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["requests",{"_index":819,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["requests[layerkey",{"_index":823,"title":{},"body":{"components/MapComponent.html":{}}}],["required",{"_index":1080,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["res",{"_index":556,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"miscellaneous/functions.html":{}}}],["reset",{"_index":854,"title":{},"body":{"components/MapComponent.html":{},"modules/WisdomModule.html":{},"index.html":{}}}],["resize",{"_index":341,"title":{},"body":{"components/IfcComponent.html":{}}}],["resizecontainer",{"_index":202,"title":{},"body":{"components/IfcComponent.html":{}}}],["resizeobserver",{"_index":203,"title":{},"body":{"components/IfcComponent.html":{}}}],["resizeobserver(entries",{"_index":477,"title":{},"body":{"components/IfcComponent.html":{}}}],["resolution",{"_index":640,"title":{},"body":{"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["resolution&#39",{"_index":764,"title":{},"body":{"components/MapComponent.html":{}}}],["resolution.district",{"_index":775,"title":{},"body":{"components/MapComponent.html":{}}}],["resolution.municipal",{"_index":765,"title":{},"body":{"components/MapComponent.html":{}}}],["resolution.tokeylength(resolution",{"_index":975,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["resolutionnum",{"_index":974,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["resolutions",{"_index":1151,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["resolve",{"_index":335,"title":{},"body":{"components/IfcComponent.html":{}}}],["resolved",{"_index":315,"title":{},"body":{"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{},"miscellaneous/functions.html":{}}}],["resolves",{"_index":329,"title":{},"body":{"components/IfcComponent.html":{}}}],["resolving",{"_index":686,"title":{},"body":{"components/MapComponent.html":{}}}],["respected",{"_index":246,"title":{},"body":{"components/IfcComponent.html":{}}}],["respond",{"_index":689,"title":{},"body":{"components/MapComponent.html":{}}}],["responsetype",{"_index":558,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rest",{"_index":955,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rest/main/api/get",{"_index":693,"title":{},"body":{"components/MapComponent.html":{}}}],["results",{"_index":72,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":965,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["return",{"_index":70,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":956,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["returns",{"_index":115,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["right",{"_index":85,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["rise",{"_index":484,"title":{},"body":{"components/IfcComponent.html":{}}}],["root",{"_index":48,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["route",{"_index":1042,"title":{},"body":{"guards/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{}}}],["route.data[\"queryparams",{"_index":1065,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["route.data[\"redirect",{"_index":1063,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["route.queryparams[param",{"_index":1067,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["router",{"_index":24,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"guards/QueryParameterGuard.html":{}}}],["router#parseurl",{"_index":1046,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["routermodule",{"_index":1095,"title":{},"body":{"modules/WisdomModule.html":{}}}],["routerstatesnapshot",{"_index":1058,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["row",{"_index":84,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["run",{"_index":454,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["rxjs",{"_index":42,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["same",{"_index":456,"title":{},"body":{"components/IfcComponent.html":{}}}],["scene",{"_index":460,"title":{},"body":{"components/IfcComponent.html":{}}}],["schema",{"_index":511,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["schema_v",{"_index":535,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["scopes",{"_index":1076,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["scroll",{"_index":700,"title":{},"body":{"components/MapComponent.html":{}}}],["scrollwheelzoom",{"_index":668,"title":{},"body":{"components/MapComponent.html":{}}}],["see",{"_index":257,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["select",{"_index":1234,"title":{},"body":{"miscellaneous/variables.html":{}}}],["selectable",{"_index":695,"title":{},"body":{"components/MapComponent.html":{}}}],["selected",{"_index":215,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["selectedcolor",{"_index":669,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedgeojsonlayer",{"_index":660,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedlayer",{"_index":661,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedmodel",{"_index":357,"title":{},"body":{"components/IfcComponent.html":{}}}],["selectedshapes",{"_index":662,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes.add(key",{"_index":904,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes.delete(key",{"_index":901,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes.has(key",{"_index":898,"title":{},"body":{"components/MapComponent.html":{}}}],["selection",{"_index":680,"title":{},"body":{"components/MapComponent.html":{}}}],["selection.ts",{"_index":1130,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selector",{"_index":95,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["send_auth",{"_index":1116,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sent",{"_index":1252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["separated",{"_index":83,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"miscellaneous/functions.html":{}}}],["server",{"_index":607,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["service",{"_index":44,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":25,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/variables.html":{}}}],["set(index",{"_index":63,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["set(use_api_url",{"_index":1002,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["set(use_loader",{"_index":1003,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["setinputlayers(layerconfig",{"_index":757,"title":{},"body":{"components/MapComponent.html":{}}}],["setinputmarkers(markers",{"_index":778,"title":{},"body":{"components/MapComponent.html":{}}}],["setname(name",{"_index":598,"title":{},"body":{"components/IonIconComponent.html":{}}}],["sets",{"_index":452,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["setter",{"_index":588,"title":{},"body":{"components/IonIconComponent.html":{}}}],["setting",{"_index":1255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shape",{"_index":619,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["shape.key",{"_index":910,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shape.name",{"_index":909,"title":{},"body":{"components/MapComponent.html":{}}}],["shapedata",{"_index":613,"title":{"interfaces/ShapeData.html":{}},"body":{"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"coverage.html":{}}}],["shapekeys",{"_index":1015,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapekeys.push(shape.key",{"_index":1018,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapes",{"_index":609,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/variables.html":{}}}],["shapes.push(shape",{"_index":986,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapestore",{"_index":1014,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["show",{"_index":242,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["showmodel",{"_index":209,"title":{},"body":{"components/IfcComponent.html":{}}}],["showmodel(model",{"_index":323,"title":{},"body":{"components/IfcComponent.html":{}}}],["shown",{"_index":326,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["shows",{"_index":325,"title":{},"body":{"components/IfcComponent.html":{}}}],["shuffling",{"_index":861,"title":{},"body":{"components/MapComponent.html":{}}}],["simply",{"_index":957,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["single",{"_index":618,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["size",{"_index":345,"title":{},"body":{"components/IfcComponent.html":{}}}],["slash",{"_index":82,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["snapshot",{"_index":1062,"title":{},"body":{"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["solution",{"_index":1156,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sorting",{"_index":857,"title":{},"body":{"components/MapComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["specific",{"_index":274,"title":{},"body":{"components/IfcComponent.html":{}}}],["specifies",{"_index":374,"title":{},"body":{"components/IfcComponent.html":{}}}],["split",{"_index":840,"title":{},"body":{"components/MapComponent.html":{}}}],["src/.../ifc.component.ts",{"_index":1209,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../ifc.service.ts",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../invert",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../map.component.ts",{"_index":1210,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../map.service.ts",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../resolution.ts",{"_index":1150,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../send",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../use",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../util.ts",{"_index":1153,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts",{"_index":80,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"coverage.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:19",{"_index":131,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:21",{"_index":106,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:33",{"_index":124,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:48",{"_index":107,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:57",{"_index":117,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts",{"_index":6,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"coverage.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:29",{"_index":163,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:34",{"_index":164,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:44",{"_index":162,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:51",{"_index":161,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/bulma/bulma",{"_index":165,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"coverage.html":{}}}],["src/lib/guards/query",{"_index":1039,"title":{},"body":{"guards/QueryParameterGuard.html":{},"coverage.html":{}}}],["src/lib/http",{"_index":1112,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/ifc/ifc.component.ts",{"_index":193,"title":{},"body":{"components/IfcComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/ifc/ifc.component.ts:100",{"_index":259,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:104",{"_index":262,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:115",{"_index":269,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:130",{"_index":347,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:140",{"_index":328,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:144",{"_index":362,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:148",{"_index":338,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:154",{"_index":340,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:157",{"_index":336,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:160",{"_index":334,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:162",{"_index":332,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:165",{"_index":219,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:180",{"_index":322,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:198",{"_index":307,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:314",{"_index":280,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:329",{"_index":324,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:340",{"_index":316,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:74",{"_index":227,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.component.ts:96",{"_index":238,"title":{},"body":{"components/IfcComponent.html":{}}}],["src/lib/ifc/ifc.service.ts",{"_index":510,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/ifc/ifc.service.ts:38",{"_index":566,"title":{},"body":{"injectables/IfcService.html":{}}}],["src/lib/ifc/ifc.service.ts:60",{"_index":567,"title":{},"body":{"injectables/IfcService.html":{}}}],["src/lib/ion",{"_index":568,"title":{},"body":{"components/IonIconComponent.html":{},"coverage.html":{}}}],["src/lib/loader/loader.injector.ts",{"_index":624,"title":{},"body":{"injectables/LoaderInjector.html":{},"coverage.html":{}}}],["src/lib/loader/loader.injector.ts:16",{"_index":646,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["src/lib/loader/loader.injector.ts:25",{"_index":638,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["src/lib/map/invert",{"_index":1129,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/map/layer",{"_index":602,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{},"coverage.html":{}}}],["src/lib/map/map.component.ts",{"_index":651,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/map/map.component.ts:125",{"_index":679,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:133",{"_index":734,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:139",{"_index":735,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:144",{"_index":738,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:147",{"_index":694,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:150",{"_index":697,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:154",{"_index":744,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:157",{"_index":740,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:164",{"_index":749,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:170",{"_index":747,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:172",{"_index":746,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:175",{"_index":718,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:182",{"_index":675,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:197",{"_index":724,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:235",{"_index":722,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:386",{"_index":719,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:48",{"_index":742,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:51",{"_index":678,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:53",{"_index":733,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:56",{"_index":707,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:58",{"_index":753,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:61",{"_index":677,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:63",{"_index":728,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:66",{"_index":713,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:68",{"_index":756,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:74",{"_index":698,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:77",{"_index":711,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:79",{"_index":705,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.service.ts",{"_index":950,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/map/map.service.ts:70",{"_index":1023,"title":{},"body":{"injectables/MapService.html":{}}}],["src/lib/map/map.service.ts:97",{"_index":1025,"title":{},"body":{"injectables/MapService.html":{}}}],["src/lib/map/marker.ts",{"_index":1026,"title":{},"body":{"interfaces/Marker.html":{},"coverage.html":{}}}],["src/lib/map/resolution.ts",{"_index":1132,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/lib/util.ts",{"_index":1135,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/wisdom.module.ts",{"_index":1089,"title":{},"body":{"modules/WisdomModule.html":{}}}],["src/wisdominterface.ts",{"_index":1069,"title":{},"body":{"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["stackoverflow",{"_index":1157,"title":{},"body":{"miscellaneous/functions.html":{}}}],["start",{"_index":296,"title":{},"body":{"components/IfcComponent.html":{}}}],["state",{"_index":1057,"title":{},"body":{"guards/QueryParameterGuard.html":{},"miscellaneous/enumerations.html":{}}}],["statements",{"_index":1107,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":389,"title":{},"body":{"components/IfcComponent.html":{}}}],["stops",{"_index":586,"title":{},"body":{"components/IonIconComponent.html":{}}}],["store",{"_index":981,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["stored",{"_index":521,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["str",{"_index":1175,"title":{},"body":{"miscellaneous/functions.html":{}}}],["string",{"_index":16,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":29,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["stringtocolor",{"_index":1138,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stringtocolor(str",{"_index":1170,"title":{},"body":{"miscellaneous/functions.html":{}}}],["structure",{"_index":275,"title":{},"body":{"components/IfcComponent.html":{}}}],["style",{"_index":886,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["styles",{"_index":650,"title":{},"body":{"components/MapComponent.html":{}}}],["styleurls",{"_index":653,"title":{},"body":{"components/MapComponent.html":{}}}],["subject",{"_index":41,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{}}}],["subscribe(next",{"_index":139,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["such",{"_index":1073,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["support",{"_index":1203,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":120,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["svg",{"_index":1204,"title":{},"body":{"modules.html":{}}}],["swap",{"_index":1190,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sync",{"_index":1186,"title":{},"body":{"miscellaneous/functions.html":{}}}],["system",{"_index":252,"title":{},"body":{"components/IfcComponent.html":{}}}],["t",{"_index":1181,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":1142,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1141,"title":{},"body":{"coverage.html":{}}}],["takewhile",{"_index":133,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["template",{"_index":77,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["templateurl",{"_index":96,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["territorial",{"_index":621,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["text",{"_index":15,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{}}}],["then(file",{"_index":441,"title":{},"body":{"components/IfcComponent.html":{}}}],["therefore",{"_index":89,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["these&#39",{"_index":769,"title":{},"body":{"components/MapComponent.html":{}}}],["things",{"_index":168,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["third",{"_index":1160,"title":{},"body":{"miscellaneous/functions.html":{}}}],["this.alive",{"_index":138,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.center",{"_index":814,"title":{},"body":{"components/MapComponent.html":{}}}],["this.elementref.nativeelement.classlist.toggle(\"is",{"_index":192,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.elref.nativeelement?.setattribute(\"name",{"_index":600,"title":{},"body":{"components/IonIconComponent.html":{}}}],["this.emitselection",{"_index":905,"title":{},"body":{"components/MapComponent.html":{}}}],["this.fragments",{"_index":140,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.fragments.includes(undefined",{"_index":142,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.fragments.length",{"_index":65,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.fragments[index",{"_index":67,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.height",{"_index":810,"title":{},"body":{"components/MapComponent.html":{}}}],["this.idb",{"_index":541,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["this.inputcenter",{"_index":813,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputheight",{"_index":809,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputlayerselectable",{"_index":894,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputmodels",{"_index":419,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.inputscrollwheelzoom",{"_index":839,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputtileurl",{"_index":811,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputzoom",{"_index":815,"title":{},"body":{"components/MapComponent.html":{}}}],["this.isdestroyed",{"_index":466,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.keynames.next(object.fromentries(keynames",{"_index":835,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerconfig.next(layerconfig",{"_index":802,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerconfig.subscribe(async",{"_index":818,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerdata.next(fetched",{"_index":831,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerdata.subscribe(async",{"_index":852,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layernames[key].length",{"_index":921,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layernames[layerkey",{"_index":822,"title":{},"body":{"components/MapComponent.html":{}}}],["this.loadedmodels",{"_index":401,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.loader.addloader(loadall",{"_index":503,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.loader.addloader(loading",{"_index":473,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.loaders.emit([toresolve",{"_index":649,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["this.map",{"_index":847,"title":{},"body":{"components/MapComponent.html":{}}}],["this.mapelement.nativeelement",{"_index":837,"title":{},"body":{"components/MapComponent.html":{}}}],["this.markers.next(markers",{"_index":807,"title":{},"body":{"components/MapComponent.html":{}}}],["this.markers.subscribe(markers",{"_index":933,"title":{},"body":{"components/MapComponent.html":{}}}],["this.modelloadabort",{"_index":404,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.modelloaddone",{"_index":403,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.modelloaddone(this.models",{"_index":485,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.models",{"_index":418,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.models[model].fixed",{"_index":504,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.models[model].ifcmodel",{"_index":462,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.resizeobserver",{"_index":476,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.resizeobserver.disconnect",{"_index":507,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.resizeobserver.observe(this.resizecontainer.nativeelement",{"_index":482,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.router.parseurl(redirect",{"_index":1064,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["this.selected.emit",{"_index":946,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedcolor",{"_index":902,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedgeojsonlayer",{"_index":872,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedlayer",{"_index":912,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedmodel.emit(props",{"_index":502,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.selectedshapes",{"_index":855,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedshapes[key",{"_index":875,"title":{},"body":{"components/MapComponent.html":{}}}],["this.service.fetchlayerdata",{"_index":824,"title":{},"body":{"components/MapComponent.html":{}}}],["this.service.fetchmodel(path",{"_index":440,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.service.observe",{"_index":136,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.subject.asobservable",{"_index":71,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.subject.next(this.fragments",{"_index":68,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.tileurl",{"_index":812,"title":{},"body":{"components/MapComponent.html":{}}}],["this.translate.get(this.layernames[key",{"_index":922,"title":{},"body":{"components/MapComponent.html":{}}}],["this.translate.instant(\"common.ifc.loading",{"_index":472,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.translate.instant(this.layernames[key",{"_index":919,"title":{},"body":{"components/MapComponent.html":{}}}],["this.translate.onlangchange.subscribe",{"_index":916,"title":{},"body":{"components/MapComponent.html":{}}}],["this.unselectedcolor",{"_index":888,"title":{},"body":{"components/MapComponent.html":{}}}],["this.usepicking",{"_index":491,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.userecursive",{"_index":501,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer",{"_index":430,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer!.context.scene.removemodel(ifcmodel",{"_index":461,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer!.context.updateaspect",{"_index":481,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer!.ifc.getproperties(modelid",{"_index":500,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer!.ifc.loader.ifcmanager.applywebifcconfig",{"_index":457,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer!.ifc.loadifc(file",{"_index":459,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer!.ifc.selector.pickifcitem",{"_index":496,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer!.ifc.selector.prepickifcitem",{"_index":493,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer.context.scene.addmodel(this.models[model].ifcmodel",{"_index":506,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer.context.scene.removemodel(this.models[model].ifcmodel",{"_index":505,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer.dispose",{"_index":508,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewer.ifc.loader.ifcmanager.usewebworkers(true",{"_index":432,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewercontainer.nativeelement",{"_index":420,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewercontainer.nativeelement.onclick",{"_index":494,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.viewercontainer.nativeelement.onmousemove",{"_index":492,"title":{},"body":{"components/IfcComponent.html":{}}}],["this.zoom",{"_index":816,"title":{},"body":{"components/MapComponent.html":{}}}],["three/ifc/basedefinitions",{"_index":370,"title":{},"body":{"components/IfcComponent.html":{}}}],["three/ifc/components/ifcmodel",{"_index":366,"title":{},"body":{"components/IfcComponent.html":{}}}],["through",{"_index":1188,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["tile",{"_index":708,"title":{},"body":{"components/MapComponent.html":{}}}],["tileurl",{"_index":663,"title":{},"body":{"components/MapComponent.html":{}}}],["time",{"_index":247,"title":{},"body":{"components/IfcComponent.html":{}}}],["times",{"_index":1265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todo",{"_index":468,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["toenum",{"_index":1133,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["toenum(length",{"_index":1196,"title":{},"body":{"miscellaneous/functions.html":{}}}],["toggle",{"_index":172,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"miscellaneous/variables.html":{}}}],["toggleable",{"_index":158,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["toggleable.directive",{"_index":1099,"title":{},"body":{"modules/WisdomModule.html":{}}}],["toggleable.directive.ts",{"_index":166,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"coverage.html":{}}}],["toggleable.directive.ts:18",{"_index":178,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:30",{"_index":181,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggles",{"_index":182,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggling",{"_index":184,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["tokeylength",{"_index":1134,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tokeylength(res",{"_index":1198,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tooltip",{"_index":1029,"title":{},"body":{"interfaces/Marker.html":{}}}],["top",{"_index":1082,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["topright",{"_index":1225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["toresolve",{"_index":642,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["touch",{"_index":648,"title":{},"body":{"injectables/LoaderInjector.html":{}}}],["transforms",{"_index":1199,"title":{},"body":{"miscellaneous/functions.html":{}}}],["translate",{"_index":143,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["translate/core",{"_index":372,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{}}}],["translated",{"_index":471,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/variables.html":{}}}],["translatemodule",{"_index":1096,"title":{},"body":{"modules/WisdomModule.html":{}}}],["translateobject",{"_index":1139,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["translateobject(service",{"_index":1179,"title":{},"body":{"miscellaneous/functions.html":{}}}],["translateservice",{"_index":32,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["translation",{"_index":470,"title":{},"body":{"components/IfcComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["translations",{"_index":1077,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["translator",{"_index":1264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":79,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["trimmedkeys",{"_index":973,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["true",{"_index":130,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":536,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{}}}],["ts",{"_index":414,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["tslib",{"_index":1144,"title":{},"body":{"dependencies.html":{}}}],["tuple",{"_index":1191,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tupleswap",{"_index":1140,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tupleswap(tuple",{"_index":1189,"title":{},"body":{"miscellaneous/functions.html":{}}}],["two",{"_index":1195,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tx",{"_index":979,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["tx.objectstore(\"queries",{"_index":1020,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["tx.objectstore(\"shapes",{"_index":982,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["type",{"_index":17,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1207,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":449,"title":{},"body":{"components/IfcComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["undefined",{"_index":110,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["under",{"_index":644,"title":{},"body":{"injectables/LoaderInjector.html":{},"interfaces/WisdomInterface.html":{}}}],["units",{"_index":622,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["unknown",{"_index":1009,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["unselected",{"_index":712,"title":{},"body":{"components/MapComponent.html":{}}}],["unselectedcolor",{"_index":670,"title":{},"body":{"components/MapComponent.html":{}}}],["up",{"_index":109,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{}}}],["update",{"_index":127,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["updating",{"_index":858,"title":{},"body":{"components/MapComponent.html":{}}}],["upgrade(db",{"_index":543,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["upon",{"_index":125,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["url",{"_index":709,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["url.ts",{"_index":1118,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["urltree",{"_index":37,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"guards/QueryParameterGuard.html":{}}}],["use",{"_index":22,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["use_api_url",{"_index":961,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_base_url",{"_index":1120,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_cache",{"_index":1122,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_error_curtain",{"_index":1125,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_fast_bools",{"_index":458,"title":{},"body":{"components/IfcComponent.html":{}}}],["use_loader",{"_index":528,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":54,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1192,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["usepicking",{"_index":395,"title":{},"body":{"components/IfcComponent.html":{}}}],["userecursive",{"_index":397,"title":{},"body":{"components/IfcComponent.html":{}}}],["uses",{"_index":512,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"components/IonIconComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{}}}],["using",{"_index":301,"title":{},"body":{"components/IfcComponent.html":{},"miscellaneous/functions.html":{}}}],["utility",{"_index":1182,"title":{},"body":{"miscellaneous/functions.html":{}}}],["value",{"_index":61,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IfcComponent.html":{},"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":681,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["var",{"_index":147,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["variable",{"_index":1115,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1211,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":534,"title":{},"body":{"interfaces/IfcDB.html":{},"injectables/IfcService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":306,"title":{},"body":{"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["view",{"_index":309,"title":{},"body":{"components/IfcComponent.html":{}}}],["viewchild",{"_index":363,"title":{},"body":{"components/IfcComponent.html":{},"components/MapComponent.html":{}}}],["viewchild(\"map",{"_index":787,"title":{},"body":{"components/MapComponent.html":{}}}],["viewchild(\"resizecontainer",{"_index":400,"title":{},"body":{"components/IfcComponent.html":{}}}],["viewchild(\"viewercontainer",{"_index":399,"title":{},"body":{"components/IfcComponent.html":{}}}],["viewchild('map",{"_index":741,"title":{},"body":{"components/MapComponent.html":{}}}],["viewchild('resizecontainer",{"_index":337,"title":{},"body":{"components/IfcComponent.html":{}}}],["viewchild('viewercontainer",{"_index":361,"title":{},"body":{"components/IfcComponent.html":{}}}],["viewer",{"_index":204,"title":{},"body":{"components/IfcComponent.html":{}}}],["viewer/web",{"_index":359,"title":{},"body":{"components/IfcComponent.html":{}}}],["viewercontainer",{"_index":205,"title":{},"body":{"components/IfcComponent.html":{}}}],["visibility",{"_index":183,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{}}}],["visible",{"_index":297,"title":{},"body":{"components/IfcComponent.html":{}}}],["void",{"_index":123,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IfcComponent.html":{},"components/IonIconComponent.html":{},"injectables/LoaderInjector.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"miscellaneous/variables.html":{}}}],["want",{"_index":1261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["web",{"_index":364,"title":{},"body":{"components/IfcComponent.html":{}}}],["webcomponents",{"_index":574,"title":{},"body":{"components/IonIconComponent.html":{}}}],["website",{"_index":596,"title":{},"body":{"components/IonIconComponent.html":{}}}],["whether",{"_index":132,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IfcComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["whole",{"_index":1260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["width",{"_index":234,"title":{},"body":{"components/IfcComponent.html":{}}}],["wisdom",{"_index":1070,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["wisdominterface",{"_index":1068,"title":{"interfaces/WisdomInterface.html":{}},"body":{"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["wisdommodule",{"_index":1083,"title":{"modules/WisdomModule.html":{}},"body":{"modules/WisdomModule.html":{},"index.html":{},"modules.html":{}}}],["within",{"_index":384,"title":{},"body":{"components/IfcComponent.html":{}}}],["without",{"_index":684,"title":{},"body":{"components/MapComponent.html":{}}}],["work",{"_index":592,"title":{},"body":{"components/IonIconComponent.html":{}}}],["worry",{"_index":860,"title":{},"body":{"components/MapComponent.html":{}}}],["wrong",{"_index":1193,"title":{},"body":{"miscellaneous/functions.html":{}}}],["yes",{"_index":643,"title":{},"body":{"injectables/LoaderInjector.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{}}}],["yourself",{"_index":1263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z",{"_index":947,"title":{},"body":{"components/MapComponent.html":{}}}],["zoom",{"_index":664,"title":{},"body":{"components/MapComponent.html":{},"modules/WisdomModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Breadcrumb.html":{"url":"interfaces/Breadcrumb.html","title":"interface - Breadcrumb","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Breadcrumb\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/breadcrumbs/breadcrumbs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Breadcrumb fragment interface.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                        \n                                            link\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            query\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional icon name to be displayed on the left of the fragment name.\nThis will use an IonIconComponent for the icon.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Router link to be set for the fragment.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:         Params\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Params\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional query parameters for the router link.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    String or array of strings to be displayed as fragment.\nEvery element will be passed to the TranslateService.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {Injectable} from \"@angular/core\";\nimport {Params, ActivatedRouteSnapshot, UrlTree} from \"@angular/router\";\nimport {Observable, BehaviorSubject, Subject} from \"rxjs\";\n\n/** Breadcrumb fragment interface. */\nexport interface Breadcrumb {\n  /**\n   * Optional icon name to be displayed on the left of the fragment name.\n   * This will use an {@link IonIconComponent} for the icon.\n   */\n  icon?: string,\n  /**\n   * String or array of strings to be displayed as fragment.\n   * Every element will be passed to the {@link TranslateService}.\n   */\n  text: string | string[],\n  /** Router link to be set for the fragment. */\n  link: string,\n  /** Optional query parameters for the router link. */\n  query?: Params\n}\n\n/** Service collecting the breadcrumbs. */\n@Injectable({\n  providedIn: 'root'\n})\nexport class BreadcrumbsService {\n  /** List of breadcrumbs. */\n  fragments: Breadcrumb[] = [];\n  /**\n   * {@link Subject} for the {@link Breadcrumb}s, to be used as\n   * {@link Observable}.\n   */\n  private subject: BehaviorSubject\n    = new BehaviorSubject([]);\n\n  /**\n   * Set a new breadcrumb fragment.\n   *\n   * This removes all fragments with a higher index than the set one.\n   * @param index Index of the breadcrumb array\n   * @param value Breadcrumb fragment to display\n   */\n  set(index: number, value: Breadcrumb) {\n    this.fragments.length = index + 1;\n    this.fragments[index] = value;\n    this.subject.next(this.fragments);\n  }\n\n  /** Observe the breadcrumb fragments. */\n  observe(): Observable {\n    return this.subject.asObservable();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BreadcrumbsComponent.html":{"url":"components/BreadcrumbsComponent.html","title":"component - BreadcrumbsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BreadcrumbsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/breadcrumbs/breadcrumbs.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component to display breadcrumbs collected by the BreadcrumbsService.\nThis will display a slash separated row with all breadcrumb fragments.\nThe one the most right is considered the current page and is therefore not\nclickable.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                breadcrumbs\n            \n\n\n\n\n            \n                templateUrl\n                ./breadcrumbs.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                alive\n                            \n                            \n                                fragments\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isAllSet\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: BreadcrumbsService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        BreadcrumbsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to get breadcrumb fragments from\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isAllSet\n                        \n                    \n                \n            \n            \n                \nisAllSet()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:48\n                \n            \n\n\n            \n                \n                    Check if all fragments up to the most right are set.\nIf one is undefined this will return false.\nThis allows ensuring that only fully defined breadcrumbs will be displayed.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:57\n                \n            \n\n\n            \n                \n                    On destroy set alive to false.\nThis makes sure that the component does not live as long as the service.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:33\n                \n            \n\n\n            \n                \n                    Upon init this will observe the service and update the breadcrumbs if\nneeded.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        alive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:19\n                        \n                    \n\n            \n                \n                    Whether this component is alive.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fragments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         (Breadcrumb | undefined)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:21\n                        \n                    \n\n            \n                \n                    Breadcrumb fragments that will be displayed.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {Component, OnDestroy, OnInit} from \"@angular/core\";\nimport {takeWhile} from \"rxjs\";\n\nimport {Breadcrumb, BreadcrumbsService} from \"./breadcrumbs.service\";\n\n/**\n * Component to display breadcrumbs collected by the {@link BreadcrumbsService}.\n *\n * This will display a slash separated row with all breadcrumb fragments.\n * The one the most right is considered the current page and is therefore not\n * clickable.\n */\n@Component({\n  selector: 'breadcrumbs',\n  templateUrl: './breadcrumbs.component.html'\n})\nexport class BreadcrumbsComponent implements OnInit, OnDestroy {\n  /** Whether this component is alive. */\n  private alive: boolean = true;\n  /** Breadcrumb fragments that will be displayed. */\n  fragments: (Breadcrumb | undefined)[] = [];\n\n  /**\n   * Constructor.\n   * @param service Service to get breadcrumb fragments from\n   */\n  constructor(private service: BreadcrumbsService) { }\n\n  /**\n   * Upon init this will observe the service and update the breadcrumbs if\n   * needed.\n   */\n  ngOnInit(): void {\n    this.service.observe()\n      .pipe(takeWhile(() => this.alive))\n      .subscribe(next => {\n      this.fragments = next\n    });\n  }\n\n  /**\n   * Check if all fragments up to the most right are set.\n   *\n   * If one is undefined this will return `false`.\n   *\n   * This allows ensuring that only fully defined breadcrumbs will be displayed.\n   */\n  isAllSet(): boolean {\n    return !this.fragments.includes(undefined);\n  }\n\n  /**\n   * On destroy set {@link alive} to `false`.\n   *\n   * This makes sure that the component does not live as long as the service.\n   */\n  ngOnDestroy(): void {\n    this.alive = false;\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n          \n            \n          \n          \n            \n              {{text | translate}}\n            \n          \n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                        {{text | translate}}                                          '\n    var COMPONENTS = [{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'IfcComponent', 'selector': 'ifc'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'BreadcrumbsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BreadcrumbsService.html":{"url":"injectables/BreadcrumbsService.html","title":"injectable - BreadcrumbsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BreadcrumbsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/breadcrumbs/breadcrumbs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service collecting the breadcrumbs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fragments\n                            \n                            \n                                    Private\n                                subject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                observe\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        observe\n                        \n                    \n                \n            \n            \n                \nobserve()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:51\n                \n            \n\n\n            \n                \n                    Observe the breadcrumb fragments.\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(index: number, value: Breadcrumb)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:44\n                \n            \n\n\n            \n                \n                    Set a new breadcrumb fragment.\nThis removes all fragments with a higher index than the set one.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of the breadcrumb array\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                                Breadcrumb\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Breadcrumb fragment to display\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fragments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Breadcrumb[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:29\n                        \n                    \n\n            \n                \n                    List of breadcrumbs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:34\n                        \n                    \n\n            \n                \n                    Subject for the Breadcrumbs, to be used as\nObservable.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from \"@angular/core\";\nimport {Params, ActivatedRouteSnapshot, UrlTree} from \"@angular/router\";\nimport {Observable, BehaviorSubject, Subject} from \"rxjs\";\n\n/** Breadcrumb fragment interface. */\nexport interface Breadcrumb {\n  /**\n   * Optional icon name to be displayed on the left of the fragment name.\n   * This will use an {@link IonIconComponent} for the icon.\n   */\n  icon?: string,\n  /**\n   * String or array of strings to be displayed as fragment.\n   * Every element will be passed to the {@link TranslateService}.\n   */\n  text: string | string[],\n  /** Router link to be set for the fragment. */\n  link: string,\n  /** Optional query parameters for the router link. */\n  query?: Params\n}\n\n/** Service collecting the breadcrumbs. */\n@Injectable({\n  providedIn: 'root'\n})\nexport class BreadcrumbsService {\n  /** List of breadcrumbs. */\n  fragments: Breadcrumb[] = [];\n  /**\n   * {@link Subject} for the {@link Breadcrumb}s, to be used as\n   * {@link Observable}.\n   */\n  private subject: BehaviorSubject\n    = new BehaviorSubject([]);\n\n  /**\n   * Set a new breadcrumb fragment.\n   *\n   * This removes all fragments with a higher index than the set one.\n   * @param index Index of the breadcrumb array\n   * @param value Breadcrumb fragment to display\n   */\n  set(index: number, value: Breadcrumb) {\n    this.fragments.length = index + 1;\n    this.fragments[index] = value;\n    this.subject.next(this.fragments);\n  }\n\n  /** Observe the breadcrumb fragments. */\n  observe(): Observable {\n    return this.subject.asObservable();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/BulmaIsToggleableDirective.html":{"url":"directives/BulmaIsToggleableDirective.html","title":"directive - BulmaIsToggleableDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  BulmaIsToggleableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/bulma/bulma-is-toggleable.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Directive for making things toggleable with bulma.\nClicking on the node that has this directive will toggle the \"is-active\"\nclass.\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        .is-toggleable\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toggle\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elementRef: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elementRef\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Reference to element this is applied to\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:30\n                \n            \n\n\n            \n                \n                    Toggles the visibility of a bulma element by toggling is-active css class.\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toggle\n                        \n                    \n                \n            \n            \n                \ntoggle()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click')\n                \n            \n\n            \n                \n                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:30\n                \n            \n\n\n            \n                \n                    Toggles the visibility of a bulma element by toggling is-active css class.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import {\n  HostBinding,\n  Directive,\n  Input,\n  HostListener,\n  ElementRef\n} from \"@angular/core\";\n\n/**\n * Directive for making things toggleable with bulma.\n *\n * Clicking on the node that has this directive will toggle the \"is-active\"\n * class.\n */\n@Directive({\n  selector: \".is-toggleable\"\n})\nexport class BulmaIsToggleableDirective {\n\n  /**\n   * Constructor.\n   * @param elementRef Reference to element this is applied to\n   */\n  constructor(private elementRef: ElementRef) {}\n\n  /**\n   * Toggles the visibility of a bulma element by toggling `is-active` css class.\n   */\n  @HostListener(\"click\")\n  toggle() {\n    this.elementRef.nativeElement.classList.toggle(\"is-active\");\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/IfcComponent.html":{"url":"components/IfcComponent.html","title":"component - IfcComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  IfcComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/ifc/ifc.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component for displaying IFC models.\n\n    \n\n\n    \n        Implements\n    \n    \n                    AfterViewInit\n                    OnDestroy\n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ifc\n            \n\n\n\n            \n                template\n                \n  \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isDestroyed\n                            \n                            \n                                loadedModels\n                            \n                            \n                                    Private\n                                modelLoadAbort\n                            \n                            \n                                    Private\n                                modelLoadDone\n                            \n                            \n                                    Private\n                                models\n                            \n                            \n                                    Private\n                                resizeContainer\n                            \n                            \n                                    Private\n                                    Optional\n                                resizeObserver\n                            \n                            \n                                    Optional\n                                viewer\n                            \n                            \n                                    Private\n                                viewerContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hideModel\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                    Async\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                showModel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                height\n                            \n                            \n                                models\n                            \n                            \n                                picking\n                            \n                            \n                                recursive\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                selected\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: IfcService, loader: LoaderInjector, translate: TranslateService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ifc/ifc.component.ts:165\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        IfcService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                IFC service to lazily fetch models\n\n                                                        \n                                                \n                                                \n                                                        loader\n                                                  \n                                                        \n                                                                        LoaderInjector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Loader injector to lower the loading curtain while loading models\n\n                                                        \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Translate service to translate loading text\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"70vh\"\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ifc/ifc.component.ts:74\n                            \n                        \n                \n                    \n                        Input for the height of the component.\nThe height should be adjusted by this property to allow the renderer to\ncorrectly output the height.\nThe width is dynamically inferred.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        models\n                    \n                \n                \n                    \n                        Type :         InputModels\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ifc/ifc.component.ts:96\n                            \n                        \n                \n                    \n                        Input for the models that should be displayed.\nThe keys of the given record will be used for the show and hide functions.\nThe order of the given record is respected at any time, the first model\nwill define the coordinate system used by all models.\nThe finally fully loaded models will also have the ordering given by this\nrecord.\nExample:\nSee ModelEntry\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        picking\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ifc/ifc.component.ts:100\n                            \n                        \n                \n                    \n                        Input indicating whether picking should be enabled.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        recursive\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ifc/ifc.component.ts:104\n                            \n                        \n                \n                    \n                        Input indicating whether the picker should load object data recursively.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        selected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ifc/ifc.component.ts:115\n                            \n                        \n                \n                    \n                        Output for the selected model.\nThis event is emitted when a model is selected if picking is enabled.\nThe event data is a JSON object representing the selected model.\nThe specific structure of the object depends on the model and needs to be\ninferred by other means.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hideModel\n                        \n                    \n                \n            \n            \n                \nhideModel(model: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ifc/ifc.component.ts:314\n                \n            \n\n\n            \n                \n                    Hides a model from the viewer.\nThis function ensures that no errors occur, but it does not keep a queue\nof all the models to be hidden.\nIf called too early, the models cannot be hidden.\nTo avoid race conditions, await the loadedModels promise.\nTo hide a model from the start, set the visible property of the\ncorresponding model entry in inputModels to false.\nModels with the fixed property set to true cannot be hidden using this\nfunction.\nIt is recommended to use this function to hide models from the viewer\ninstead of hiding them manually via the viewer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The model to hide, using the keys from inputModels\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ifc/ifc.component.ts:198\n                \n            \n\n\n            \n                \n                    Main function of this component.\nAfter the view is initialized, this function prepares the viewer\nand loads all the models for loadedModels.\nWhile loading, the loading curtain will be lowered.\nWhen loading is complete, loadedModels is resolved, and\nviewer can be used.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ifc/ifc.component.ts:340\n                \n            \n\n\n            \n                \n                    Disconnects the resizeObserver and clears the memory from the\nmodels of the viewer.\nThis ensures that models will no longer be loaded when this\ncomponent is destroyed.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ifc/ifc.component.ts:180\n                \n            \n\n\n            \n                \n                    Prepares the loadedModels promise.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showModel\n                        \n                    \n                \n            \n            \n                \nshowModel(model: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ifc/ifc.component.ts:329\n                \n            \n\n\n            \n                \n                    Shows a model in the viewer.\nThis function ensures that no errors occur, but it does not keep a queue\nof all the models to be shown.\nIf called too early, the models cannot be shown.\nTo avoid race conditions, await the loadedModels promise.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The model to show, using the keys from inputModels\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isDestroyed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/lib/ifc/ifc.component.ts:165\n                        \n                    \n\n            \n                \n                    Flag whether this component is destroyed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadedModels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Promise\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/ifc/ifc.component.ts:140\n                        \n                    \n\n            \n                \n                    A promise for the loaded IFC models.\nThis promise resolves with the loaded models when the viewer has fully\nloaded them.\nIt may also be rejected if the component is destroyed before fully loading\nthe models.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        modelLoadAbort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/ifc/ifc.component.ts:162\n                        \n                    \n\n            \n                \n                    Reject function for the loadedModels promise.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        modelLoadDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/ifc/ifc.component.ts:160\n                        \n                    \n\n            \n                \n                    Resolve function for the loadedModels promise.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        models\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoadedModels\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/lib/ifc/ifc.component.ts:157\n                        \n                    \n\n            \n                \n                    Models loaded by this component.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        resizeContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('resizeContainer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/ifc/ifc.component.ts:148\n                        \n                    \n\n            \n                \n                    Container for the resizeObserver.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        resizeObserver\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ResizeObserver\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/ifc/ifc.component.ts:154\n                        \n                    \n\n            \n                \n                    Resize observer detecting changes on the resizeContainer to update\nthe size of the viewerContainer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        viewer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     IfcViewerAPI\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/ifc/ifc.component.ts:130\n                        \n                    \n\n            \n                \n                    Ifc viewer containing every interaction with the viewer.\nAttention: This viewer is only fully available after the models have\nfully loaded.\nTo avoid race conditions await the loadedModels.\nBeware of directly using this viewer, as it may not be easy to use directly.\nMost important interactions are available via the loadedModels and\nselectedModel properties.\nSee https://ifcjs.github.io/info/docs/Guide/web-ifc-viewer/web-ifc-viewer-API\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewerContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('viewerContainer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/ifc/ifc.component.ts:144\n                        \n                    \n\n            \n                \n                    Container for the viewer.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n  AfterViewInit,\n  Component,\n  ElementRef, EventEmitter,\n  Input, OnDestroy, OnInit, Output,\n  ViewChild\n} from '@angular/core';\nimport {IfcViewerAPI} from \"web-ifc-viewer\";\nimport {IFCModel} from \"web-ifc-three/IFC/components/IFCModel\";\nimport {IfcService} from \"./ifc.service\";\nimport {LoaderInjector} from \"../loader/loader.injector\";\nimport {JSONObject} from \"web-ifc-three/IFC/BaseDefinitions\";\nimport {TranslateService} from \"@ngx-translate/core\";\n\nexport namespace IfcComponent {\n  /**\n   * Model entry.\n   */\n  export type ModelEntry = {\n    /** Specifies the path to the IFC model file. */\n    path: string,\n\n    /**\n     * Indicates whether the model should be displayed after loading.\n     * This is optional, with the model being visible by default.\n     */\n    visible?: boolean,\n\n    /**\n     * Denotes whether this model's visibility can be altered.\n     * This is optional, with the model being disable-able by default.\n     */\n    fixed?: boolean,\n\n    /**\n     * Decides whether this model should be adjusted to fit within the frame.\n     * This is recommended to be set only for one model.\n     * This is optional, with the model not fitting to frame by default.\n     */\n    fitToFrame?: boolean,\n\n    /**\n     * Decides whether to use caching on this model.\n     * This is recommended for static models with static paths.\n     * This is optional, caching is enabled by default.\n     */\n    cache?: boolean\n  };\n}\n\ntype ModelEntry = IfcComponent.ModelEntry;\ntype InputModels = Record;\ntype LoadedModels = Record;\n\n/** Component for displaying IFC models. */\n@Component({\n  selector: 'ifc',\n  template: `\n    \n      \n    \n  `\n})\nexport class IfcComponent implements AfterViewInit, OnDestroy, OnInit {\n\n  /**\n   * Input for the height of the component.\n   *\n   * The height should be adjusted by this property to allow the renderer to\n   * correctly output the height.\n   * The width is dynamically inferred.\n   */\n  @Input()\n  height = \"70vh\";\n\n  /**\n   * Input for the models that should be displayed.\n   *\n   * The keys of the given record will be used for the show and hide functions.\n   * The order of the given record is respected at any time, the first model\n   * will define the coordinate system used by all models.\n   * The finally fully loaded models will also have the ordering given by this\n   * record.\n   *\n   * **Example**:\n   * ```\n   * \n   * ```\n   *\n   * @see ModelEntry\n   */\n  @Input(\"models\")\n  inputModels: InputModels = {};\n\n  /** Input indicating whether picking should be enabled. */\n  @Input(\"picking\")\n  usePicking: boolean = false;\n\n  /** Input indicating whether the picker should load object data recursively. */\n  @Input(\"recursive\")\n  useRecursive: boolean = false;\n\n  /**\n   * Output for the selected model.\n   *\n   * This event is emitted when a model is selected if picking is enabled.\n   * The event data is a JSON object representing the selected model.\n   * The specific structure of the object depends on the model and needs to be\n   * inferred by other means.\n   */\n  @Output(\"selected\")\n  selectedModel: EventEmitter = new EventEmitter();\n\n  /**\n   * Ifc viewer containing every interaction with the viewer.\n   *\n   * **Attention**: This viewer is only fully available after the models have\n   * fully loaded.\n   * To avoid race conditions await the {@link loadedModels}.\n   *\n   * Beware of directly using this viewer, as it may not be easy to use directly.\n   * Most important interactions are available via the {@link loadedModels} and\n   * {@link selectedModel} properties.\n   *\n   * @see https://ifcjs.github.io/info/docs/Guide/web-ifc-viewer/web-ifc-viewer-API\n   */\n  viewer?: IfcViewerAPI;\n\n  /**\n   * A promise for the loaded IFC models.\n   *\n   * This promise resolves with the loaded models when the viewer has fully\n   * loaded them.\n   * It may also be rejected if the component is destroyed before fully loading\n   * the models.\n   */\n  loadedModels!: Promise;\n\n  /** Container for the viewer. */\n  @ViewChild(\"viewerContainer\")\n  private viewerContainer!: ElementRef;\n\n  /** Container for the {@link resizeObserver}. */\n  @ViewChild(\"resizeContainer\")\n  private resizeContainer!: ElementRef;\n\n  /**\n   * Resize observer detecting changes on the {@link resizeContainer} to update\n   * the size of the {@link viewerContainer}.\n   */\n  private resizeObserver?: ResizeObserver;\n\n  /** Models loaded by this component. */\n  private models: LoadedModels = {};\n\n  /** Resolve function for the {@link loadedModels} promise. */\n  private modelLoadDone!: (value: LoadedModels) => void;\n  /** Reject function for the {@link loadedModels} promise. */\n  private modelLoadAbort!: () => void;\n\n  /** Flag whether this component is destroyed. */\n  private isDestroyed: boolean = false;\n\n  /**\n   * Constructor.\n   * @param service IFC service to lazily fetch models\n   * @param loader Loader injector to lower the loading curtain while loading models\n   * @param translate Translate service to translate loading text\n   */\n  constructor(\n    private service: IfcService,\n    private loader: LoaderInjector,\n    private translate: TranslateService\n  ) {}\n\n  /** Prepares the {@link loadedModels} promise. */\n  ngOnInit(): void {\n    this.loadedModels = new Promise((resolve, reject) => {\n      this.modelLoadDone = resolve;\n      this.modelLoadAbort = reject;\n    });\n  }\n\n  /**\n   * Main function of this component.\n   *\n   * After the view is initialized, this function prepares the {@link viewer}\n   * and loads all the models for {@link loadedModels}.\n   *\n   * While loading, the loading curtain will be lowered.\n   *\n   * When loading is complete, {@link loadedModels} is resolved, and\n   * {@link viewer} can be used.\n   */\n  ngAfterViewInit(): Promise {\n    const loadAll: Promise = new Promise(async allLoaded => {\n      // make code clearer by this alias\n      const abort = allLoaded;\n\n      // @ts-ignore the models do not have the ifcModel at this point, but this\n      // is fine\n      this.models = this.inputModels;\n      const container = this.viewerContainer.nativeElement;\n\n      // set initial width and height to properly render, after load is done,\n      // resize will fix this size\n      container.style.width = \"500px\";\n      container.style.height = \"500px\";\n\n      // initialize ifc viewer\n      this.viewer = new IfcViewerAPI({container});\n      await this.viewer.IFC.loader.ifcManager.useWebWorkers(true, \"IFCWorker.js\");\n\n      // fetch models from path or local db\n      let fetchModels = [];\n      for (let [model, opts] of Object.entries(this.inputModels)) {\n        let {path, cache} = opts;\n        fetchModels.push(\n          this.service.fetchModel(path, cache === false)\n            .then(file => [model, Object.assign({}, opts, {file})])\n        );\n      }\n      let fetchedInput: Record =\n        Object.fromEntries(await Promise.all(fetchModels));\n\n      // load models\n      let modelIter = Object.entries(fetchedInput);\n      const loadModel = async (modelEntry: typeof modelIter[0], first: boolean) => {\n        const [model, opts] = modelEntry;\n        const {file, fitToFrame, visible, path, fixed} = opts;\n\n        // COORDINATE_TO_ORIGIN sets the origin of the model\n        // only first run should align this, the other should use same system\n        await this.viewer!.IFC.loader.ifcManager.applyWebIfcConfig({\n          USE_FAST_BOOLS: true,\n          COORDINATE_TO_ORIGIN: first\n        });\n        const ifcModel = await this.viewer!.IFC.loadIfc(file, fitToFrame);\n\n        // this just hides model from scene\n        if (visible === false) this.viewer!.context.scene.removeModel(ifcModel);\n        this.models[model].ifcModel = ifcModel;\n      };\n\n      let first = true;\n      let count = modelIter.length;\n      for (let i in modelIter) {\n        // do not load another model if this component is destroyed\n        if (this.isDestroyed) {\n          abort();\n          this.modelLoadAbort();\n          return;\n        }\n\n        let loading = loadModel(modelIter[i], first);\n        first = false;\n        // TODO: clean this translation up\n        let translated = this.translate.instant(\"common.ifc.loading\");\n        this.loader.addLoader(loading, `${translated} [${+i + 1}/${count}]`);\n        await loading;\n      }\n\n      // initialize observer to automatically resize ifc viewer\n      this.resizeObserver = new ResizeObserver(entries => {\n        container.style.width = entries[0].contentRect.width + \"px\";\n        container.style.height = entries[0].contentRect.height + \"px\";\n        this.viewer!.context.updateAspect();\n      });\n      this.resizeObserver.observe(this.resizeContainer.nativeElement);\n\n      // everything is loaded, allow curtain to rise\n      allLoaded();\n      this.modelLoadDone(this.models);\n\n      // if picking is disabled, return here, otherwise add events for picking\n      if (!this.usePicking) return;\n\n      this.viewerContainer.nativeElement.onmousemove = () => {\n        this.viewer!.IFC.selector.prePickIfcItem();\n      };\n\n      this.viewerContainer.nativeElement.onclick = async () => {\n        const picked = await this.viewer!.IFC.selector.pickIfcItem();\n        if (!picked) return;\n        const {modelID, id} = picked;\n        const props = await this.viewer!.IFC.getProperties(modelID, id, true, this.useRecursive);\n        this.selectedModel.emit(props);\n      };\n    });\n\n    this.loader.addLoader(loadAll);\n    return loadAll;\n  }\n\n  /**\n   * Hides a model from the viewer.\n   *\n   * This function ensures that no errors occur, but it does not keep a queue\n   * of all the models to be hidden.\n   * If called too early, the models cannot be hidden.\n   * To avoid race conditions, await the {@link loadedModels} promise.\n   * To hide a model from the start, set the `visible` property of the\n   * corresponding model entry in {@link inputModels} to `false`.\n   * Models with the `fixed` property set to `true` cannot be hidden using this\n   * function.\n   * It is recommended to use this function to hide models from the viewer\n   * instead of hiding them manually via the {@link viewer}.\n   *\n   * @param model The model to hide, using the keys from {@link inputModels}\n   */\n  hideModel(model: string) {\n    if (this.models[model].fixed) return;\n    if (this.viewer) this.viewer.context.scene.removeModel(this.models[model].ifcModel);\n  }\n\n  /**\n   * Shows a model in the viewer.\n   *\n   * This function ensures that no errors occur, but it does not keep a queue\n   * of all the models to be shown.\n   * If called too early, the models cannot be shown.\n   * To avoid race conditions, await the {@link loadedModels} promise.\n   *\n   * @param model The model to show, using the keys from {@link inputModels}\n   */\n  showModel(model: string) {\n    if (this.viewer) this.viewer.context.scene.addModel(this.models[model].ifcModel);\n  }\n\n  /**\n   * Disconnects the {@link resizeObserver} and clears the memory from the\n   * models of the {@link viewer}.\n   *\n   * This ensures that models will no longer be loaded when this\n   * component is destroyed.\n   */\n  async ngOnDestroy(): Promise {\n    this.isDestroyed = true;\n    if (this.resizeObserver) this.resizeObserver.disconnect();\n    if (this.viewer) await this.viewer.dispose();\n  }\n\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'IfcComponent', 'selector': 'ifc'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'IfcComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IfcDB.html":{"url":"interfaces/IfcDB.html","title":"interface - IfcDB","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IfcDB\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ifc/ifc.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The schema the ifc db uses.\n\n            \n\n            \n                Extends\n            \n            \n                    DBSchema\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            models\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        models\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        models:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Cached IFC models.\nThe key is the path where the model is found.\nThe value is the raw bytes of the model stored as a Blob.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {DBSchema, openDB} from \"idb\";\nimport {HttpClient, HttpContext} from \"@angular/common/http\";\nimport {USE_LOADER} from \"../http-context/use-loader\";\nimport {firstValueFrom} from \"rxjs\";\n\n/** Indexed DB name. */\nconst DB_NAME = \"ifc-db\";\n\n/** Indexed DB schema version. */\nconst SCHEMA_V = 1;\n\n/** The schema the ifc db uses. */\ninterface IfcDB extends DBSchema {\n  /**\n   * Cached IFC models.\n   *\n   * The key is the path where the model is found.\n   *\n   * The value is the raw bytes of the model stored as a Blob.\n   */\n  models: {\n    key: string,\n    value: Blob\n  }\n}\n\n/**\n * Service to lazily fetch IFC models.\n * The fetch will try to load from the local indexed db first.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class IfcService {\n\n  /** Indexed DB client. */\n  private readonly idb;\n\n  /**\n   * Constructor.\n   * @param http Client to request geo data\n   */\n  constructor(private http: HttpClient) {\n    this.idb = openDB(DB_NAME, SCHEMA_V, {\n      upgrade(db, oldV) {\n        if (oldV) db.deleteObjectStore(\"models\");\n        db.createObjectStore(\"models\");\n      }\n    });\n  }\n\n  /**\n   * Asynchronously fetch IFC models.\n   *\n   * Will only fetch data if not already stored in the indexedDB.\n   * @param path The path where to download model from, will also be the cache key\n   * @param force If true, this will ignore the cache and request everything\n   */\n  async fetchModel(path: string, force: boolean = false): Promise {\n    const idb = await this.idb;\n    let dbBlob = force ? undefined : await idb.get(\"models\", path);\n    if (dbBlob) return new File([dbBlob], path);\n    let res = await firstValueFrom(this.http.get(path, {\n      responseType: \"blob\",\n      context: new HttpContext().set(USE_LOADER, \"common.ifc.fetching\")\n    }));\n    await idb.put(\"models\", res, path);\n    return new File([res], path);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IfcService.html":{"url":"injectables/IfcService.html","title":"injectable - IfcService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IfcService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ifc/ifc.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to lazily fetch IFC models.\nThe fetch will try to load from the local indexed db first.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                idb\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                fetchModel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ifc/ifc.service.ts:38\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Client to request geo data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchModel\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchModel(path: string, force: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ifc/ifc.service.ts:60\n                \n            \n\n\n            \n                \n                    Asynchronously fetch IFC models.\nWill only fetch data if not already stored in the indexedDB.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The path where to download model from, will also be the cache key\n\n                                    \n                                \n                                \n                                    force\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        If true, this will ignore the cache and request everything\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        idb\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/lib/ifc/ifc.service.ts:38\n                        \n                    \n\n            \n                \n                    Indexed DB client.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {DBSchema, openDB} from \"idb\";\nimport {HttpClient, HttpContext} from \"@angular/common/http\";\nimport {USE_LOADER} from \"../http-context/use-loader\";\nimport {firstValueFrom} from \"rxjs\";\n\n/** Indexed DB name. */\nconst DB_NAME = \"ifc-db\";\n\n/** Indexed DB schema version. */\nconst SCHEMA_V = 1;\n\n/** The schema the ifc db uses. */\ninterface IfcDB extends DBSchema {\n  /**\n   * Cached IFC models.\n   *\n   * The key is the path where the model is found.\n   *\n   * The value is the raw bytes of the model stored as a Blob.\n   */\n  models: {\n    key: string,\n    value: Blob\n  }\n}\n\n/**\n * Service to lazily fetch IFC models.\n * The fetch will try to load from the local indexed db first.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class IfcService {\n\n  /** Indexed DB client. */\n  private readonly idb;\n\n  /**\n   * Constructor.\n   * @param http Client to request geo data\n   */\n  constructor(private http: HttpClient) {\n    this.idb = openDB(DB_NAME, SCHEMA_V, {\n      upgrade(db, oldV) {\n        if (oldV) db.deleteObjectStore(\"models\");\n        db.createObjectStore(\"models\");\n      }\n    });\n  }\n\n  /**\n   * Asynchronously fetch IFC models.\n   *\n   * Will only fetch data if not already stored in the indexedDB.\n   * @param path The path where to download model from, will also be the cache key\n   * @param force If true, this will ignore the cache and request everything\n   */\n  async fetchModel(path: string, force: boolean = false): Promise {\n    const idb = await this.idb;\n    let dbBlob = force ? undefined : await idb.get(\"models\", path);\n    if (dbBlob) return new File([dbBlob], path);\n    let res = await firstValueFrom(this.http.get(path, {\n      responseType: \"blob\",\n      context: new HttpContext().set(USE_LOADER, \"common.ifc.fetching\")\n    }));\n    await idb.put(\"models\", res, path);\n    return new File([res], path);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/IonIconComponent.html":{"url":"components/IonIconComponent.html","title":"component - IonIconComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  IonIconComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/ion-icon/ion-icon.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component is used to inject the icons from IonIcons.\nIonIcons uses WebComponents to display the icons.\nTo allow to use them here, this component adds the icons via js.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ion-icon\n            \n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(elRef: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ion-icon/ion-icon.component.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elRef\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Element reference to itself\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ion-icon/ion-icon.component.ts:31\n                            \n                        \n                \n                    \n                        The name of the icon.\nIs not used by angular but needed to render the correct icon and necessary\nso that angular stops complaining.\nThis setter also directly modifies the native element to have the \"name\"\ndirectly as an attribute which is needed to make ion icons work.\nYou can find the names at the official website\nhttps://ionic.io/ionicons.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n\n                \n                    \n                        setname(name: string | undefined)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/ion-icon/ion-icon.component.ts:31\n                                \n                            \n                    \n                        \n                                The name of the icon.\nIs not used by angular but needed to render the correct icon and necessary\nso that angular stops complaining.\nThis setter also directly modifies the native element to have the \"name\"\ndirectly as an attribute which is needed to make ion icons work.\nYou can find the names at the official website\nhttps://ionic.io/ionicons.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            name\n                                                    \n                                                            \n                                                                        string | undefined\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {Component, Input, ElementRef} from \"@angular/core\";\n\n/**\n * This component is used to inject the icons from IonIcons.\n * IonIcons uses WebComponents to display the icons.\n * To allow to use them here, this component adds the icons via js.\n */\n@Component({\n  selector: \"ion-icon\",\n  template: \"\"\n})\nexport class IonIconComponent {\n\n  /**\n   * Constructor.\n   * @param elRef Element reference to itself\n   */\n  constructor(private elRef: ElementRef) {}\n\n  /**\n   * The name of the icon.\n   * Is not used by angular but needed to render the correct icon and necessary\n   * so that angular stops complaining.\n   *\n   * This setter also directly modifies the native element to have the \"name\"\n   * directly as an attribute which is needed to make ion icons work.\n   *\n   * You can find the names at the official website\n   * {@link https://ionic.io/ionicons}.\n   */\n  @Input() set name(name: string | undefined) {\n    this.elRef.nativeElement?.setAttribute(\"name\", name);\n  };\n\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'IfcComponent', 'selector': 'ifc'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'IonIconComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LayerData.html":{"url":"interfaces/LayerData.html","title":"interface - LayerData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LayerData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/layer-data.ts\n        \n\n\n            \n                Description\n            \n            \n                Type to represent layer data received from the geo data server.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            box\n                                        \n                                \n                                \n                                        \n                                            shapes\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        box\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        box:     [, , , ]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [, , , ]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Corner coordinates of a box containing all the shapes this displays.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shapes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shapes:         ShapeData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ShapeData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of shapes.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as L from \"leaflet\";\nimport {GeoJsonObject} from \"geojson\";\n\n/** Type to represent a single shape with all of its metadata. */\nexport interface ShapeData {\n  /** Name of the shape. */\n  name: string,\n  /** Key of the shape. */\n  key: string,\n  /** Nomenclature of Territorial Units code of the shape. */\n  nutsKey: string,\n  /** GeoJson representing the shape. */\n  geoJson: GeoJsonObject\n}\n\n/** Type to represent layer data received from the geo data server. */\nexport interface LayerData {\n  /** Corner coordinates of a box containing all the shapes this displays. */\n  box: [[number, number], [number, number], [number, number], [number, number]],\n  /** List of shapes. */\n  shapes: ShapeData[]\n}\n\nexport default LayerData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoaderInjector.html":{"url":"injectables/LoaderInjector.html","title":"injectable - LoaderInjector","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoaderInjector\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/loader/loader.injector.ts\n        \n\n\n            \n                Description\n            \n            \n                Injector for the LoaderService from the core module.\nThe service in the core injects this injector and listens to emitted loaders.\nThis allows centralized logic in the core while also allowing other\ncomponents to inject custom loaders.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loaders\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addLoader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addLoader\n                        \n                    \n                \n            \n            \n                \naddLoader(toResolve: Promise, displayText?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/loader/loader.injector.ts:25\n                \n            \n\n\n            \n                \n                    Add a custom loader to the loader service.\nThis will insert the promise resolution into the frame's loader curtain.\n                   translation key\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    toResolve\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A promise that when resolved clears the loader\n\n                                    \n                                \n                                \n                                    displayText\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Text to display under the loader, may contain a\ntranslation key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        loaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EventEmitter<>\n\n                    \n                \n                \n                    \n                        Default value : new EventEmitter()\n                    \n                \n                    \n                        \n                                Defined in src/lib/loader/loader.injector.ts:16\n                        \n                    \n\n            \n                \n                    Event emitter for the loaders, do not touch this.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {EventEmitter, Injectable} from '@angular/core';\n\n/**\n * Injector for the `LoaderService` from the core module.\n *\n * The service in the core injects this injector and listens to emitted loaders.\n * This allows centralized logic in the core while also allowing other\n * components to inject custom loaders.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoaderInjector {\n\n  /** Event emitter for the loaders, do not touch this. */\n  loaders: EventEmitter, string?]> = new EventEmitter();\n\n  /**\n   * Add a custom loader to the loader service.\n   * This will insert the promise resolution into the frame's loader curtain.\n   * @param toResolve A promise that when resolved clears the loader\n   * @param displayText Text to display under the loader, may contain a\n   *                    translation key\n   */\n  addLoader(toResolve: Promise, displayText?: string) {\n    this.loaders.emit([toResolve, displayText]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MapComponent.html":{"url":"components/MapComponent.html","title":"component - MapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/map/map.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component for displaying maps.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                map\n            \n\n            \n                styleUrls\n                ./map.component.css\n            \n\n\n            \n                template\n                \n  \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                center\n                            \n                            \n                                height\n                            \n                            \n                                    Private\n                                layerConfig\n                            \n                            \n                                    Private\n                                layerData\n                            \n                            \n                                    Private\n                                layerNames\n                            \n                            \n                                    Optional\n                                map\n                            \n                            \n                                    Private\n                                mapElement\n                            \n                            \n                                    Private\n                                markers\n                            \n                            \n                                    Private\n                                    Optional\n                                selectedGeoJsonLayer\n                            \n                            \n                                    Private\n                                    Optional\n                                selectedLayer\n                            \n                            \n                                    Private\n                                selectedShapes\n                            \n                            \n                                tileUrl\n                            \n                            \n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                emitSelection\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                center\n                            \n                            \n                                height\n                            \n                            \n                                layers\n                            \n                            \n                                layerSelectable\n                            \n                            \n                                markers\n                            \n                            \n                                scrollWheelZoom\n                            \n                            \n                                selectedColor\n                            \n                            \n                                tileUrl\n                            \n                            \n                                unselectedColor\n                            \n                            \n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                keyNames\n                            \n                            \n                                selected\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    inputLayers\n                                \n                                \n                                    inputMarkers\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: MapService, translate: TranslateService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/map/map.component.ts:182\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        MapService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to interact with the server for geo data\n\n                                                        \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Translation service to update resolution names\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        center\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:61\n                            \n                        \n                \n                    \n                        Input for the center coordinates of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:51\n                            \n                        \n                \n                    \n                        Input for the height of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        layers\n                    \n                \n                \n                    \n                        Type :         LayerConfig\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:125\n                            \n                        \n                \n                    \n                        Input for the layers that should be displayed.\nThe key of the record is layer key and is also emitted on the selection.\nThe value of the record is an array and the values of that should be the\nfollowing:\n\n  \n    The name of the layer, this will be only used to display a name of\n    the layer (may also be a translation key).\n  \n  \n    This should be the resolution to display the layer at, this may also\nbe\n    null to display the keys directly without any shape intersection\n    resolving.\n  \n  \n    These should be the keys used to display the shapes from.\n    If the given keys are empty or null, this will display everything from\n    the give resolution.\n  \n\n\nAttention: The service needs at least one of the resolution or the\nkeys\nto properly respond.\n```html\n// TODO: update link when geo data docs update\nSee https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n```\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        layerSelectable\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:147\n                            \n                        \n                \n                    \n                        Should the layers be selectable.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        markers\n                    \n                \n                \n                    \n                        Type :         Marker[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:150\n                            \n                        \n                \n                    \n                        Markers that should be displayed on the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        scrollWheelZoom\n                    \n                \n                \n                    \n                        Type :     boolean | \"center\"\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:74\n                            \n                        \n                \n                    \n                        Input for the option if the map should scroll zoom on mouse scroll.\nIf \"center\" is passed, the map will always zoom onto the center.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#d35a0c\"\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:79\n                            \n                        \n                \n                    \n                        Input for a hex code selected shapes.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        tileUrl\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:56\n                            \n                        \n                \n                    \n                        Input for the tile url of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        unselectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#1f5aec\"\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:77\n                            \n                        \n                \n                    \n                        Input for a hex code for unselected shapes.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        zoom\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:66\n                            \n                        \n                \n                    \n                        Input for the map zoom level.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        keyNames\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:182\n                            \n                        \n                \n                    \n                        Outputs the currently rendered keys, mapped to their names.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        selected\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:175\n                            \n                        \n                \n                    \n                        Outputs the currently selected shapes.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        emitSelection\n                        \n                    \n                \n            \n            \n                \n                    \n                    emitSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:386\n                \n            \n\n\n            \n                \n                    Internally used function to emit the currently selected shapes via the\nselected output.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:235\n                \n            \n\n\n            \n                \n                    Renders the map with the given input values.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:197\n                \n            \n\n\n            \n                \n                    While init this sets the input values to the inner, private values.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        center\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"53.1434501, 8.2145521\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:63\n                        \n                    \n\n            \n                \n                    Center of the map, defaults to longitude and latitude of Oldenburg.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"500px\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:53\n                        \n                    \n\n            \n                \n                    Height of map, defaults to 500px.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        layerConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject({})\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:133\n                        \n                    \n\n            \n                \n                    Subject of the LayerConfig, to be used as\nObservable.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        layerData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject>\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject({})\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:139\n                        \n                    \n\n            \n                \n                    Subject of the pairs of Layerkey and LayerData,\nto be used as Observable.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        layerNames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:144\n                        \n                    \n\n            \n                \n                    Subject of the layer names mapped by the LayerKey.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        map\n                        \n                    \n                \n            \n                \n                    \n                        Type :     L.Map\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:157\n                        \n                    \n\n            \n                \n                    The leaflet map that is displayed here.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mapElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('map')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:48\n                        \n                    \n\n            \n                \n                    The ref to the map html element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        markers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:154\n                        \n                    \n\n            \n                \n                    Markers Subject to be used as Observable.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        selectedGeoJsonLayer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     L.Layer\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:172\n                        \n                    \n\n            \n                \n                    The currently selected geo json layer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        selectedLayer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LayerKey\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:170\n                        \n                    \n\n            \n                \n                    The currently selected layer in the map control.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedShapes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record>\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:164\n                        \n                    \n\n            \n                \n                    Internally holds all elements that are currently selected.\nThe set holds all keys of shapes currently selected.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tileUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:58\n                        \n                    \n\n            \n                \n                    Tile url of the map, defaults to the osm.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 7\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:68\n                        \n                    \n\n            \n                \n                    Zoom level of the map, defaults to 7.\n\n                \n            \n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        inputLayers\n                    \n                \n\n\n                \n                    \n                        setinputLayers(layerConfig: LayerConfig)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/map/map.component.ts:125\n                                \n                            \n                    \n                        \n                                Input for the layers that should be displayed.\nThe key of the record is layer key and is also emitted on the selection.\nThe value of the record is an array and the values of that should be the\nfollowing:\n\n  \n    The name of the layer, this will be only used to display a name of\n    the layer (may also be a translation key).\n  \n  \n    This should be the resolution to display the layer at, this may also\nbe\n    null to display the keys directly without any shape intersection\n    resolving.\n  \n  \n    These should be the keys used to display the shapes from.\n    If the given keys are empty or null, this will display everything from\n    the give resolution.\n  \n\n\nAttention: The service needs at least one of the resolution or the\nkeys\nto properly respond.\n```html\n// TODO: update link when geo data docs update\nSee https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n```\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            layerConfig\n                                                    \n                                                            \n                                                                            LayerConfig\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                        Example :\n                                            \n                                                &lt;map\n  height=&quot;70vh&quot;\n  [layers]=&quot;{\n    full_res: [&#39;All of municipal resolution&#39;, Resolution.MUNICIPAL, null],\n    only_keys: [&#39;Only show exactly these&#39;, null, [&#39;01&#39;, &#39;034030000000&#39;]],\n    mixed: [&#39;Show district resolution&#39;, Resolution.DISTRICT, [&#39;01&#39;,\n  &#39;034030000000&#39;]]\n  }&quot;\n&gt;&lt;/map&gt;\n\n// TODO: update link when geo data docs update\n                                            \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        inputMarkers\n                    \n                \n\n\n                \n                    \n                        setinputMarkers(markers: Marker[])\n                    \n                \n                            \n                                \n                                    Defined in src/lib/map/map.component.ts:150\n                                \n                            \n                    \n                        \n                                Markers that should be displayed on the map.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            markers\n                                                    \n                                                            \n                                                                            Marker[]\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n  ViewChild,\n  Component,\n  EventEmitter,\n  OnInit,\n  AfterViewInit,\n  Input,\n  Output,\n  ElementRef\n} from \"@angular/core\";\nimport {BehaviorSubject, firstValueFrom, Subject} from \"rxjs\";\n\nimport * as L from \"leaflet\";\n\nimport {MapService} from \"./map.service\";\nimport LayerData from \"./layer-data\";\nimport {Resolution} from \"./resolution\";\nimport {Marker} from \"./marker\";\n\nimport * as LX from \"./invert-selection\";\n\nimport \"leaflet.markercluster\";\nimport {TranslateService} from \"@ngx-translate/core\";\n\n/** Type alias to enforce the meaning of the layer keys. */\ntype LayerKey = string;\n\n/** A layer config for the input of {@link MapComponent.inputLayers}. */\ntype LayerConfig = Record;\n\n/**\n * Component for displaying maps.\n */\n@Component({\n  selector: \"map\",\n  template: `\n    \n      \n    \n  `,\n  styleUrls: [\n    \"./map.component.css\"\n  ]\n})\nexport class MapComponent implements OnInit, AfterViewInit {\n\n  /** The ref to the map html element. */\n  @ViewChild(\"map\") private mapElement!: ElementRef;\n\n  /** Input for the height of the map. */\n  @Input(\"height\") inputHeight?: string;\n  /** Height of map, defaults to 500px. */\n  height = \"500px\";\n\n  /** Input for the tile url of the map. */\n  @Input(\"tileUrl\") inputTileUrl?: string;\n  /** Tile url of the map, defaults to the osm. */\n  tileUrl = \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\";\n\n  /** Input for the center coordinates of the map. */\n  @Input(\"center\") inputCenter?: string;\n  /** Center of the map, defaults to longitude and latitude of Oldenburg. */\n  center = \"53.1434501, 8.2145521\";\n\n  /** Input for the map zoom level. */\n  @Input(\"zoom\") inputZoom?: string;\n  /** Zoom level of the map, defaults to 7. */\n  zoom = 7;\n\n  /**\n   * Input for the option if the map should scroll zoom on mouse scroll.\n   * If \"center\" is passed, the map will always zoom onto the center.\n   */\n  @Input(\"scrollWheelZoom\") inputScrollWheelZoom: boolean | \"center\" = true;\n\n  /** Input for a hex code for unselected shapes. */\n  @Input(\"unselectedColor\") unselectedColor = \"#1f5aec\";\n  /** Input for a hex code selected shapes. */\n  @Input(\"selectedColor\") selectedColor = \"#d35a0c\";\n\n  /**\n   * Input for the layers that should be displayed.\n   *\n   * The key of the record is layer key and is also emitted on the selection.\n   * The value of the record is an array and the values of that should be the\n   * following:\n   * \n   *   \n   *     The name of the layer, this will be only used to display a name of\n   *     the layer (may also be a translation key).\n   *   \n   *   \n   *     This should be the resolution to display the layer at, this may also\n   * be\n   *     null to display the keys directly without any shape intersection\n   *     resolving.\n   *   \n   *   \n   *     These should be the keys used to display the shapes from.\n   *     If the given keys are empty or null, this will display everything from\n   *     the give resolution.\n   *   \n   * \n   *\n   * **Attention**: The service needs at least one of the resolution or the\n   * keys\n   * to properly respond.\n   *\n   * @example\n   * ```html\n   * \n   * ```\n   * // TODO: update link when geo data docs update\n   * @see https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n   */\n  @Input(\"layers\")\n  set inputLayers(layerConfig: LayerConfig) {\n    this.layerConfig.next(layerConfig);\n  };\n  /**\n   * {@link Subject} of the {@link LayerConfig}, to be used as\n   * {@link Observable}.\n   * @private\n   */\n  private layerConfig: BehaviorSubject = new BehaviorSubject({});\n  /**\n   * {@link Subject} of the pairs of {@link Layerkey} and {@link LayerData},\n   * to be used as {@link Observable}.\n   * @private\n   */\n  private layerData: BehaviorSubject> = new BehaviorSubject({});\n  /**\n   * {@link Subject} of the layer names mapped by the {@link LayerKey}.\n   * @private\n   */\n  private layerNames: Record = {};\n\n  /** Should the layers be selectable. */\n  @Input(\"layerSelectable\") inputLayerSelectable: boolean = true;\n\n  /** Markers that should be displayed on the map. */\n  @Input(\"markers\") set inputMarkers(markers: Marker[]) {\n    this.markers.next(markers);\n  };\n  /** {@link Marker}s {@link Subject} to be used as {@link Observable}. */\n  private markers = new BehaviorSubject([]);\n\n  /** The leaflet map that is displayed here. */\n  map?: L.Map;\n\n  /**\n   * Internally holds all elements that are currently selected.\n   *\n   * The set holds all keys of shapes currently selected.\n   */\n  private selectedShapes: Record> = {};\n\n  /**\n   * The currently selected layer in the map control.\n   * @private\n   */\n  private selectedLayer?: LayerKey;\n  /** The currently selected geo json layer. */\n  private selectedGeoJsonLayer?: L.Layer;\n\n  /** Outputs the currently selected shapes. */\n  @Output() selected = new EventEmitter();\n\n  /** Outputs the currently rendered keys, mapped to their names. */\n  @Output() keyNames = new EventEmitter>();\n\n  /**\n   * Constructor.\n   * @param service Service to interact with the server for geo data\n   * @param translate Translation service to update resolution names\n   */\n  constructor(\n    private service: MapService,\n    private translate: TranslateService\n  ) {}\n\n  /**\n   * While init this sets the input values to the inner, private values.\n   */\n  ngOnInit(): void {\n    if (this.inputHeight) this.height = this.inputHeight;\n    if (this.inputTileUrl) this.tileUrl = this.inputTileUrl;\n    if (this.inputCenter) this.center = this.inputCenter;\n    if (this.inputZoom) this.zoom = parseInt(this.inputZoom);\n\n    this.layerConfig.subscribe(async config => {\n      let layerData = {};\n      let requests: Record> = {};\n      for (\n        let [layerKey, [displayName, resolution, keys]]\n        of Object.entries(config)\n      ) {\n        this.layerNames[layerKey] = displayName;\n        requests[layerKey] = this.service.fetchLayerData(\n          resolution,\n          keys ? [keys].flat().map(k => k.split(\" \").join(\"\")) : null\n        );\n      }\n      let fetched: Record = {};\n      for (let [layerKey, data] of Object.entries(requests)) {\n        fetched[layerKey] = await data;\n      }\n      this.layerData.next(fetched);\n\n      let keyNames = new Map();\n      for (let entry of Object.values(fetched)) {\n        for (let {name, key} of entry.shapes) {\n          keyNames.set(key, name);\n        }\n      }\n      this.keyNames.next(Object.fromEntries(keyNames));\n    });\n  }\n\n  /**\n   * Renders the map with the given input values.\n   */\n  ngAfterViewInit(): void {\n    const nativeMapElement = this.mapElement.nativeElement;\n\n    const map = L.map(nativeMapElement, {\n      scrollWheelZoom: this.inputScrollWheelZoom,\n      center: this.center\n        .split(\", \")\n        .map(str => parseFloat(str)) as [number, number],\n      zoom: this.zoom\n    });\n    map.getRenderer(map as any).options.padding = 100;\n\n    L.tileLayer(this.tileUrl).addTo(map);\n\n    this.map = map;\n    let layersControl: L.Control.Layers;\n    // TODO: make a clear type from this\n    let invertSelectionControl: any;\n\n    this.layerData.subscribe(async layerData => {\n      let displayLayer = true;\n\n      // reset selected data\n      this.selectedShapes = {};\n\n      if (layersControl) map.removeControl(layersControl);\n      layersControl = L.control.layers();\n      // layer index to allow sorting by it\n      // this allows updating the names without having to worry about layer\n      // shuffling\n      let layerIndex = 0;\n      layersControl.options.sortLayers = true;\n      layersControl.options.sortFunction = (layerA, layerB) => {\n        // @ts-ignore these orders are injected here to allow fixed ordering\n        return layerA.options.order - layerB.options.order;\n      }\n      let layers: L.Layer[] = [];\n\n      if (this.selectedGeoJsonLayer) map.removeLayer(this.selectedGeoJsonLayer);\n\n      // update map with new layer data\n      for (let [key, data] of Object.entries(layerData)) {\n        let selectedShapes = this.selectedShapes[key] = new Set();\n        // use for every layer a new geoJSON layer\n        let geoJsonLayer = L.geoJSON(undefined, {\n          // @ts-ignore insert order here to allow fixed ordering when updating\n          // translation\n          order: layerIndex++,\n          attribution: `\n            \n              📐 © GeoBasis-DE / BKG 2022\n            \n            |\n            \n              🔖 dl-de/by-2-0\n            \n          `,\n          style: {color: this.unselectedColor},\n          onEachFeature: (feature, layer) => {\n            // used properties are injected later into the feature\n            layer.bindTooltip(feature.properties.name, {direction: \"center\"});\n            if (this.inputLayerSelectable) {\n              layer.on(\"click\", () => {\n                let [key, path] = [feature.properties.key, layer as L.Path];\n                if (selectedShapes.has(key)) {\n                  path.setStyle({color: this.unselectedColor});\n                  path.bringToBack();\n                  selectedShapes.delete(key);\n                }\n                else {\n                  path.setStyle({color: this.selectedColor});\n                  path.bringToFront();\n                  selectedShapes.add(key);\n                }\n                this.emitSelection();\n              });\n            }\n            layers.push(layer);\n          }\n        });\n        for (let shape of data.shapes) {\n          geoJsonLayer.addData(Object.assign(shape.geoJson, {properties: {\n            name: shape.name,\n            key: shape.key\n          }}));\n          if (displayLayer) {\n            geoJsonLayer.addTo(map);\n            displayLayer = false;\n            this.selectedLayer = key;\n            this.selectedGeoJsonLayer = geoJsonLayer;\n            map.fitBounds([\n              data.box[0],\n              data.box[2]\n            ]);\n          }\n        }\n        this.translate.onLangChange.subscribe(() => {\n          layersControl.removeLayer(geoJsonLayer);\n          layersControl.addBaseLayer(\n            geoJsonLayer,\n            this.translate.instant(this.layerNames[key])\n          );\n        });\n        let layerName: string;\n        if (this.layerNames[key].length) {\n          layerName = await firstValueFrom(\n            this.translate.get(this.layerNames[key])\n          );\n        } else layerName = \"layer\";\n        layersControl.addBaseLayer(geoJsonLayer, layerName);\n        map.on(\"baselayerchange\", ({layer}) => {\n          if (layer == geoJsonLayer) {\n            this.selectedGeoJsonLayer = layer;\n            this.selectedLayer = key;\n            this.emitSelection();\n          }\n        })\n      }\n      if (Object.keys(layerData).length > 1) layersControl.addTo(map);\n\n      if (this.inputLayerSelectable) {\n        if (invertSelectionControl) map.removeControl(invertSelectionControl);\n        invertSelectionControl = LX.control.invertSelection(() => {\n          for (let layer of layers) {\n            layer.fire(\"click\");\n          }\n        });\n        invertSelectionControl.addTo(map);\n      }\n    });\n\n    let markerLayer = L.markerClusterGroup();\n    this.markers.subscribe(markers => {\n      markerLayer.removeFrom(map);\n      markerLayer = L.markerClusterGroup();\n      for (let marker of markers) {\n        let lMarker = L.marker(marker.coordinates);\n        if (marker.icon) lMarker.setIcon(marker.icon);\n        if (marker.tooltip) lMarker.bindTooltip(marker.tooltip);\n        if (marker.onClick) lMarker.on(\"click\", marker.onClick)\n        lMarker.addTo(markerLayer);\n      }\n      markerLayer.addTo(map);\n    });\n  }\n\n  /**\n   * Internally used function to emit the currently selected shapes via the\n   * {@link selected} output.\n   * @private\n   */\n  private emitSelection(): void {\n    let layerKey = this.selectedLayer!;\n    let layerName = this.layerNames[layerKey]!;\n    let keys = Array.from(this.selectedShapes[layerKey]);\n    this.selected.emit({\n      layer: layerKey,\n      name: layerName,\n      keys\n    });\n  }\n}\n\n    \n\n\n    \n                \n                    ./map.component.css\n                \n                .map-container {}\n\n.map {\n  z-index: 10;\n  height: 100%;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'IfcComponent', 'selector': 'ifc'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'MapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MapDB.html":{"url":"interfaces/MapDB.html","title":"interface - MapDB","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MapDB\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/map.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The schema the map db uses.\n\n            \n\n            \n                Extends\n            \n            \n                    DBSchema\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            queries\n                                        \n                                \n                                \n                                        \n                                            shapes\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        queries\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queries:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    All cached queries, used to identify if a query is already in the db.\nThe key[0] represents the resolution of the query, a -1 represents no\nresolution.\nThe rest are the given keys.\nThe value is an array of all the keys the query returned.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shapes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shapes:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    All shapes in the indexed db.\nThe key is the key of the shape.\nThe value is some ShapeData.\nSince LayerData is simply an array of ShapeData, this may\nbe used to reconstruct some layer data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  HttpClient,\n  HttpContext,\n  HttpHeaders,\n  HttpParams\n} from \"@angular/common/http\";\nimport {Injectable} from \"@angular/core\";\nimport {openDB, DBSchema} from \"idb\";\nimport {Layer} from \"leaflet\";\nimport {firstValueFrom} from \"rxjs\";\n\nimport {Resolution} from \"./resolution\";\nimport {LayerData, ShapeData} from \"./layer-data\";\nimport {USE_API_URL} from \"../http-context/use-api-url\";\nimport {USE_LOADER} from \"../http-context/use-loader\";\n\n/** API url for the map to request data from. */\nconst API_URL = \"geodata\";\n/** Indexed DB name. */\nconst DB_NAME = \"map-db\";\n/** Indexed DB schema version. */\nconst SCHEMA_V = 2;\n\n/** The schema the map db uses. */\ninterface MapDB extends DBSchema {\n  /**\n   * All cached queries, used to identify if a query is already in the db.\n   *\n   * The key[0] represents the resolution of the query, a -1 represents no\n   * resolution.\n   * The rest are the given keys.\n   *\n   * The value is an array of all the keys the query returned.\n   */\n  queries: {\n    key: [number, ...string[]],\n    value: {\n      box: LayerData[\"box\"],\n      shapes: string[]\n    }\n  },\n\n  /**\n   * All shapes in the indexed db.\n   *\n   * The key is the key of the shape.\n   *\n   * The value is some {@link ShapeData}.\n   * Since {@link LayerData} is simply an array of {@link ShapeData}, this may\n   * be used to reconstruct some layer data.\n   */\n  shapes: {\n    key: string,\n    value: ShapeData\n  }\n}\n\n/**\n * Service to interact with the geo data api to fetch map data.\n *\n * Fetched map data is cached in the indexedDB and therefore only retrieved\n * lazily.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n\n  /** Indexed DB client. */\n  private readonly idb;\n\n  /**\n   * Constructor.\n   * @param http Client to request geo data\n   */\n  constructor(private http: HttpClient) {\n    this.idb = openDB(DB_NAME, SCHEMA_V, {\n      upgrade(db, oldV) {\n        if (oldV) {\n          db.deleteObjectStore(\"queries\");\n          db.deleteObjectStore(\"shapes\");\n        }\n        db.createObjectStore(\"queries\");\n        db.createObjectStore(\"shapes\");\n      }\n    });\n  }\n\n  /**\n   * Asynchronously fetch the map from the geo data rest api.\n   *\n   * Will only fetch data if not already stored in the indexedDB.\n   * @param resolution The resolution the of the shapes returned by the service\n   * @param keys The keys given to look for shapes\n   * @param force If true, this will ignore the cache and request everything\n   */\n  async fetchLayerData(\n    resolution: Resolution | null | undefined,\n    keys?: string[] | null,\n    force: boolean = false\n  ): Promise {\n    // prepare db and keys\n    let idb = await this.idb;\n    let trimmedKeys = keys ?? [];\n    let resolutionNum = resolution ? Resolution.toKeyLength(resolution) : -1;\n    let queryKey = [resolutionNum, ...trimmedKeys] as [number, ...string[]];\n\n    // check for cached keys or ignore if is force is true\n    let cachedQuery = force ? undefined : await idb.get(\"queries\", queryKey);\n    if (cachedQuery) {\n      let tx = idb.transaction(\"shapes\", \"readonly\");\n      let store = tx.objectStore(\"shapes\");\n      let shapes: ShapeData[] = [];\n      let operations = [];\n      for (let key of cachedQuery.shapes) {\n        operations.push(store.get(key).then(shape => {\n          if (shape) shapes.push(shape);\n        }));\n      }\n      operations.push(tx.done);\n      await Promise.all(operations);\n      return {\n        box: cachedQuery.box,\n        shapes\n      };\n    }\n\n    // if cachedKeys was empty, request data from the server\n    let params = new HttpParams();\n    if (resolution) params = params.set(\"resolution\", resolution);\n    if (keys && keys.length) params = params.appendAll({key: keys.map(k => {\n      if (resolution) return k.substring(0, resolutionNum);\n      return k;\n    })});\n\n    let rawLayerData = await firstValueFrom(this.http.get(`${API_URL}/`, {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      }),\n      params,\n      responseType: \"json\",\n      context: new HttpContext()\n        .set(USE_API_URL, true)\n        .set(USE_LOADER, true)\n    }));\n\n    rawLayerData.shapes = rawLayerData.shapes.map(rawShape => ({\n      nutsKey: rawShape.nuts_key,\n      geoJson: rawShape.geojson,\n      ...rawShape\n    }));\n\n    let layerData = rawLayerData as unknown as LayerData;\n\n    // store the requested data back into the db\n    let tx = idb.transaction([\"queries\", \"shapes\"], \"readwrite\");\n    let operations = [];\n    let shapeStore = tx.objectStore(\"shapes\");\n    let shapeKeys = [];\n    for (let shape of layerData.shapes) {\n      operations.push(shapeStore.put(shape, shape.key));\n      shapeKeys.push(shape.key);\n    }\n    let queryStore = tx.objectStore(\"queries\");\n    operations.push(queryStore.put({\n      box: layerData.box,\n      shapes: shapeKeys\n    }, queryKey));\n    await Promise.all(operations);\n\n    return layerData;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MapService.html":{"url":"injectables/MapService.html","title":"injectable - MapService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MapService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/map.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to interact with the geo data api to fetch map data.\nFetched map data is cached in the indexedDB and therefore only retrieved\nlazily.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                idb\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                fetchLayerData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/lib/map/map.service.ts:70\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Client to request geo data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchLayerData\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchLayerData(resolution: Resolution | null | undefined, keys?: string[] | null, force: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.service.ts:97\n                \n            \n\n\n            \n                \n                    Asynchronously fetch the map from the geo data rest api.\nWill only fetch data if not already stored in the indexedDB.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    resolution\n                                    \n                                                Resolution | null | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The resolution the of the shapes returned by the service\n\n                                    \n                                \n                                \n                                    keys\n                                    \n                                            string[] | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The keys given to look for shapes\n\n                                    \n                                \n                                \n                                    force\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        If true, this will ignore the cache and request everything\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        idb\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/lib/map/map.service.ts:70\n                        \n                    \n\n            \n                \n                    Indexed DB client.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpClient,\n  HttpContext,\n  HttpHeaders,\n  HttpParams\n} from \"@angular/common/http\";\nimport {Injectable} from \"@angular/core\";\nimport {openDB, DBSchema} from \"idb\";\nimport {Layer} from \"leaflet\";\nimport {firstValueFrom} from \"rxjs\";\n\nimport {Resolution} from \"./resolution\";\nimport {LayerData, ShapeData} from \"./layer-data\";\nimport {USE_API_URL} from \"../http-context/use-api-url\";\nimport {USE_LOADER} from \"../http-context/use-loader\";\n\n/** API url for the map to request data from. */\nconst API_URL = \"geodata\";\n/** Indexed DB name. */\nconst DB_NAME = \"map-db\";\n/** Indexed DB schema version. */\nconst SCHEMA_V = 2;\n\n/** The schema the map db uses. */\ninterface MapDB extends DBSchema {\n  /**\n   * All cached queries, used to identify if a query is already in the db.\n   *\n   * The key[0] represents the resolution of the query, a -1 represents no\n   * resolution.\n   * The rest are the given keys.\n   *\n   * The value is an array of all the keys the query returned.\n   */\n  queries: {\n    key: [number, ...string[]],\n    value: {\n      box: LayerData[\"box\"],\n      shapes: string[]\n    }\n  },\n\n  /**\n   * All shapes in the indexed db.\n   *\n   * The key is the key of the shape.\n   *\n   * The value is some {@link ShapeData}.\n   * Since {@link LayerData} is simply an array of {@link ShapeData}, this may\n   * be used to reconstruct some layer data.\n   */\n  shapes: {\n    key: string,\n    value: ShapeData\n  }\n}\n\n/**\n * Service to interact with the geo data api to fetch map data.\n *\n * Fetched map data is cached in the indexedDB and therefore only retrieved\n * lazily.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n\n  /** Indexed DB client. */\n  private readonly idb;\n\n  /**\n   * Constructor.\n   * @param http Client to request geo data\n   */\n  constructor(private http: HttpClient) {\n    this.idb = openDB(DB_NAME, SCHEMA_V, {\n      upgrade(db, oldV) {\n        if (oldV) {\n          db.deleteObjectStore(\"queries\");\n          db.deleteObjectStore(\"shapes\");\n        }\n        db.createObjectStore(\"queries\");\n        db.createObjectStore(\"shapes\");\n      }\n    });\n  }\n\n  /**\n   * Asynchronously fetch the map from the geo data rest api.\n   *\n   * Will only fetch data if not already stored in the indexedDB.\n   * @param resolution The resolution the of the shapes returned by the service\n   * @param keys The keys given to look for shapes\n   * @param force If true, this will ignore the cache and request everything\n   */\n  async fetchLayerData(\n    resolution: Resolution | null | undefined,\n    keys?: string[] | null,\n    force: boolean = false\n  ): Promise {\n    // prepare db and keys\n    let idb = await this.idb;\n    let trimmedKeys = keys ?? [];\n    let resolutionNum = resolution ? Resolution.toKeyLength(resolution) : -1;\n    let queryKey = [resolutionNum, ...trimmedKeys] as [number, ...string[]];\n\n    // check for cached keys or ignore if is force is true\n    let cachedQuery = force ? undefined : await idb.get(\"queries\", queryKey);\n    if (cachedQuery) {\n      let tx = idb.transaction(\"shapes\", \"readonly\");\n      let store = tx.objectStore(\"shapes\");\n      let shapes: ShapeData[] = [];\n      let operations = [];\n      for (let key of cachedQuery.shapes) {\n        operations.push(store.get(key).then(shape => {\n          if (shape) shapes.push(shape);\n        }));\n      }\n      operations.push(tx.done);\n      await Promise.all(operations);\n      return {\n        box: cachedQuery.box,\n        shapes\n      };\n    }\n\n    // if cachedKeys was empty, request data from the server\n    let params = new HttpParams();\n    if (resolution) params = params.set(\"resolution\", resolution);\n    if (keys && keys.length) params = params.appendAll({key: keys.map(k => {\n      if (resolution) return k.substring(0, resolutionNum);\n      return k;\n    })});\n\n    let rawLayerData = await firstValueFrom(this.http.get(`${API_URL}/`, {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      }),\n      params,\n      responseType: \"json\",\n      context: new HttpContext()\n        .set(USE_API_URL, true)\n        .set(USE_LOADER, true)\n    }));\n\n    rawLayerData.shapes = rawLayerData.shapes.map(rawShape => ({\n      nutsKey: rawShape.nuts_key,\n      geoJson: rawShape.geojson,\n      ...rawShape\n    }));\n\n    let layerData = rawLayerData as unknown as LayerData;\n\n    // store the requested data back into the db\n    let tx = idb.transaction([\"queries\", \"shapes\"], \"readwrite\");\n    let operations = [];\n    let shapeStore = tx.objectStore(\"shapes\");\n    let shapeKeys = [];\n    for (let shape of layerData.shapes) {\n      operations.push(shapeStore.put(shape, shape.key));\n      shapeKeys.push(shape.key);\n    }\n    let queryStore = tx.objectStore(\"queries\");\n    operations.push(queryStore.put({\n      box: layerData.box,\n      shapes: shapeKeys\n    }, queryKey));\n    await Promise.all(operations);\n\n    return layerData;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Marker.html":{"url":"interfaces/Marker.html","title":"interface - Marker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Marker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/marker.ts\n        \n\n\n            \n                Description\n            \n            \n                Marker interface for creating custom markers on a MapComponent.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            coordinates\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onClick\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tooltip\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coordinates\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        coordinates:     [number, number]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [number, number]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Coordinates of the marker.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:     L.Icon | L.DivIcon\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     L.Icon | L.DivIcon\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional icon for the marker, if not set a default one will be used.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onClick\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onClick:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Event handler for a click on the marker.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tooltip\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tooltip:     Content |  | Tooltip\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Content |  | Tooltip\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Displayed tooltip when hovering the marker.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {Content, LeafletMouseEvent, Layer, Tooltip} from \"leaflet\";\n\nimport * as L from \"leaflet\";\n\n/** Marker interface for creating custom markers on a {@link MapComponent}. */\nexport interface Marker {\n  /** Coordinates of the marker. */\n  coordinates: [number, number],\n  /** Displayed tooltip when hovering the marker. */\n  tooltip?: Content | ((layer: Layer) => Content) | Tooltip,\n  /** Event handler for a click on the marker. */\n  onClick?: (evt: LeafletMouseEvent) => void,\n  /** Optional icon for the marker, if not set a default one will be used. */\n  icon?: L.Icon | L.DivIcon\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/QueryParameterGuard.html":{"url":"guards/QueryParameterGuard.html","title":"guard - QueryParameterGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    QueryParameterGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/lib/guards/query-parameter.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard to check if certain query parameters are set.\nIn the data attribute of route it expects an optional redirectTo\ncontaining an Observable, a Promise or a direct\nUrlTree or a string that will be passed to Router#parseUrl\nand queryParams containing a string or an array of strings.\n\nredirect will be used when the check fails.\nqueryParams will be iterated to check for the keys\n\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/lib/guards/query-parameter.guard.ts:25\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Router used to parse redirect entries\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/guards/query-parameter.guard.ts:41\n                \n            \n\n\n            \n                \n                    Whether the route can be activated.\nFor more info check QueryParameterGuard.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently activated route snapshot\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state of the router\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise | boolean | UrlTree\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {Injectable} from \"@angular/core\";\nimport {\n  CanActivate,\n  Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree\n} from \"@angular/router\";\nimport {Observable} from \"rxjs\";\n\n/**\n * Guard to check if certain query parameters are set.\n *\n * In the `data` attribute of route it expects an optional `redirectTo`\n * containing an {@link Observable}, a {@link Promise} or a direct\n * {@link UrlTree} or a string that will be passed to {@link Router#parseUrl}\n * and `queryParams` containing a string or an array of strings.\n *\n * - `redirect` will be used when the check fails.\n * - `queryParams` will be iterated to check for the keys\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class QueryParameterGuard implements CanActivate {\n\n  /**\n   * Constructor.\n   * @param router Router used to parse redirect entries\n   */\n  constructor(private router: Router) {}\n\n  /**\n   * Whether the route can be activated.\n   *\n   * For more info check {@link QueryParameterGuard}.\n   *\n   * @param route Currently activated route snapshot\n   * @param state Current state of the router\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable | Promise | boolean | UrlTree {\n    let redirect  = route.data[\"redirect\"] ?? false;\n    if (typeof redirect === \"string\") redirect = this.router.parseUrl(redirect);\n    for (let param of [route.data[\"queryParams\"] ?? []].flat()) {\n      if (route.queryParams[param] === undefined) return redirect;\n    }\n    return true;\n  }\n\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ShapeData.html":{"url":"interfaces/ShapeData.html","title":"interface - ShapeData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ShapeData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/layer-data.ts\n        \n\n\n            \n                Description\n            \n            \n                Type to represent a single shape with all of its metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            geoJson\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            nutsKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        geoJson\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        geoJson:     GeoJsonObject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     GeoJsonObject\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    GeoJson representing the shape.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Key of the shape.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the shape.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nutsKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nutsKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Nomenclature of Territorial Units code of the shape.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as L from \"leaflet\";\nimport {GeoJsonObject} from \"geojson\";\n\n/** Type to represent a single shape with all of its metadata. */\nexport interface ShapeData {\n  /** Name of the shape. */\n  name: string,\n  /** Key of the shape. */\n  key: string,\n  /** Nomenclature of Territorial Units code of the shape. */\n  nutsKey: string,\n  /** GeoJson representing the shape. */\n  geoJson: GeoJsonObject\n}\n\n/** Type to represent layer data received from the geo data server. */\nexport interface LayerData {\n  /** Corner coordinates of a box containing all the shapes this displays. */\n  box: [[number, number], [number, number], [number, number], [number, number]],\n  /** List of shapes. */\n  shapes: ShapeData[]\n}\n\nexport default LayerData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WisdomInterface.html":{"url":"interfaces/WisdomInterface.html","title":"interface - WisdomInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WisdomInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/WisdomInterface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for the wisdom modules.\nEvery wisdom module must provide such an object implementing this interface.\nThe object must be exported under the name \"wisdomInterface\".\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            route\n                                        \n                                \n                                \n                                        \n                                            scopes\n                                        \n                                \n                                \n                                        \n                                            translations\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        route\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        route:         Route\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Route\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The route that leads to this module.\nThis may also include guards but some guards will be automatically injected.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scopes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scopes:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The scopes required to see the component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translations:     Record>>>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record>>>\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The translations the modules provides and uses.\nThe top most entry should be the namespace, the following the component and\nin the component there should be keys for the translation keys.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {Route} from \"@angular/router\";\n\n/**\n * Interface for the wisdom modules.\n *\n * Every wisdom module must provide such an object implementing this interface.\n * The object must be exported under the name \"wisdomInterface\".\n */\nexport interface WisdomInterface {\n  /**\n   * The route that leads to this module.\n   * This may also include guards but some guards will be automatically injected.\n   */\n  route: Route;\n  /** The scopes required to see the component. */\n  scopes: string[];\n  /**\n   * The translations the modules provides and uses.\n   *\n   * The top most entry should be the namespace, the following the component and\n   * in the component there should be keys for the translation keys.\n   */\n  translations: Record>>>\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WisdomModule.html":{"url":"modules/WisdomModule.html","title":"module - WisdomModule","body":"\n                   \n\n\n\n\n    Modules\n    WisdomModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WisdomModule\n\n\n\ncluster_WisdomModule_exports\n\n\n\ncluster_WisdomModule_declarations\n\n\n\n\nBreadcrumbsComponent\n\nBreadcrumbsComponent\n\n\n\nWisdomModule\n\nWisdomModule\n\nWisdomModule -->\n\nBreadcrumbsComponent->WisdomModule\n\n\n\n\n\nBulmaIsToggleableDirective\n\nBulmaIsToggleableDirective\n\nWisdomModule -->\n\nBulmaIsToggleableDirective->WisdomModule\n\n\n\n\n\nIfcComponent\n\nIfcComponent\n\nWisdomModule -->\n\nIfcComponent->WisdomModule\n\n\n\n\n\nIonIconComponent\n\nIonIconComponent\n\nWisdomModule -->\n\nIonIconComponent->WisdomModule\n\n\n\n\n\nMapComponent\n\nMapComponent\n\nWisdomModule -->\n\nMapComponent->WisdomModule\n\n\n\n\n\nBreadcrumbsComponent \n\nBreadcrumbsComponent \n\nBreadcrumbsComponent  -->\n\nWisdomModule->BreadcrumbsComponent \n\n\n\n\n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective  -->\n\nWisdomModule->BulmaIsToggleableDirective \n\n\n\n\n\nIfcComponent \n\nIfcComponent \n\nIfcComponent  -->\n\nWisdomModule->IfcComponent \n\n\n\n\n\nIonIconComponent \n\nIonIconComponent \n\nIonIconComponent  -->\n\nWisdomModule->IonIconComponent \n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nWisdomModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/wisdom.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BreadcrumbsComponent\n                        \n                        \n                            BulmaIsToggleableDirective\n                        \n                        \n                            IfcComponent\n                        \n                        \n                            IonIconComponent\n                        \n                        \n                            MapComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BreadcrumbsComponent\n                        \n                        \n                            BulmaIsToggleableDirective\n                        \n                        \n                            IfcComponent\n                        \n                        \n                            IonIconComponent\n                        \n                        \n                            MapComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\nimport {RouterModule} from \"@angular/router\";\nimport {TranslateModule} from \"@ngx-translate/core\";\n\nimport {BreadcrumbsComponent} from \"./breadcrumbs/breadcrumbs.component\";\nimport {\n  BulmaIsToggleableDirective\n} from \"./bulma/bulma-is-toggleable.directive\";\nimport {IonIconComponent} from \"./ion-icon/ion-icon.component\";\nimport {MapComponent} from \"./map/map.component\";\nimport { IfcComponent } from './ifc/ifc.component';\n\n@NgModule({\n  declarations: [\n    IonIconComponent,\n    BulmaIsToggleableDirective,\n    MapComponent,\n    BreadcrumbsComponent,\n    IfcComponent\n  ],\n  imports: [\n    TranslateModule,\n    CommonModule,\n    RouterModule\n  ],\n  exports: [\n    IonIconComponent,\n    IfcComponent,\n    BulmaIsToggleableDirective,\n    MapComponent,\n    BreadcrumbsComponent\n  ]\n})\nexport class WisdomModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/WisdomInterface.ts\n            \n            interface\n            WisdomInterface\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/breadcrumbs/breadcrumbs.component.ts\n            \n            component\n            BreadcrumbsComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/lib/breadcrumbs/breadcrumbs.service.ts\n            \n            injectable\n            BreadcrumbsService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/breadcrumbs/breadcrumbs.service.ts\n            \n            interface\n            Breadcrumb\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/bulma/bulma-is-toggleable.directive.ts\n            \n            directive\n            BulmaIsToggleableDirective\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/guards/query-parameter.guard.ts\n            \n            guard\n            QueryParameterGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/http-context/send-auth.ts\n            \n            variable\n            SEND_AUTH\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-api-url.ts\n            \n            variable\n            USE_API_URL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-base-url.ts\n            \n            variable\n            USE_BASE_URL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-cache.ts\n            \n            variable\n            USE_CACHE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-error-curtain.ts\n            \n            variable\n            USE_ERROR_CURTAIN\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-loader.ts\n            \n            variable\n            USE_LOADER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/ifc/ifc.component.ts\n            \n            component\n            IfcComponent\n            \n                100 %\n                (21/21)\n            \n        \n        \n            \n                \n                src/lib/ifc/ifc.service.ts\n            \n            injectable\n            IfcService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/ifc/ifc.service.ts\n            \n            interface\n            IfcDB\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/lib/ifc/ifc.service.ts\n            \n            variable\n            DB_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/ifc/ifc.service.ts\n            \n            variable\n            SCHEMA_V\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/ion-icon/ion-icon.component.ts\n            \n            component\n            IonIconComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/loader/loader.injector.ts\n            \n            injectable\n            LoaderInjector\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/map/invert-selection.ts\n            \n            variable\n            control\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/layer-data.ts\n            \n            interface\n            LayerData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/map/layer-data.ts\n            \n            interface\n            ShapeData\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/map/map.component.ts\n            \n            component\n            MapComponent\n            \n                100 %\n                (30/30)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            injectable\n            MapService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            interface\n            MapDB\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            API_URL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            DB_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            SCHEMA_V\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/marker.ts\n            \n            interface\n            Marker\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/map/resolution.ts\n            \n            function\n            toEnum\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/resolution.ts\n            \n            function\n            toKeyLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            getResolvedUrl\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            prettyPrintNum\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            stringToColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            translateObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            tupleSwap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.4.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ~15.0.3\n        \n            @angular/core : ~15.0.3\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Resolution   (src/.../resolution.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/map/resolution.ts\n    \n        \n            \n                \n                    \n                        \n                        Resolution\n                    \n                \n                    \n                        \n                            Resolutions the map may display.\n\n                        \n                    \n                        \n                            \n                                 STATE\n                            \n                        \n                        \n                            \n                                Value : state\n                            \n                        \n                        \n                            \n                                 DISTRICT\n                            \n                        \n                        \n                            \n                                Value : district\n                            \n                        \n                        \n                            \n                                 ADMINISTRATION\n                            \n                        \n                        \n                            \n                                Value : administration\n                            \n                        \n                        \n                            \n                                 MUNICIPAL\n                            \n                        \n                        \n                            \n                                Value : municipal\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getResolvedUrl   (src/.../util.ts)\n                        \n                        \n                            prettyPrintNum   (src/.../util.ts)\n                        \n                        \n                            stringToColor   (src/.../util.ts)\n                        \n                        \n                            toEnum   (src/.../resolution.ts)\n                        \n                        \n                            toKeyLength   (src/.../resolution.ts)\n                        \n                        \n                            translateObject   (src/.../util.ts)\n                        \n                        \n                            tupleSwap   (src/.../util.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getResolvedUrl\n                        \n                    \n                \n            \n            \n                \ngetResolvedUrl(route: ActivatedRouteSnapshot)\n                \n            \n\n\n\n\n            \n                \n                    Function to return a fully resolved url in a string from an activated route\nsnapshot.\nRecreated by this solution on StackOverflow.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Route snapshot of a component.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prettyPrintNum\n                        \n                    \n                \n            \n            \n                \nprettyPrintNum(num: number)\n                \n            \n\n\n\n\n            \n                \n                    Returns a number presentation where every third digit from the end is\nseparated by a dot.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Number to pretty print\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            prettyPrintNum(12345678) =&gt; &quot;12.345.678&quot;\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stringToColor\n                        \n                    \n                \n            \n            \n                \nstringToColor(str: string, map?: Record)\n                \n            \n\n\n\n\n            \n                \n                    Generates deterministically a hex color code from any string.\nThis is a modernized version of this\nStackOverflow reply.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A string to generate a hex color for\n\n                                    \n                                \n                                \n                                    map\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A color map for predefined strings\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A hex color code in the style of '#abc123'\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        translateObject\n                        \n                    \n                \n            \n            \n                \ntranslateObject(service: TranslateService, obj: T)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to translate strings in any data object using the given\ntranslate service.\nInternally the instant() method is used, causing this to be sync, beware.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    service\n                                    \n                                            TranslateService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Translate service to translate with\n\n                                    \n                                \n                                \n                                    obj\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to iterate and translate through\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tupleSwap\n                        \n                    \n                \n            \n            \n                \ntupleSwap(tuple)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to swap the values of a tuple.\nUseful if coordinates are in the wrong order.\n(e.g. geojson to leaflet)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tuple\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Tuple of two values\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/lib/map/resolution.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toEnum\n                        \n                    \n                \n            \n            \n                \ntoEnum(length: number)\n                \n            \n\n\n\n\n            \n                \n                    Get the Resolution from a key length.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key length\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Resolution | undefined\n\n                    \n                    \n                        Resolution if found, otherwise undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toKeyLength\n                        \n                    \n                \n            \n            \n                \ntoKeyLength(res: Resolution)\n                \n            \n\n\n\n\n            \n                \n                    Transforms a Resolution into the key length.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                                Resolution\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Resolution to find key length\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WisdomModule\n\n\n\ncluster_WisdomModule_declarations\n\n\n\ncluster_WisdomModule_exports\n\n\n\n\nBreadcrumbsComponent\n\nBreadcrumbsComponent\n\n\n\nWisdomModule\n\nWisdomModule\n\nWisdomModule -->\n\nBreadcrumbsComponent->WisdomModule\n\n\n\n\n\nBulmaIsToggleableDirective\n\nBulmaIsToggleableDirective\n\nWisdomModule -->\n\nBulmaIsToggleableDirective->WisdomModule\n\n\n\n\n\nIfcComponent\n\nIfcComponent\n\nWisdomModule -->\n\nIfcComponent->WisdomModule\n\n\n\n\n\nIonIconComponent\n\nIonIconComponent\n\nWisdomModule -->\n\nIonIconComponent->WisdomModule\n\n\n\n\n\nMapComponent\n\nMapComponent\n\nWisdomModule -->\n\nMapComponent->WisdomModule\n\n\n\n\n\nBreadcrumbsComponent \n\nBreadcrumbsComponent \n\nBreadcrumbsComponent  -->\n\nWisdomModule->BreadcrumbsComponent \n\n\n\n\n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective  -->\n\nWisdomModule->BulmaIsToggleableDirective \n\n\n\n\n\nIfcComponent \n\nIfcComponent \n\nIfcComponent  -->\n\nWisdomModule->IfcComponent \n\n\n\n\n\nIonIconComponent \n\nIonIconComponent \n\nIonIconComponent  -->\n\nWisdomModule->IonIconComponent \n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nWisdomModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        WisdomModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            InputModels   (src/.../ifc.component.ts)\n                        \n                        \n                            LayerConfig   (src/.../map.component.ts)\n                        \n                        \n                            LayerKey   (src/.../map.component.ts)\n                        \n                        \n                            LoadedModels   (src/.../ifc.component.ts)\n                        \n                        \n                            ModelEntry   (src/.../ifc.component.ts)\n                        \n                        \n                            ModelEntry   (src/.../ifc.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/ifc/ifc.component.ts\n    \n    \n        \n            \n                \n                    \n                    InputModels\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LoadedModels\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ModelEntry\n                \n            \n            \n                \n                    Model entry.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ModelEntry\n                \n            \n            \n                \n                            IfcComponent.ModelEntry\n\n                \n            \n        \n    \n    src/lib/map/map.component.ts\n    \n    \n        \n            \n                \n                    \n                    LayerConfig\n                \n            \n            \n                \n                    A layer config for the input of MapComponent.inputLayers.\n\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LayerKey\n                \n            \n            \n                \n                    Type alias to enforce the meaning of the layer keys.\n\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            API_URL   (src/.../map.service.ts)\n                        \n                        \n                            control   (src/.../invert-selection.ts)\n                        \n                        \n                            DB_NAME   (src/.../ifc.service.ts)\n                        \n                        \n                            DB_NAME   (src/.../map.service.ts)\n                        \n                        \n                            SCHEMA_V   (src/.../ifc.service.ts)\n                        \n                        \n                            SCHEMA_V   (src/.../map.service.ts)\n                        \n                        \n                            SEND_AUTH   (src/.../send-auth.ts)\n                        \n                        \n                            USE_API_URL   (src/.../use-api-url.ts)\n                        \n                        \n                            USE_BASE_URL   (src/.../use-base-url.ts)\n                        \n                        \n                            USE_CACHE   (src/.../use-cache.ts)\n                        \n                        \n                            USE_ERROR_CURTAIN   (src/.../use-error-curtain.ts)\n                        \n                        \n                            USE_LOADER   (src/.../use-loader.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/map/map.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        API_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"geodata\"\n                    \n                \n\n            \n                \n                    API url for the map to request data from.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DB_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"map-db\"\n                    \n                \n\n            \n                \n                    Indexed DB name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SCHEMA_V\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 2\n                    \n                \n\n            \n                \n                    Indexed DB schema version.\n\n                \n            \n\n        \n    \n\n    src/lib/map/invert-selection.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  invertSelection: (callback: (arg0: MouseEvent) => void, options?: L.ControlOptions) => {\n    let InvertSelection = L.Control.extend({\n      options: {\n        position: \"topright\"\n      },\n      initialize: function (options: any) {\n        L.Util.setOptions(this, options);\n      },\n      onAdd: function (map: L.Map) {\n        let centerContent = [\n          \"is-flex is-align-content-center\",\n          \"is-align-items-center\",\n          \"is-justify-content-center\"\n        ].join(\" \");\n\n        let container = L.DomUtil.create(\n          \"div\",\n          \"select-all-container leaflet-control-layers leaflet-control\"\n        );\n        container.addEventListener(\"click\", callback);\n        let button = L.DomUtil.create(\n          \"a\",\n          \"leaflet-control-layers-toggle \" + centerContent,\n          container\n        );\n        button.style.backgroundImage = \"none\";\n        let icon = L.DomUtil.create(\n          \"ion-icon\",\n          \"select-all-icon\",\n          button\n        );\n        icon.style.pointerEvents = \"none\";\n        icon.setAttribute(\"name\", \"extension-puzzle\");\n        icon.setAttribute(\"size\", \"large\");\n        icon.style.color = \"#a0a0a0\";\n        return container;\n      }\n    });\n    return new InvertSelection(options);\n  }\n}\n                    \n                \n\n            \n                \n                    Custom control to invert the currently selected shapes on a\nMapComponent.\n\n                \n            \n\n        \n    \n\n    src/lib/ifc/ifc.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DB_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"ifc-db\"\n                    \n                \n\n            \n                \n                    Indexed DB name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SCHEMA_V\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n\n            \n                \n                    Indexed DB schema version.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/send-auth.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SEND_AUTH\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => undefined)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if the authorization header should\nbe sent.\nAs long as this context is set to undefined it is implied by\nUSE_API_URL to be true.\nDefaults to undefined.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-api-url.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_API_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :     miscellaneous\n\n                    \n                \n                \n                    \n                        Default value : new HttpContextToken(() => false)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if the api url should be used.\nImplies SEND_AUTH.\nSetting SEND_AUTH to false will deny filling the Authorization\nheader.\nDefaults to false.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-base-url.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_BASE_URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => false)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if the base url should be used.\nDefaults to false.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-cache.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_CACHE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => true)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if cache headers should be sent.\nDefaults to true.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-error-curtain.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_ERROR_CURTAIN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => true)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if requests that error should show\nthe error message on curtain covering the whole main container.\nDisable this if you want to handle errors yourself.\nDefaults to true.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-loader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_LOADER\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => false)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if loader should be shown.\nA given string will be run through the translator and therefore may get\ntranslated.\nUseful for longer loading times.\nDefaults to false.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
