var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/Breadcrumb.html",[0,0.459,1,1.546]],["body/interfaces/Breadcrumb.html",[0,0.7,1,2.914,2,1.205,3,0.522,4,0.522,5,0.453,6,1.995,7,0.522,8,4.474,9,0.468,10,0.811,11,1.595,12,2.842,13,1.877,14,2.73,15,3.307,16,1.026,17,0.543,18,0.045,19,0.866,20,2.531,21,3.187,22,2.359,23,1.306,24,3.307,25,1.783,26,2.876,27,1.306,28,2.091,29,2.359,30,2.076,31,2.359,32,2.713,33,0.807,34,1.463,35,0.762,36,1.735,37,1.995,38,1.527,39,2.68,40,3.082,41,3.082,42,1.205,43,0.71,44,1.205,45,2.344,46,2.713,47,1.527,48,1.527,49,0.857,50,1.527,51,1.735,52,3.082,53,2.344,54,0.596,55,0.96,56,1.639,57,2.344,58,2.344,59,1.527,60,1.463,61,1.484,62,1.354,63,2.344,64,0.857,65,2.344,66,1.354,67,2.344,68,2.344,69,2.713,70,0.96,71,2.344,72,0.03,73,0.03]],["title/components/BreadcrumbsComponent.html",[74,0.973,75,1.221]],["body/components/BreadcrumbsComponent.html",[1,2.779,3,0.444,4,0.444,5,0.385,7,0.634,9,0.229,10,0.724,11,0.728,13,1.166,15,2.422,17,0.463,18,0.045,19,0.807,20,2.358,23,0.816,25,1.661,27,0.816,30,1.853,33,0.739,35,0.648,42,1.024,43,0.444,44,2.194,46,3.568,49,0.728,50,2.594,52,3.728,55,1.36,59,2.358,60,0.914,61,1.166,62,2.091,69,2.422,70,1.36,72,0.026,73,0.026,74,1.748,75,1.862,76,2.106,77,1.696,78,1.696,79,1.696,80,1.992,81,3.488,82,3.488,83,2.845,84,3.488,85,4.438,86,3.488,87,2.845,88,3.488,89,2.106,90,3.488,91,2.422,92,3.319,93,4.069,94,1.151,95,2.947,96,3.488,97,3.488,98,5.025,99,1.643,100,4.438,101,4.438,102,3.62,103,1.917,104,1.992,105,2.155,106,3.488,107,2.442,108,2.106,109,3.488,110,2.091,111,1.969,112,3.488,113,3.488,114,2.845,115,1.523,116,2.091,117,2.442,118,3.488,119,3.488,120,3.488,121,3.488,122,3.488,123,1.862,124,2.442,125,3.488,126,2.845,127,2.845,128,2.845,129,1.166,130,1.643,131,2.442,132,2.845,133,2.442,134,2.442,135,1.151,136,2.442,137,2.442,138,3.488,139,2.442,140,2.442,141,2.442,142,2.442,143,2.845,144,1.696,145,2.422,146,1.024,147,3.082,148,1.696,149,1.696,150,1.298,151,1.696,152,0.816,153,0.914,154,1.474,155,0.914,156,1.474,157,1.696]],["title/injectables/BreadcrumbsService.html",[34,1.089,50,1.546]],["body/injectables/BreadcrumbsService.html",[0,0.604,1,3.004,3,0.508,4,0.508,5,0.441,6,1.941,7,0.697,8,4.335,9,0.499,10,0.795,11,1.304,12,2.325,13,1.776,14,2.037,15,1.941,16,0.897,17,0.498,18,0.045,19,0.795,20,2.037,21,2.28,22,1.687,23,0.934,24,2.662,25,1.954,26,2.314,27,1.281,28,2.061,29,1.687,30,1.485,31,1.687,32,1.941,33,0.795,34,1.435,35,0.742,36,1.687,37,1.941,38,1.485,39,2.978,40,3.425,41,3.538,42,1.172,43,0.697,44,1.608,45,3.127,46,3.425,47,1.485,48,1.485,49,0.833,50,2.037,51,2.314,52,3.624,53,2.28,54,0.795,55,1.462,56,1.975,57,3.127,58,3.127,59,2.037,60,1.435,61,1.744,62,1.806,63,3.127,64,1.304,65,2.28,66,1.317,67,2.28,68,2.28,69,3.538,70,0.934,71,2.28,72,0.029,73,0.029,99,1.806,105,1.975,115,1.435,123,1.172,129,1.281,158,1.941,159,2.795,160,2.795,161,2.795,162,2.795]],["title/directives/BulmaIsToggleableDirective.html",[146,1.221,155,1.089]],["body/directives/BulmaIsToggleableDirective.html",[3,0.511,4,0.511,5,0.443,7,0.511,9,0.264,10,0.799,11,0.838,16,0.967,17,0.538,18,0.045,19,0.511,25,1.643,27,0.94,33,0.511,35,0.746,43,0.511,49,1.587,55,1.706,61,1.287,70,0.94,72,0.029,73,0.029,94,1.325,95,2.324,99,1.814,105,2.193,111,1.615,115,1.643,116,1.814,123,1.615,129,1.287,146,2.142,154,1.698,155,1.441,156,2.85,163,4.341,164,2.294,165,3.849,166,3.849,167,3.849,168,3.849,169,5.558,170,4.404,171,5.398,172,5.514,173,4.389,174,2.673,175,3.849,176,3.14,177,2.673,178,4.389,179,3.849,180,5.659,181,3.849,182,2.068,183,4.389,184,4.389,185,2.294,186,2.812,187,2.812,188,2.812,189,2.324,190,2.812,191,2.812,192,2.812,193,2.812,194,1.698,195,2.812,196,2.812,197,2.812,198,2.812,199,2.812,200,2.812,201,2.812,202,2.812,203,4.389,204,2.812,205,3.849,206,2.812,207,1.953]],["title/components/IonIconComponent.html",[23,0.973,74,0.973]],["body/components/IonIconComponent.html",[3,0.484,4,0.484,5,0.42,7,0.673,9,0.25,11,1.105,12,2.791,13,0.89,16,0.838,17,0.486,18,0.045,19,1.03,22,2.237,23,1.541,25,0.996,27,1.239,30,2.736,33,0.484,35,0.706,43,0.484,49,0.793,54,1.006,60,0.996,62,1.746,72,0.028,73,0.028,74,1.721,75,1.116,76,2.237,77,1.848,78,1.848,79,1.848,94,1.254,95,3.03,103,2.009,105,1.789,110,2.172,115,0.996,123,1.116,128,4.094,135,1.254,144,1.848,145,2.573,146,1.116,147,3.202,148,1.848,149,1.848,150,2.667,151,1.848,152,0.89,153,0.996,154,1.607,155,0.996,156,1.607,157,1.848,174,2.573,177,2.573,194,2.237,208,3.761,209,3.202,210,2.171,211,3.706,212,5.334,213,4.61,214,2.237,215,3.706,216,3.706,217,3.023,218,3.706,219,3.023,220,3.706,221,2.661,222,3.761,223,2.661,224,4.263,225,3.706,226,3.706,227,3.706,228,5.019,229,4.263,230,4.263,231,4.263,232,4.263,233,4.263,234,4.263,235,4.094,236,4.263,237,4.263,238,3.478,239,3.478,240,4.263,241,3.478,242,3.478,243,4.263,244,4.263,245,4.263,246,2.661,247,2.661,248,2.661]],["title/interfaces/LayerData.html",[0,0.459,249,1.221]],["body/interfaces/LayerData.html",[0,0.685,2,1.416,3,0.613,4,0.613,5,0.532,7,0.613,9,0.317,10,0.902,16,0.873,17,0.623,18,0.045,19,0.79,33,0.613,43,0.922,51,2.623,54,0.7,55,1.128,64,1.652,72,0.033,73,0.033,94,1.59,129,1.128,249,2.016,250,2.037,251,2.037,252,3.92,253,1.823,254,1.755,255,3.545,256,2.309,257,2.309,258,3.246,259,2.61,260,3.545,261,2.309,262,3.017,263,3.545,264,2.391,265,2.037,266,1.452,267,2.016,268,2.047,269,2.343,270,2.753,271,2.791,272,2.047,273,2.753,274,2.753,275,2.753,276,2.037,277,2.037,278,2.753]],["title/components/MapComponent.html",[74,0.973,152,0.973]],["body/components/MapComponent.html",[3,0.164,4,0.164,5,0.142,7,0.286,9,0.085,10,0.519,11,1.109,13,1.545,16,0.786,17,0.589,18,0.046,19,0.786,20,1.885,22,0.545,23,0.302,25,1.061,27,0.698,28,0.984,30,1.329,31,0.949,33,0.676,35,0.24,39,1.879,40,2.78,41,2.583,42,0.379,43,0.164,44,1.488,49,0.269,54,0.931,55,1.751,56,1.624,59,1.11,60,0.338,61,1.499,62,2.077,64,0.623,66,0.425,72,0.012,73,0.012,74,0.948,75,0.379,76,0.949,77,1.092,78,0.627,79,0.627,91,1.092,92,1.704,94,0.425,95,1.879,99,0.741,102,2.04,103,0.984,104,0.736,105,2.147,111,0.379,115,1.061,116,1.178,123,1.488,126,1.283,127,3.035,129,1.413,130,1.336,135,0.425,144,0.627,145,2.324,146,0.379,147,1.736,148,0.627,149,0.627,150,0.48,151,0.627,152,0.836,153,2.008,154,0.545,155,0.338,156,0.545,157,0.627,174,1.092,177,1.092,182,0.741,185,0.736,189,2.489,194,2.945,207,0.627,217,2.313,219,1.283,222,1.704,235,1.704,239,0.736,242,1.283,249,1.404,253,2.188,254,1.499,256,2.128,257,0.836,259,1.992,261,0.836,265,0.545,266,0.836,267,0.66,268,0.425,269,0.627,271,1.329,272,2.036,276,1.51,279,0.903,280,0.627,281,1.573,282,1.573,283,2.089,284,1.573,285,2.089,286,3.717,287,3.871,288,3.266,289,2.089,290,2.089,291,3.266,292,2.089,293,2.089,294,2.5,295,2.835,296,3.001,297,2.5,298,2.5,299,3.035,300,1.573,301,2.089,302,2.089,303,2.089,304,2.5,305,3.864,306,1.573,307,1.573,308,1.329,309,0.903,310,1.092,311,0.903,312,0.903,313,1.573,314,2.552,315,2.089,316,2.5,317,3.035,318,1.704,319,2.539,320,3.547,321,2.089,322,2.089,323,2.246,324,2.463,325,2.177,326,2.089,327,2.089,328,2.089,329,1.506,330,1.451,331,1.451,332,2.089,333,2.089,334,2.089,335,2.089,336,2.089,337,2.5,338,1.704,339,2.089,340,2.089,341,2.089,342,0.903,343,1.573,344,2.021,345,1.573,346,0.903,347,1.573,348,2.5,349,1.573,350,1.573,351,1.573,352,1.573,353,0.903,354,2.04,355,0.903,356,2.5,357,1.329,358,1.573,359,0.903,360,1.573,361,0.903,362,2.5,363,2.089,364,0.903,365,0.903,366,2.04,367,1.573,368,2.5,369,0.903,370,1.573,371,0.903,372,1.573,373,1.573,374,1.573,375,1.573,376,0.903,377,2.893,378,1.573,379,1.573,380,1.573,381,2.5,382,0.903,383,0.903,384,0.903,385,1.573,386,3.266,387,0.903,388,1.573,389,1.283,390,0.903,391,0.903,392,0.903,393,1.573,394,0.903,395,2.089,396,0.903,397,1.092,398,0.903,399,1.092,400,0.903,401,2.5,402,1.573,403,1.573,404,0.903,405,1.573,406,2.5,407,0.903,408,0.903,409,1.283,410,0.903,411,0.903,412,0.903,413,0.903,414,0.903,415,0.736,416,1.573,417,0.903,418,0.903,419,0.903,420,0.736,421,0.903,422,0.903,423,1.573,424,1.573,425,0.903,426,0.903,427,0.736,428,0.903,429,0.903,430,0.903,431,0.903,432,0.903,433,0.903,434,0.903,435,0.736,436,0.903,437,0.736,438,0.736,439,0.736,440,1.283,441,0.736,442,0.903,443,0.903,444,0.903,445,0.903,446,0.903,447,0.903,448,0.903,449,0.903,450,0.903,451,0.903,452,0.903,453,0.903,454,0.903,455,0.903,456,0.903,457,0.903,458,0.903,459,0.903,460,0.903,461,0.903,462,0.903,463,0.903,464,1.573,465,0.903,466,1.573,467,0.903,468,1.573,469,1.573,470,0.903,471,1.573,472,0.903,473,0.903,474,0.736,475,1.573,476,0.903,477,1.573,478,0.903,479,0.903,480,0.903,481,0.903,482,0.627,483,0.903,484,0.903,485,0.627,486,0.903,487,1.092,488,0.903,489,0.903,490,0.903,491,0.903,492,0.903,493,0.903,494,0.903,495,0.903,496,0.903,497,1.283,498,0.903,499,0.903,500,2.089,501,1.573,502,0.903,503,2.089,504,0.903,505,2.089,506,0.627,507,0.903,508,0.903,509,2.089,510,0.903,511,0.903,512,0.903,513,2.089,514,0.903,515,0.903,516,0.903,517,0.903,518,0.903,519,0.903,520,0.903,521,0.903,522,0.48,523,0.903,524,0.736,525,0.736,526,1.573,527,0.903,528,1.573,529,0.736,530,0.903,531,0.903,532,0.903,533,1.573,534,0.903,535,0.903,536,0.903,537,0.903,538,0.903,539,1.573,540,0.903,541,0.903,542,0.903,543,0.903,544,0.903,545,1.573,546,0.903,547,0.903,548,0.903,549,0.903,550,0.627,551,0.903,552,2.089,553,0.903,554,0.903,555,0.903,556,0.903,557,0.903,558,0.903,559,0.903,560,0.903,561,0.903,562,0.903,563,0.903,564,0.903,565,1.573,566,1.573,567,0.903,568,0.903,569,0.903,570,0.903,571,0.903,572,0.903,573,0.903,574,0.903,575,1.573,576,0.903,577,0.903,578,0.903,579,1.573,580,0.903,581,0.903,582,0.736]],["title/interfaces/MapDB.html",[0,0.459,583,1.757]],["body/interfaces/MapDB.html",[0,0.304,2,0.809,3,0.351,4,0.351,5,0.304,7,0.351,9,0.181,10,0.608,13,1.185,14,2.383,16,0.774,17,0.531,18,0.046,19,0.351,26,2.391,28,1.866,33,0.894,34,1.098,35,0.512,42,0.809,43,0.351,44,1.23,47,1.025,48,1.025,49,0.575,54,0.822,55,0.645,56,1.487,60,1.483,61,1.499,64,0.874,66,1.67,70,1.324,72,0.022,73,0.022,89,1.165,103,0.909,108,1.165,110,1.381,111,0.809,116,0.909,130,1.866,135,0.909,153,1.745,214,1.77,249,1.881,253,1.661,254,1.728,256,1.884,257,1.025,258,2.141,259,2.464,264,2.196,266,0.645,267,0.809,268,0.909,271,2.104,272,2.196,277,1.165,308,1.025,310,1.34,323,2.808,324,2.036,325,2.402,329,1.884,330,1.34,331,1.34,357,1.558,397,1.34,482,1.34,485,2.957,487,2.462,522,1.025,550,1.34,583,1.77,584,1.165,585,2.462,586,3.589,587,2.391,588,2.892,589,3.658,590,3.96,591,3.23,592,2.391,593,2.892,594,2.391,595,3.23,596,2.892,597,2.892,598,2.957,599,2.391,600,2.391,601,2.391,602,2.391,603,2.391,604,2.391,605,1.574,606,1.574,607,2.892,608,1.574,609,1.165,610,3.23,611,1.77,612,2.391,613,1.165,614,1.34,615,2.75,616,1.165,617,1.34,618,1.165,619,1.025,620,1.77,621,1.574,622,2.892,623,2.391,624,1.574,625,1.574,626,2.391,627,2.391,628,2.391,629,1.574,630,1.574,631,2.391,632,1.574,633,1.574,634,1.574,635,1.574,636,1.574,637,1.574,638,1.574,639,3.23,640,2.391,641,1.34,642,1.574,643,1.574,644,1.34,645,1.574,646,2.391,647,2.892,648,1.574,649,2.892,650,2.391,651,1.574,652,2.391,653,1.574,654,2.391,655,2.391,656,2.391,657,1.574,658,1.574,659,1.574,660,1.574,661,2.391,662,1.574,663,1.574,664,1.574,665,1.574,666,1.574,667,1.574,668,1.574,669,1.574,670,2.391,671,1.574,672,1.34,673,1.165,674,1.574,675,1.574,676,1.574,677,1.574,678,1.574,679,1.574,680,1.574,681,1.574,682,1.574,683,1.574,684,1.574,685,1.574,686,1.574,687,1.574,688,1.574,689,1.574,690,2.391,691,1.574,692,1.574,693,1.574,694,1.574,695,1.574,696,1.574,697,1.574]],["title/injectables/MapService.html",[34,1.089,308,1.546]],["body/injectables/MapService.html",[0,0.288,3,0.332,4,0.332,5,0.288,7,0.623,9,0.172,10,0.584,11,0.839,13,1.146,14,1.822,16,0.831,17,0.391,18,0.046,19,0.623,26,2.325,27,0.94,28,1.325,33,0.88,34,1.053,35,0.485,42,0.767,43,0.332,44,1.615,47,0.971,48,0.971,49,0.545,54,0.584,55,1.146,56,1.438,60,1.441,61,1.389,64,0.839,66,1.325,70,1.287,72,0.021,73,0.021,89,1.698,99,1.325,103,1.615,105,1.438,108,1.104,110,1.814,111,1.18,115,0.684,116,1.615,129,0.611,130,1.958,135,0.861,153,1.813,158,1.269,214,1.104,249,1.744,253,1.438,254,1.792,256,2.333,257,0.971,258,2.07,259,2.37,264,1.958,266,0.611,267,0.767,268,0.861,271,1.822,272,1.958,277,1.104,308,1.495,310,1.953,323,2.828,324,3.048,325,2.405,329,1.822,330,1.269,331,1.953,357,1.495,397,1.269,482,1.953,485,2.886,487,2.381,522,0.971,550,1.269,583,1.104,584,1.104,585,1.953,586,3.433,587,1.491,588,2.295,589,2.295,591,3.141,592,1.491,593,2.797,594,1.491,595,2.295,596,2.797,597,2.797,598,2.886,599,1.491,600,1.491,601,3.141,602,2.295,603,2.295,604,2.295,605,1.491,606,1.491,607,3.391,608,1.491,609,1.104,610,3.391,611,1.698,612,2.65,613,1.104,614,1.269,615,3.048,616,1.104,617,1.269,618,1.104,619,0.971,620,1.698,621,1.491,622,3.581,623,3.141,624,2.295,625,2.295,626,3.141,627,3.141,628,2.295,629,1.491,630,1.491,631,2.295,632,1.491,633,1.491,634,1.491,635,1.491,636,2.295,637,2.295,638,2.295,639,3.581,640,2.797,641,1.953,642,2.797,643,2.797,644,1.953,645,1.491,646,2.295,647,2.797,648,1.491,649,2.797,650,2.295,651,1.491,652,2.295,653,1.491,654,2.295,655,2.295,656,2.295,657,1.491,658,1.491,659,1.491,660,1.491,661,2.295,662,1.491,663,1.491,664,1.491,665,1.491,666,1.491,667,1.491,668,1.491,669,1.491,670,2.295,671,1.491,672,1.269,673,1.104,674,1.491,675,1.491,676,1.491,677,1.491,678,1.491,679,1.491,680,1.491,681,1.491,682,1.491,683,1.491,684,1.491,685,1.491,686,1.491,687,1.491,688,1.491,689,1.491,690,2.295,691,1.491,692,1.491,693,1.491,694,1.491,695,1.491,696,1.491,697,1.491,698,1.828,699,2.813,700,1.828,701,1.828,702,1.491]],["title/interfaces/Marker.html",[0,0.459,344,1.757]],["body/interfaces/Marker.html",[0,0.757,2,1.41,3,0.611,4,0.611,5,0.53,7,0.611,9,0.316,10,0.9,11,1.651,12,2.854,13,1.124,17,0.577,18,0.045,20,2.303,25,1.623,33,0.788,43,0.611,54,0.9,59,2.303,64,1.601,72,0.033,73,0.033,123,1.41,129,1.449,152,1.449,176,3.536,182,2.042,253,2.013,261,2.854,265,2.03,266,1.449,291,3.536,344,3.449,673,3.167,703,2.743,704,4.335,705,3.536,706,5.068,707,5.64,708,4.798,709,4.798,710,4.335,711,4.335,712,4.335,713,4.335,714,3.362]],["title/guards/QueryParameterGuard.html",[715,1.757,716,2.021]],["body/guards/QueryParameterGuard.html",[3,0.794,4,0.506,5,0.439,7,0.794,9,0.262,11,1.402,13,1.647,14,2.033,16,0.896,17,0.436,18,0.045,19,0.695,24,3.822,25,1.432,27,1.572,28,1.802,29,2.31,31,2.31,33,0.794,34,1.432,35,0.739,36,2.839,37,3.422,38,1.481,39,2.975,42,1.169,43,0.506,47,1.481,48,1.481,49,0.831,54,0.976,60,1.76,70,1.279,72,0.029,73,0.029,87,3.12,91,1.935,99,1.802,103,2.058,105,1.605,108,3.206,110,1.313,111,1.169,115,1.043,116,1.802,130,1.313,132,3.12,135,1.313,189,2.31,238,3.12,254,1.279,262,3.265,325,1.802,644,3.265,715,2.31,716,3.265,717,2.273,718,3.563,719,2.273,720,3.825,721,3.741,722,3.825,723,3.825,724,3.825,725,3.825,726,4.702,727,5.31,728,3.825,729,3.825,730,4.928,731,2.786,732,2.786,733,3.825,734,3.825,735,2.786,736,4.153,737,4.702,738,2.786,739,3.836,740,3.825,741,3.12,742,2.786,743,2.786,744,2.786,745,2.786,746,2.786,747,2.786]],["title/interfaces/ShapeData.html",[0,0.459,264,1.371]],["body/interfaces/ShapeData.html",[0,0.678,2,1.393,3,0.603,4,0.603,5,0.523,7,0.603,9,0.312,10,0.892,16,1.014,17,0.636,18,0.045,19,0.973,33,0.603,43,0.917,51,2.004,54,0.689,55,1.11,64,1.646,72,0.033,73,0.033,94,2.026,129,1.11,249,1.804,250,2.004,251,2.004,252,3.89,253,1.393,254,1.594,255,2.708,256,1.764,257,1.764,258,2.596,259,2.247,260,2.708,261,1.764,262,2.305,263,2.708,264,2.247,265,2.004,266,1.437,267,2.285,268,2.376,269,2.305,270,3.507,271,2.991,272,2.522,273,3.507,274,3.507,275,3.507,276,2.596,277,3.045,278,3.507]],["title/interfaces/WisdomInterface.html",[0,0.459,748,2.021]],["body/interfaces/WisdomInterface.html",[0,0.83,2,1.426,3,0.618,4,0.618,5,0.536,7,0.618,9,0.319,10,0.906,16,0.877,17,0.549,18,0.045,19,0.793,33,0.618,38,1.806,43,0.618,72,0.033,73,0.033,74,1.801,214,2.636,314,2.912,318,3.561,319,3.561,325,2.398,338,3.561,529,3.561,717,4.151,721,3.924,748,3.534,749,2.773,750,5.089,751,3.073,752,3.534,753,4.366,754,4.366,755,3.534,756,4.366,757,4.366,758,4.366,759,5.387,760,5.387,761,4.366,762,4.366,763,4.366,764,4.366,765,4.366,766,4.366,767,4.366,768,4.366]],["title/modules/WisdomModule.html",[752,2.021,769,1.757]],["body/modules/WisdomModule.html",[3,0.632,4,0.632,5,0.548,18,0.045,23,1.918,33,1.013,35,0.922,38,1.847,43,0.632,49,1.037,72,0.034,73,0.034,75,2.408,150,1.847,152,1.918,155,2.148,209,2.414,296,3.075,506,2.414,751,2.099,769,3.517,770,2.674,771,2.836,772,2.836,773,2.836,774,2.836,775,3.477,776,4.429,777,4.429,778,4.429,779,2.836,780,4.429,781,4.429,782,4.429,783,3.477,784,3.477,785,3.477,786,3.477,787,3.477,788,3.477,789,3.477,790,3.477]],["title/coverage.html",[791,3.214]],["body/coverage.html",[0,0.825,1,1.626,5,0.483,6,2.83,17,0.349,18,0.045,23,1.023,34,1.526,50,1.626,56,1.284,72,0.031,73,0.031,74,1.532,75,1.284,80,2.496,146,1.284,152,1.023,155,1.146,163,2.496,164,2.496,182,2.517,208,2.496,209,2.125,210,2.496,249,1.284,250,2.461,251,2.461,264,1.442,280,2.125,308,1.626,344,1.847,399,2.125,497,4.811,583,1.847,584,3.072,609,1.847,611,3.072,612,1.847,613,1.847,616,1.847,618,1.847,620,1.847,703,2.496,715,1.847,716,2.125,718,2.496,719,2.496,748,2.125,749,2.496,791,2.496,792,3.06,793,3.06,794,3.06,795,4.075,796,3.06,797,4.886,798,3.06,799,4.886,800,4.151,801,3.325,802,5.493,803,5.743,804,2.496,805,2.496,806,2.496,807,2.496,808,2.496,809,2.496,810,2.496,811,2.496,812,2.496,813,2.496,814,3.06,815,2.83,816,2.496,817,2.496,818,4.151,819,2.496,820,2.496,821,2.496,822,2.496,823,2.496,824,3.06,825,3.06]],["title/dependencies.html",[770,2.108,826,1.995]],["body/dependencies.html",[18,0.043,35,1.19,72,0.039,73,0.039,770,3.121,779,3.659,827,4.486,828,4.486,829,4.486,830,5.17]],["title/miscellaneous/enumerations.html",[831,0.916,832,2.848]],["body/miscellaneous/enumerations.html",[9,0.407,18,0.043,61,1.851,62,2.044,72,0.038,73,0.038,153,1.624,323,2.694,415,4.136,427,4.136,736,4.136,815,3.012,831,1.624,832,3.539,833,3.539,834,4.338,835,5.07]],["title/miscellaneous/functions.html",[831,0.916,836,2.848]],["body/miscellaneous/functions.html",[7,0.959,9,0.274,11,1.574,16,0.976,17,0.588,18,0.044,19,0.959,27,1.764,29,2.384,32,2.742,36,2.384,44,1.877,54,0.606,64,1.574,70,0.976,72,0.03,73,0.03,74,0.976,83,2.381,110,1.86,114,2.381,115,1.976,143,4.086,153,1.675,182,2.108,241,2.381,254,0.976,261,1.551,266,0.976,267,1.225,272,2.259,276,2.384,314,2.384,317,3.221,323,2.805,329,1.551,354,3.65,357,1.551,366,2.381,409,2.381,524,2.381,525,3.911,619,1.551,702,2.381,721,3.107,739,2.381,741,3.221,755,2.742,815,2.027,816,3.221,817,3.221,818,2.381,819,3.221,820,3.221,821,3.221,822,3.221,823,3.221,831,1.093,833,3.221,836,2.381,837,5.008,838,2.919,839,2.919,840,2.919,841,2.919,842,3.948,843,2.919,844,2.919,845,2.919,846,2.919,847,2.919,848,2.919,849,2.919,850,2.919,851,2.919,852,2.919,853,2.919,854,2.919,855,2.919,856,2.919,857,2.919,858,2.919,859,2.919,860,2.919,861,2.919,862,2.919,863,2.919,864,2.919,865,3.948,866,4.474,867,3.948,868,2.919,869,2.919,870,2.919,871,2.919,872,2.919,873,2.919,874,2.919,875,2.381,876,2.919,877,2.919,878,4.474,879,2.381,880,2.919,881,2.919,882,2.919,883,2.919,884,2.919,885,5.008,886,2.919,887,2.919,888,2.919,889,2.919,890,2.919]],["title/index.html",[9,0.273,891,2.374]],["body/index.html",[2,1.642,18,0.044,23,1.888,66,2.423,72,0.036,73,0.036,75,2.37,76,2.363,146,1.642,152,1.888,155,2.115,158,2.717,296,3.311,506,2.717,522,2.079,715,2.363,752,2.717,769,3.541,770,2.879,771,3.192,772,3.192,773,3.192,774,3.192,891,3.192,892,3.913,893,3.913]],["title/modules.html",[751,2.379]],["body/modules.html",[18,0.04,72,0.04,73,0.04,751,2.749,769,2.749,894,4.553,895,4.553,896,4.553,897,4.553]],["title/properties.html",[10,0.725,826,1.995]],["body/properties.html",[10,0.949,18,0.042,72,0.04,73,0.04,619,2.431,898,4.575]],["title/miscellaneous/typealiases.html",[831,0.916,899,3.491]],["body/miscellaneous/typealiases.html",[9,0.392,16,0.76,17,0.623,18,0.038,54,1.029,72,0.038,73,0.038,194,2.524,250,2.524,251,2.995,253,2.081,254,1.658,266,1.658,267,2.081,268,2.578,280,2.903,288,4.047,314,2.524,325,1.969,386,4.047,437,3.41,438,3.41,439,3.41,440,3.41,441,3.41,831,1.565,900,4.18,901,4.18,902,5.29]],["title/miscellaneous/variables.html",[831,0.916,903,2.848]],["body/miscellaneous/variables.html",[9,0.245,12,2.24,16,0.766,17,0.52,18,0.045,19,0.473,54,1.062,56,2.091,61,1.774,64,0.777,70,1.22,72,0.028,73,0.028,89,1.573,111,1.916,123,1.093,129,1.774,130,2.349,150,1.384,152,0.871,153,1.578,170,2.125,182,1.72,189,1.573,207,1.809,254,0.871,259,1.227,266,1.409,286,3.438,299,2.978,305,2.125,329,1.384,357,2.24,377,3.923,389,2.125,399,3.462,420,2.125,435,2.125,474,2.125,522,1.384,582,3.923,584,1.573,585,1.809,586,2.927,598,2.535,609,2.204,611,2.904,612,2.758,613,2.204,614,1.809,615,1.809,616,2.204,617,1.809,618,2.204,619,1.384,620,2.204,641,1.809,672,1.809,673,2.204,705,2.125,755,1.809,800,3.923,801,3.726,804,3.438,805,2.978,806,2.978,807,2.978,808,3.726,809,2.978,810,2.978,811,2.978,812,2.125,813,2.978,831,0.975,875,2.125,879,2.125,903,2.125,904,4.215,905,2.605,906,4.809,907,3.651,908,3.651,909,2.605,910,2.605,911,4.568,912,2.605,913,2.605,914,2.605,915,2.605,916,2.605,917,2.605,918,2.605,919,3.651,920,2.605,921,3.651,922,2.605,923,2.605,924,4.215,925,2.605,926,3.651,927,2.605,928,3.651,929,2.605,930,3.651,931,2.605,932,2.605,933,2.605,934,2.605,935,2.605,936,2.605,937,2.605,938,2.605,939,2.605,940,5.378,941,4.809,942,2.605,943,2.605,944,2.605,945,2.605,946,2.605,947,2.605,948,2.605,949,2.605,950,2.605,951,2.605,952,2.605,953,2.605,954,2.605,955,2.605,956,2.605,957,2.605,958,2.605,959,2.605]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":523,"title":{},"body":{"components/MapComponent.html":{}}}],["0.0.1",{"_index":898,"title":{},"body":{"properties.html":{}}}],["1",{"_index":66,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"index.html":{}}}],["1/1",{"_index":803,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":497,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["14.0.3",{"_index":830,"title":{},"body":{"dependencies.html":{}}}],["1f5aec",{"_index":358,"title":{},"body":{"components/MapComponent.html":{}}}],["2",{"_index":522,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["2.4.0",{"_index":828,"title":{},"body":{"dependencies.html":{}}}],["2022",{"_index":519,"title":{},"body":{"components/MapComponent.html":{}}}],["29/29",{"_index":814,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":892,"title":{},"body":{"index.html":{}}}],["3/3",{"_index":799,"title":{},"body":{"coverage.html":{}}}],["39;01&#39",{"_index":423,"title":{},"body":{"components/MapComponent.html":{}}}],["39;034030000000&#39",{"_index":424,"title":{},"body":{"components/MapComponent.html":{}}}],["39;all",{"_index":414,"title":{},"body":{"components/MapComponent.html":{}}}],["39;only",{"_index":419,"title":{},"body":{"components/MapComponent.html":{}}}],["39;show",{"_index":426,"title":{},"body":{"components/MapComponent.html":{}}}],["4/4",{"_index":795,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":797,"title":{},"body":{"coverage.html":{}}}],["500px",{"_index":381,"title":{},"body":{"components/MapComponent.html":{}}}],["53.1434501",{"_index":374,"title":{},"body":{"components/MapComponent.html":{}}}],["6",{"_index":893,"title":{},"body":{"index.html":{}}}],["6/6",{"_index":798,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":406,"title":{},"body":{"components/MapComponent.html":{}}}],["7/7",{"_index":796,"title":{},"body":{"coverage.html":{}}}],["8.2145521",{"_index":375,"title":{},"body":{"components/MapComponent.html":{}}}],["a0a0a0",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abc123",{"_index":863,"title":{},"body":{"miscellaneous/functions.html":{}}}],["accessors",{"_index":177,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["activated",{"_index":739,"title":{},"body":{"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["activatedroutesnapshot",{"_index":36,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["active",{"_index":171,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["actual_component",{"_index":157,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["actually",{"_index":321,"title":{},"body":{"components/MapComponent.html":{}}}],["adds",{"_index":218,"title":{},"body":{"components/IonIconComponent.html":{}}}],["administration",{"_index":835,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["afterviewinit",{"_index":283,"title":{},"body":{"components/MapComponent.html":{}}}],["alias",{"_index":437,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":900,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alive",{"_index":98,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["allow",{"_index":216,"title":{},"body":{"components/IonIconComponent.html":{}}}],["allows",{"_index":112,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["already",{"_index":593,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["always",{"_index":350,"title":{},"body":{"components/MapComponent.html":{}}}],["angular",{"_index":228,"title":{},"body":{"components/IonIconComponent.html":{}}}],["angular/common",{"_index":779,"title":{},"body":{"modules/WisdomModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":605,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["angular/core",{"_index":35,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"modules/WisdomModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":38,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["any).options.padding",{"_index":496,"title":{},"body":{"components/MapComponent.html":{}}}],["api",{"_index":612,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["api_url",{"_index":616,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["application/json",{"_index":674,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["arg0",{"_index":909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":28,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["array.from(this.selectedshapes[layerkey",{"_index":580,"title":{},"body":{"components/MapComponent.html":{}}}],["async",{"_index":642,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["asynchronously",{"_index":636,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["attention",{"_index":333,"title":{},"body":{"components/MapComponent.html":{}}}],["attribute",{"_index":238,"title":{},"body":{"components/IonIconComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["attribution",{"_index":515,"title":{},"body":{"components/MapComponent.html":{}}}],["automatically",{"_index":763,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["await",{"_index":485,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["back",{"_index":686,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["base",{"_index":804,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["behaviorsubject",{"_index":40,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{}}}],["beware",{"_index":873,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bkg",{"_index":518,"title":{},"body":{"components/MapComponent.html":{}}}],["boolean",{"_index":116,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["box",{"_index":258,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["breadcrumb",{"_index":1,"title":{"interfaces/Breadcrumb.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"coverage.html":{}}}],["breadcrumbs",{"_index":46,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{}}}],["breadcrumbs'},{'name",{"_index":149,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["breadcrumbs.component.html",{"_index":97,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["breadcrumbs.service",{"_index":134,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["breadcrumbs/breadcrumbs.component",{"_index":785,"title":{},"body":{"modules/WisdomModule.html":{}}}],["breadcrumbscomponent",{"_index":75,"title":{"components/BreadcrumbsComponent.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["breadcrumbsservice",{"_index":50,"title":{"injectables/BreadcrumbsService.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"coverage.html":{}}}],["breadcrumb}s",{"_index":53,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["browse",{"_index":897,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":894,"title":{},"body":{"modules.html":{}}}],["bulma",{"_index":167,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["bulma/bulma",{"_index":786,"title":{},"body":{"modules/WisdomModule.html":{}}}],["bulmaistoggleabledirective",{"_index":155,"title":{"directives/BulmaIsToggleableDirective.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["button",{"_index":928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["button.style.backgroundimage",{"_index":929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cache",{"_index":641,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["cache.ts",{"_index":806,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cached",{"_index":591,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedkeys",{"_index":663,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedquery",{"_index":650,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedquery.box",{"_index":662,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedquery.shapes",{"_index":657,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["callback",{"_index":908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":730,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["canactivate(route",{"_index":735,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["causing",{"_index":871,"title":{},"body":{"miscellaneous/functions.html":{}}}],["center",{"_index":286,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["centercontent",{"_index":919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["certain",{"_index":720,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["check",{"_index":108,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["class",{"_index":49,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"modules/WisdomModule.html":{}}}],["classes",{"_index":172,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["classes.trim().split(/\\s",{"_index":201,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["clear",{"_index":502,"title":{},"body":{"components/MapComponent.html":{}}}],["click",{"_index":176,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"interfaces/Marker.html":{}}}],["clickable",{"_index":90,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["clicked",{"_index":184,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["clicking",{"_index":168,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["client",{"_index":626,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cluster_wisdommodule",{"_index":771,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["cluster_wisdommodule_declarations",{"_index":773,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["cluster_wisdommodule_exports",{"_index":772,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["code",{"_index":276,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{}}}],["collected",{"_index":81,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["collecting",{"_index":45,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["color",{"_index":525,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["commonmodule",{"_index":778,"title":{},"body":{"modules/WisdomModule.html":{}}}],["complaining",{"_index":233,"title":{},"body":{"components/IonIconComponent.html":{}}}],["component",{"_index":74,"title":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["component_template",{"_index":148,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["components",{"_index":76,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"index.html":{}}}],["config",{"_index":440,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["considered",{"_index":86,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["const",{"_index":487,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["constructor",{"_index":103,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["constructor(elref",{"_index":221,"title":{},"body":{"components/IonIconComponent.html":{}}}],["constructor(http",{"_index":698,"title":{},"body":{"injectables/MapService.html":{}}}],["constructor(private",{"_index":135,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["constructor(router",{"_index":731,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["constructor(service",{"_index":104,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{}}}],["container",{"_index":582,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["container.addeventlistener(\"click",{"_index":927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["containing",{"_index":262,"title":{},"body":{"interfaces/LayerData.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{}}}],["content",{"_index":673,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":676,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["context/use",{"_index":611,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["control",{"_index":399,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["coordinates",{"_index":261,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{}}}],["corner",{"_index":260,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["correct",{"_index":230,"title":{},"body":{"components/IonIconComponent.html":{}}}],["coverage",{"_index":791,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covering",{"_index":945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creating",{"_index":704,"title":{},"body":{"interfaces/Marker.html":{}}}],["current",{"_index":87,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["currently",{"_index":189,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/variables.html":{}}}],["curtain",{"_index":944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["curtain.ts",{"_index":809,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":705,"title":{},"body":{"interfaces/Marker.html":{},"miscellaneous/variables.html":{}}}],["d35a0c",{"_index":352,"title":{},"body":{"components/MapComponent.html":{}}}],["data",{"_index":254,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["data.box[0",{"_index":554,"title":{},"body":{"components/MapComponent.html":{}}}],["data.box[2",{"_index":555,"title":{},"body":{"components/MapComponent.html":{}}}],["data.shapes",{"_index":547,"title":{},"body":{"components/MapComponent.html":{}}}],["data.ts",{"_index":251,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["db",{"_index":586,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["db.createobjectstore(\"queries",{"_index":634,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db.createobjectstore(\"shapes",{"_index":635,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db.deleteobjectstore(\"queries",{"_index":632,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db.deleteobjectstore(\"shapes",{"_index":633,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db_name",{"_index":618,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbschema",{"_index":588,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["de",{"_index":517,"title":{},"body":{"components/MapComponent.html":{}}}],["de/by",{"_index":521,"title":{},"body":{"components/MapComponent.html":{}}}],["declarations",{"_index":776,"title":{},"body":{"modules/WisdomModule.html":{}}}],["decorators",{"_index":185,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{}}}],["default",{"_index":129,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":377,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":105,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["dependencies",{"_index":770,"title":{"dependencies.html":{}},"body":{"modules/WisdomModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{}}}],["destroy",{"_index":118,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["determine",{"_index":941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deterministically",{"_index":857,"title":{},"body":{"miscellaneous/functions.html":{}}}],["digit",{"_index":846,"title":{},"body":{"miscellaneous/functions.html":{}}}],["direct",{"_index":724,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["direction",{"_index":532,"title":{},"body":{"components/MapComponent.html":{}}}],["directive",{"_index":146,"title":{"directives/BulmaIsToggleableDirective.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"coverage.html":{},"index.html":{}}}],["directives",{"_index":154,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["directly",{"_index":235,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["disable",{"_index":948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["display",{"_index":62,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"miscellaneous/enumerations.html":{}}}],["displayed",{"_index":20,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{}}}],["displaying",{"_index":281,"title":{},"body":{"components/MapComponent.html":{}}}],["displaylayer",{"_index":505,"title":{},"body":{"components/MapComponent.html":{}}}],["displayname",{"_index":475,"title":{},"body":{"components/MapComponent.html":{}}}],["displays",{"_index":263,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["district",{"_index":427,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/enumerations.html":{}}}],["div",{"_index":925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dl",{"_index":520,"title":{},"body":{"components/MapComponent.html":{}}}],["docs",{"_index":337,"title":{},"body":{"components/MapComponent.html":{}}}],["documentation",{"_index":792,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":78,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["dot",{"_index":848,"title":{},"body":{"miscellaneous/functions.html":{}}}],["e.g",{"_index":882,"title":{},"body":{"miscellaneous/functions.html":{}}}],["element",{"_index":30,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["elementclasses",{"_index":178,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["elementclasses(classes",{"_index":199,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["elementref",{"_index":222,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["elements",{"_index":402,"title":{},"body":{"components/MapComponent.html":{}}}],["elref",{"_index":224,"title":{},"body":{"components/IonIconComponent.html":{}}}],["emit",{"_index":367,"title":{},"body":{"components/MapComponent.html":{}}}],["emitselection",{"_index":297,"title":{},"body":{"components/MapComponent.html":{}}}],["emitted",{"_index":315,"title":{},"body":{"components/MapComponent.html":{}}}],["empty",{"_index":330,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["end",{"_index":847,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enforce",{"_index":438,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["ensuring",{"_index":113,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["entries",{"_index":734,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["entry",{"_index":767,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["enumerations",{"_index":832,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":808,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["event",{"_index":710,"title":{},"body":{"interfaces/Marker.html":{}}}],["eventemitter",{"_index":363,"title":{},"body":{"components/MapComponent.html":{}}}],["everything",{"_index":331,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["evt",{"_index":714,"title":{},"body":{"interfaces/Marker.html":{}}}],["exactly",{"_index":421,"title":{},"body":{"components/MapComponent.html":{}}}],["example",{"_index":409,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["executed",{"_index":183,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["expects",{"_index":722,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["export",{"_index":43,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["exported",{"_index":757,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["exports",{"_index":777,"title":{},"body":{"modules/WisdomModule.html":{}}}],["extends",{"_index":587,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["extension",{"_index":933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fails",{"_index":728,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["false",{"_index":111,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/variables.html":{}}}],["feature",{"_index":528,"title":{},"body":{"components/MapComponent.html":{}}}],["feature.properties.key",{"_index":536,"title":{},"body":{"components/MapComponent.html":{}}}],["fetch",{"_index":622,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetched",{"_index":482,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetched[layerkey",{"_index":484,"title":{},"body":{"components/MapComponent.html":{}}}],["fetchlayerdata",{"_index":643,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetchlayerdata(resolution",{"_index":700,"title":{},"body":{"injectables/MapService.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{}}}],["find",{"_index":241,"title":{},"body":{"components/IonIconComponent.html":{},"miscellaneous/functions.html":{}}}],["firstvaluefrom",{"_index":608,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["firstvaluefrom(this.http.get(`${api_url",{"_index":671,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["flat",{"_index":746,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["flex",{"_index":920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["following",{"_index":318,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["force",{"_index":639,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["found",{"_index":886,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fragment",{"_index":8,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["fragments",{"_index":52,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{}}}],["full_res",{"_index":413,"title":{},"body":{"components/MapComponent.html":{}}}],["fully",{"_index":114,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"miscellaneous/functions.html":{}}}],["function",{"_index":182,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":836,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":861,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generates",{"_index":856,"title":{},"body":{"miscellaneous/functions.html":{}}}],["geo",{"_index":256,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["geobasis",{"_index":516,"title":{},"body":{"components/MapComponent.html":{}}}],["geodata",{"_index":617,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["geojson",{"_index":267,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["geojsonlayer",{"_index":513,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonlayer.adddata(object.assign(shape.geojson",{"_index":548,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonlayer.addto(map",{"_index":551,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonobject",{"_index":268,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/typealiases.html":{}}}],["getelementclasses",{"_index":190,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["getresolvedurl",{"_index":819,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getresolvedurl(route",{"_index":838,"title":{},"body":{"miscellaneous/functions.html":{}}}],["give",{"_index":332,"title":{},"body":{"components/MapComponent.html":{}}}],["given",{"_index":329,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["gt",{"_index":853,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gt;&lt;/map&gt",{"_index":430,"title":{},"body":{"components/MapComponent.html":{}}}],["guard",{"_index":715,"title":{"guards/QueryParameterGuard.html":{}},"body":{"guards/QueryParameterGuard.html":{},"coverage.html":{},"index.html":{}}}],["guards",{"_index":717,"title":{},"body":{"guards/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{}}}],["handle",{"_index":950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handler",{"_index":711,"title":{},"body":{"interfaces/Marker.html":{}}}],["headers",{"_index":672,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["height",{"_index":287,"title":{},"body":{"components/MapComponent.html":{}}}],["height=&quot;70vh&quot",{"_index":411,"title":{},"body":{"components/MapComponent.html":{}}}],["here",{"_index":217,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["hex",{"_index":354,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["higher",{"_index":58,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["holds",{"_index":401,"title":{},"body":{"components/MapComponent.html":{}}}],["host",{"_index":180,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostbinding",{"_index":193,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostbinding(\"class",{"_index":197,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener",{"_index":195,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener(\"click",{"_index":202,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener('click",{"_index":186,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlisteners",{"_index":175,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hovering",{"_index":712,"title":{},"body":{"interfaces/Marker.html":{}}}],["html",{"_index":145,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["http",{"_index":610,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpclient",{"_index":601,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpcontext",{"_index":602,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpcontexttoken",{"_index":940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpheaders",{"_index":603,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpparams",{"_index":604,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["https://ionic.io/ionicons",{"_index":245,"title":{},"body":{"components/IonIconComponent.html":{}}}],["https://tile.openstreetmap.org/{z}/{x}/{y}.png",{"_index":403,"title":{},"body":{"components/MapComponent.html":{}}}],["https://wisdom04.vlba.uni",{"_index":339,"title":{},"body":{"components/MapComponent.html":{}}}],["icon",{"_index":12,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"interfaces/Marker.html":{},"miscellaneous/variables.html":{}}}],["icon'},{'name",{"_index":151,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["icon.component",{"_index":788,"title":{},"body":{"modules/WisdomModule.html":{}}}],["icon.component.ts",{"_index":210,"title":{},"body":{"components/IonIconComponent.html":{},"coverage.html":{}}}],["icon.component.ts:12",{"_index":223,"title":{},"body":{"components/IonIconComponent.html":{}}}],["icon.component.ts:31",{"_index":227,"title":{},"body":{"components/IonIconComponent.html":{}}}],["icon.setattribute(\"name",{"_index":932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon.setattribute(\"size",{"_index":935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon.style.color",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon.style.pointerevents",{"_index":931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon/ion",{"_index":209,"title":{},"body":{"components/IonIconComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{}}}],["icons",{"_index":212,"title":{},"body":{"components/IonIconComponent.html":{}}}],["idb",{"_index":607,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["idb.get(\"queries",{"_index":651,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["idb.transaction(\"shapes",{"_index":653,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["idb.transaction([\"queries",{"_index":687,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["identifier",{"_index":793,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":592,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["ignore",{"_index":640,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["implement",{"_index":322,"title":{},"body":{"components/MapComponent.html":{}}}],["implementing",{"_index":756,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["implements",{"_index":91,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["import",{"_index":33,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["imports",{"_index":790,"title":{},"body":{"modules/WisdomModule.html":{}}}],["include",{"_index":762,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexed",{"_index":598,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["indexeddb",{"_index":623,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["init",{"_index":126,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{}}}],["initialize",{"_index":916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":211,"title":{},"body":{"components/IonIconComponent.html":{}}}],["injectable",{"_index":34,"title":{"injectables/BreadcrumbsService.html":{},"injectables/MapService.html":{}},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":158,"title":{},"body":{"injectables/BreadcrumbsService.html":{},"injectables/MapService.html":{},"index.html":{}}}],["injected",{"_index":529,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["inner",{"_index":373,"title":{},"body":{"components/MapComponent.html":{}}}],["input",{"_index":194,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["input(\"center",{"_index":447,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"class",{"_index":196,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["input(\"height",{"_index":443,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"layers",{"_index":455,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"layerselectable",{"_index":458,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"markers",{"_index":460,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"scrollwheelzoom",{"_index":451,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"selectedcolor",{"_index":454,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"tileurl",{"_index":445,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"unselectedcolor",{"_index":453,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"zoom",{"_index":449,"title":{},"body":{"components/MapComponent.html":{}}}],["inputcenter",{"_index":448,"title":{},"body":{"components/MapComponent.html":{}}}],["inputheight",{"_index":444,"title":{},"body":{"components/MapComponent.html":{}}}],["inputlayers",{"_index":306,"title":{},"body":{"components/MapComponent.html":{}}}],["inputlayers(layerconfig",{"_index":456,"title":{},"body":{"components/MapComponent.html":{}}}],["inputlayerselectable",{"_index":459,"title":{},"body":{"components/MapComponent.html":{}}}],["inputmarkers",{"_index":307,"title":{},"body":{"components/MapComponent.html":{}}}],["inputmarkers(markers",{"_index":461,"title":{},"body":{"components/MapComponent.html":{}}}],["inputs",{"_index":174,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["inputscrollwheelzoom",{"_index":452,"title":{},"body":{"components/MapComponent.html":{}}}],["inputtileurl",{"_index":446,"title":{},"body":{"components/MapComponent.html":{}}}],["inputzoom",{"_index":450,"title":{},"body":{"components/MapComponent.html":{}}}],["instant",{"_index":869,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interact",{"_index":310,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Breadcrumb.html":{},"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{}},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Breadcrumb.html":{},"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"index.html":{}}}],["internally",{"_index":366,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["intersection",{"_index":327,"title":{},"body":{"components/MapComponent.html":{}}}],["invert",{"_index":435,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["invertselection",{"_index":907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invertselection(options",{"_index":939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invertselectioncontrol",{"_index":503,"title":{},"body":{"components/MapComponent.html":{}}}],["invertselectioncontrol.addto(map",{"_index":564,"title":{},"body":{"components/MapComponent.html":{}}}],["ion",{"_index":150,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"miscellaneous/variables.html":{}}}],["ioniconcomponent",{"_index":23,"title":{"components/IonIconComponent.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["ionicons",{"_index":213,"title":{},"body":{"components/IonIconComponent.html":{}}}],["isactive",{"_index":173,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["isallset",{"_index":100,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["items",{"_index":922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iterate",{"_index":874,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iterated",{"_index":729,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["itself",{"_index":226,"title":{},"body":{"components/IonIconComponent.html":{}}}],["join",{"_index":207,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["js",{"_index":220,"title":{},"body":{"components/IonIconComponent.html":{}}}],["json",{"_index":397,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["justify",{"_index":923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["k",{"_index":669,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["k.split",{"_index":481,"title":{},"body":{"components/MapComponent.html":{}}}],["k.substring(0",{"_index":668,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["key",{"_index":272,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{}}}],["key[0",{"_index":594,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keys",{"_index":325,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/typealiases.html":{}}}],["keys.length",{"_index":665,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keys.map(k",{"_index":667,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keys?.map(k",{"_index":480,"title":{},"body":{"components/MapComponent.html":{}}}],["l",{"_index":265,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{}}}],["l.control.extend",{"_index":913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.control.layers",{"_index":501,"title":{},"body":{"components/MapComponent.html":{}}}],["l.controloptions",{"_index":912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.divicon",{"_index":709,"title":{},"body":{"interfaces/Marker.html":{}}}],["l.domutil.create",{"_index":924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.geojson(undefined",{"_index":514,"title":{},"body":{"components/MapComponent.html":{}}}],["l.icon",{"_index":708,"title":{},"body":{"interfaces/Marker.html":{}}}],["l.layer",{"_index":395,"title":{},"body":{"components/MapComponent.html":{}}}],["l.map",{"_index":389,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["l.map(nativemapelement",{"_index":490,"title":{},"body":{"components/MapComponent.html":{}}}],["l.marker(marker.coordinates",{"_index":570,"title":{},"body":{"components/MapComponent.html":{}}}],["l.markerclustergroup",{"_index":566,"title":{},"body":{"components/MapComponent.html":{}}}],["l.path",{"_index":537,"title":{},"body":{"components/MapComponent.html":{}}}],["l.tilelayer(this.tileurl).addto(map",{"_index":498,"title":{},"body":{"components/MapComponent.html":{}}}],["l.util.setoptions(this",{"_index":917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["large",{"_index":936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["later",{"_index":530,"title":{},"body":{"components/MapComponent.html":{}}}],["latitude",{"_index":379,"title":{},"body":{"components/MapComponent.html":{}}}],["layer",{"_index":253,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/typealiases.html":{}}}],["layer.bindtooltip(feature.properties.name",{"_index":531,"title":{},"body":{"components/MapComponent.html":{}}}],["layer.fire(\"click",{"_index":563,"title":{},"body":{"components/MapComponent.html":{}}}],["layer.on(\"click",{"_index":534,"title":{},"body":{"components/MapComponent.html":{}}}],["layerconfig",{"_index":288,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["layerdata",{"_index":249,"title":{"interfaces/LayerData.html":{}},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"coverage.html":{}}}],["layerdata.box",{"_index":697,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["layerdata.shapes",{"_index":691,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["layerdata[\"box",{"_index":621,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["layerkey",{"_index":386,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["layername",{"_index":579,"title":{},"body":{"components/MapComponent.html":{}}}],["layernames",{"_index":289,"title":{},"body":{"components/MapComponent.html":{}}}],["layers",{"_index":299,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["layers.push(layer",{"_index":546,"title":{},"body":{"components/MapComponent.html":{}}}],["layers]=&quot",{"_index":412,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol",{"_index":500,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.addbaselayer(geojsonlayer",{"_index":556,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.addto(map",{"_index":560,"title":{},"body":{"components/MapComponent.html":{}}}],["layerselectable",{"_index":300,"title":{},"body":{"components/MapComponent.html":{}}}],["lazily",{"_index":625,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["leads",{"_index":761,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["leaflet",{"_index":266,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["leaflet.markercluster",{"_index":436,"title":{},"body":{"components/MapComponent.html":{}}}],["leafletmouseevent",{"_index":713,"title":{},"body":{"interfaces/Marker.html":{}}}],["left",{"_index":21,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["legend",{"_index":144,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["length",{"_index":885,"title":{},"body":{"miscellaneous/functions.html":{}}}],["level",{"_index":362,"title":{},"body":{"components/MapComponent.html":{}}}],["link",{"_index":13,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{}}}],["list",{"_index":51,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["literal",{"_index":590,"title":{},"body":{"interfaces/MapDB.html":{}}}],["live",{"_index":121,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["lmarker",{"_index":569,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.addto(markerlayer",{"_index":577,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.bindtooltip(marker.tooltip",{"_index":574,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.on(\"click",{"_index":576,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.seticon(marker.icon",{"_index":572,"title":{},"body":{"components/MapComponent.html":{}}}],["loader",{"_index":614,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["loader.ts",{"_index":811,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["loading",{"_index":958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["long",{"_index":122,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["longer",{"_index":957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["longitude",{"_index":378,"title":{},"body":{"components/MapComponent.html":{}}}],["look",{"_index":638,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["lt;map",{"_index":410,"title":{},"body":{"components/MapComponent.html":{}}}],["lx",{"_index":434,"title":{},"body":{"components/MapComponent.html":{}}}],["lx.control.invertselection",{"_index":562,"title":{},"body":{"components/MapComponent.html":{}}}],["main",{"_index":947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["make",{"_index":239,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["makes",{"_index":119,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["making",{"_index":165,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["map",{"_index":153,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["map(str",{"_index":493,"title":{},"body":{"components/MapComponent.html":{}}}],["map.component.css",{"_index":285,"title":{},"body":{"components/MapComponent.html":{}}}],["map.fitbounds",{"_index":553,"title":{},"body":{"components/MapComponent.html":{}}}],["map.getrenderer(map",{"_index":495,"title":{},"body":{"components/MapComponent.html":{}}}],["map.on(\"baselayerchange",{"_index":558,"title":{},"body":{"components/MapComponent.html":{}}}],["map.removecontrol(invertselectioncontrol",{"_index":561,"title":{},"body":{"components/MapComponent.html":{}}}],["map.removecontrol(layerscontrol",{"_index":508,"title":{},"body":{"components/MapComponent.html":{}}}],["map.removelayer(this.selectedgeojsonlayer",{"_index":510,"title":{},"body":{"components/MapComponent.html":{}}}],["map.service",{"_index":433,"title":{},"body":{"components/MapComponent.html":{}}}],["map/map.component",{"_index":789,"title":{},"body":{"modules/WisdomModule.html":{}}}],["mapcomponent",{"_index":152,"title":{"components/MapComponent.html":{}},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mapcomponent.inputlayers",{"_index":441,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["mapdb",{"_index":583,"title":{"interfaces/MapDB.html":{}},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{}}}],["mapelement",{"_index":290,"title":{},"body":{"components/MapComponent.html":{}}}],["mapped",{"_index":388,"title":{},"body":{"components/MapComponent.html":{}}}],["maps",{"_index":282,"title":{},"body":{"components/MapComponent.html":{}}}],["mapservice",{"_index":308,"title":{"injectables/MapService.html":{}},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{}}}],["marker",{"_index":344,"title":{"interfaces/Marker.html":{}},"body":{"components/MapComponent.html":{},"interfaces/Marker.html":{},"coverage.html":{}}}],["marker.icon",{"_index":571,"title":{},"body":{"components/MapComponent.html":{}}}],["marker.onclick",{"_index":575,"title":{},"body":{"components/MapComponent.html":{}}}],["marker.tooltip",{"_index":573,"title":{},"body":{"components/MapComponent.html":{}}}],["markerlayer",{"_index":565,"title":{},"body":{"components/MapComponent.html":{}}}],["markerlayer.addto(map",{"_index":578,"title":{},"body":{"components/MapComponent.html":{}}}],["markerlayer.removefrom(map",{"_index":568,"title":{},"body":{"components/MapComponent.html":{}}}],["markers",{"_index":291,"title":{},"body":{"components/MapComponent.html":{},"interfaces/Marker.html":{}}}],["marker}s",{"_index":463,"title":{},"body":{"components/MapComponent.html":{}}}],["matching",{"_index":73,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["meaning",{"_index":439,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["message",{"_index":943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":94,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/ShapeData.html":{}}}],["method",{"_index":870,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methods",{"_index":99,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["miscellaneous",{"_index":831,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mixed",{"_index":425,"title":{},"body":{"components/MapComponent.html":{}}}],["modernized",{"_index":858,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modifies",{"_index":236,"title":{},"body":{"components/IonIconComponent.html":{}}}],["module",{"_index":752,"title":{"modules/WisdomModule.html":{}},"body":{"interfaces/WisdomInterface.html":{},"index.html":{}}}],["modules",{"_index":751,"title":{"modules.html":{}},"body":{"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"modules.html":{}}}],["more",{"_index":740,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["mouse",{"_index":349,"title":{},"body":{"components/MapComponent.html":{}}}],["mouseevent",{"_index":910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["municipal",{"_index":415,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/enumerations.html":{}}}],["name",{"_index":19,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name(name",{"_index":247,"title":{},"body":{"components/IonIconComponent.html":{}}}],["names",{"_index":242,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["namespace",{"_index":768,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["native",{"_index":237,"title":{},"body":{"components/IonIconComponent.html":{}}}],["nativemapelement",{"_index":488,"title":{},"body":{"components/MapComponent.html":{}}}],["necessary",{"_index":231,"title":{},"body":{"components/IonIconComponent.html":{}}}],["needed",{"_index":128,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{}}}],["needs",{"_index":334,"title":{},"body":{"components/MapComponent.html":{}}}],["new",{"_index":56,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":141,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["ngafterviewinit",{"_index":298,"title":{},"body":{"components/MapComponent.html":{}}}],["ngmodule",{"_index":780,"title":{},"body":{"modules/WisdomModule.html":{}}}],["ngondestroy",{"_index":101,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["ngoninit",{"_index":102,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{}}}],["ngx",{"_index":783,"title":{},"body":{"modules/WisdomModule.html":{}}}],["node",{"_index":169,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["nomenclature",{"_index":273,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["none",{"_index":930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["null",{"_index":324,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["num",{"_index":849,"title":{},"body":{"miscellaneous/functions.html":{}}}],["number",{"_index":64,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nutskey",{"_index":277,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["obj",{"_index":865,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":755,"title":{},"body":{"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.entries(config",{"_index":476,"title":{},"body":{"components/MapComponent.html":{}}}],["object.entries(layerdata",{"_index":511,"title":{},"body":{"components/MapComponent.html":{}}}],["object.entries(requests",{"_index":483,"title":{},"body":{"components/MapComponent.html":{}}}],["object.keys(layerdata).length",{"_index":559,"title":{},"body":{"components/MapComponent.html":{}}}],["observable",{"_index":39,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["observe",{"_index":69,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{}}}],["official",{"_index":243,"title":{},"body":{"components/IonIconComponent.html":{}}}],["oldenburg",{"_index":380,"title":{},"body":{"components/MapComponent.html":{}}}],["oldenburg.de/repos/service",{"_index":340,"title":{},"body":{"components/MapComponent.html":{}}}],["oldv",{"_index":631,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["onadd",{"_index":918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onclick",{"_index":706,"title":{},"body":{"interfaces/Marker.html":{}}}],["ondestroy",{"_index":93,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["one",{"_index":59,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{}}}],["oneachfeature",{"_index":527,"title":{},"body":{"components/MapComponent.html":{}}}],["oninit",{"_index":92,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{}}}],["only_keys",{"_index":418,"title":{},"body":{"components/MapComponent.html":{}}}],["onto",{"_index":351,"title":{},"body":{"components/MapComponent.html":{}}}],["opendb",{"_index":606,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["opendb(db_name",{"_index":629,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations",{"_index":656,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(querystore.put",{"_index":696,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(shapestore.put(shape",{"_index":692,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(store.get(key).then(shape",{"_index":658,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(tx.done",{"_index":660,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["option",{"_index":347,"title":{},"body":{"components/MapComponent.html":{}}}],["optional",{"_index":11,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["order",{"_index":881,"title":{},"body":{"miscellaneous/functions.html":{}}}],["osm",{"_index":405,"title":{},"body":{"components/MapComponent.html":{}}}],["otherwise",{"_index":887,"title":{},"body":{"miscellaneous/functions.html":{}}}],["out",{"_index":774,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["output",{"_index":368,"title":{},"body":{"components/MapComponent.html":{}}}],["outputs",{"_index":304,"title":{},"body":{"components/MapComponent.html":{}}}],["overview",{"_index":891,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":826,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":88,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["pairs",{"_index":385,"title":{},"body":{"components/MapComponent.html":{}}}],["param",{"_index":60,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["parameter.guard.ts",{"_index":719,"title":{},"body":{"guards/QueryParameterGuard.html":{},"coverage.html":{}}}],["parameter.guard.ts:25",{"_index":732,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["parameter.guard.ts:41",{"_index":738,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["parameters",{"_index":27,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["parameters[0",{"_index":269,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/ShapeData.html":{}}}],["params",{"_index":26,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["params.appendall({key",{"_index":666,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["params.set(\"resolution",{"_index":664,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["parse",{"_index":733,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["parsefloat(str",{"_index":494,"title":{},"body":{"components/MapComponent.html":{}}}],["parseint(this.inputzoom",{"_index":472,"title":{},"body":{"components/MapComponent.html":{}}}],["passed",{"_index":31,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["path",{"_index":535,"title":{},"body":{"components/MapComponent.html":{}}}],["path.bringtoback",{"_index":540,"title":{},"body":{"components/MapComponent.html":{}}}],["path.bringtofront",{"_index":543,"title":{},"body":{"components/MapComponent.html":{}}}],["path.setstyle({color",{"_index":539,"title":{},"body":{"components/MapComponent.html":{}}}],["peer",{"_index":829,"title":{},"body":{"dependencies.html":{}}}],["pipe(takewhile",{"_index":137,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["position",{"_index":914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["predefined",{"_index":862,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prepare",{"_index":645,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["presentation",{"_index":844,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pretty",{"_index":850,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prettyprintnum",{"_index":820,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["prettyprintnum(12345678",{"_index":852,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prettyprintnum(num",{"_index":843,"title":{},"body":{"miscellaneous/functions.html":{}}}],["print",{"_index":851,"title":{},"body":{"miscellaneous/functions.html":{}}}],["private",{"_index":55,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["promise",{"_index":644,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["promise.all(operations",{"_index":661,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["properly",{"_index":335,"title":{},"body":{"components/MapComponent.html":{}}}],["properties",{"_index":10,"title":{"properties.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"properties.html":{}}}],["provide",{"_index":753,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["providedin",{"_index":47,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["provides",{"_index":765,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["puzzle",{"_index":934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queries",{"_index":589,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["query",{"_index":14,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["querykey",{"_index":649,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["queryparameterguard",{"_index":716,"title":{"guards/QueryParameterGuard.html":{}},"body":{"guards/QueryParameterGuard.html":{},"coverage.html":{}}}],["queryparams",{"_index":726,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["querystore",{"_index":694,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["quot",{"_index":429,"title":{},"body":{"components/MapComponent.html":{}}}],["quot;12.345.678&quot",{"_index":854,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rawlayerdata",{"_index":670,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawlayerdata.shapes",{"_index":679,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawlayerdata.shapes.map(rawshape",{"_index":680,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawshape",{"_index":683,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawshape.geojson",{"_index":682,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawshape.nuts_key",{"_index":681,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["readonly",{"_index":627,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["readwrite",{"_index":688,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["received",{"_index":255,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["reconstruct",{"_index":600,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["record",{"_index":314,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["recreated",{"_index":840,"title":{},"body":{"miscellaneous/functions.html":{}}}],["redirect",{"_index":727,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["redirectto",{"_index":723,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["ref",{"_index":393,"title":{},"body":{"components/MapComponent.html":{}}}],["reference",{"_index":225,"title":{},"body":{"components/IonIconComponent.html":{}}}],["removes",{"_index":57,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["render",{"_index":229,"title":{},"body":{"components/IonIconComponent.html":{}}}],["renders",{"_index":370,"title":{},"body":{"components/MapComponent.html":{}}}],["reply",{"_index":859,"title":{},"body":{"miscellaneous/functions.html":{}}}],["represent",{"_index":252,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["representing",{"_index":278,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["represents",{"_index":595,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["request",{"_index":615,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["requested",{"_index":685,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["requests",{"_index":474,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["requests[layerkey",{"_index":478,"title":{},"body":{"components/MapComponent.html":{}}}],["required",{"_index":764,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["res",{"_index":890,"title":{},"body":{"miscellaneous/functions.html":{}}}],["reset",{"_index":506,"title":{},"body":{"components/MapComponent.html":{},"modules/WisdomModule.html":{},"index.html":{}}}],["resolution",{"_index":323,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["resolution&#39",{"_index":416,"title":{},"body":{"components/MapComponent.html":{}}}],["resolution.district",{"_index":428,"title":{},"body":{"components/MapComponent.html":{}}}],["resolution.municipal",{"_index":417,"title":{},"body":{"components/MapComponent.html":{}}}],["resolution.tokeylength(resolution",{"_index":648,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["resolutionnum",{"_index":647,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["resolutions",{"_index":834,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["resolved",{"_index":839,"title":{},"body":{"miscellaneous/functions.html":{}}}],["resolving",{"_index":328,"title":{},"body":{"components/MapComponent.html":{}}}],["respond",{"_index":336,"title":{},"body":{"components/MapComponent.html":{}}}],["responsetype",{"_index":675,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rest",{"_index":596,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rest/main/api/get",{"_index":341,"title":{},"body":{"components/MapComponent.html":{}}}],["results",{"_index":72,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":624,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["return",{"_index":70,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":597,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["returns",{"_index":115,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["right",{"_index":85,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["root",{"_index":48,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["route",{"_index":721,"title":{},"body":{"guards/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{}}}],["route.data[\"queryparams",{"_index":745,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["route.data[\"redirect",{"_index":742,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["route.queryparams[param",{"_index":747,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["router",{"_index":24,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"guards/QueryParameterGuard.html":{}}}],["router#parseurl",{"_index":725,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["routermodule",{"_index":781,"title":{},"body":{"modules/WisdomModule.html":{}}}],["routerstatesnapshot",{"_index":737,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["row",{"_index":84,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["run",{"_index":954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":42,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["schema",{"_index":585,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["schema_v",{"_index":620,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["scopes",{"_index":759,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["scroll",{"_index":348,"title":{},"body":{"components/MapComponent.html":{}}}],["scrollwheelzoom",{"_index":301,"title":{},"body":{"components/MapComponent.html":{}}}],["see",{"_index":338,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["select",{"_index":926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["selectable",{"_index":343,"title":{},"body":{"components/MapComponent.html":{}}}],["selected",{"_index":305,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["selectedcolor",{"_index":302,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedgeojsonlayer",{"_index":292,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedlayer",{"_index":293,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes",{"_index":294,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes.add(key",{"_index":544,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes.delete(key",{"_index":541,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes.has(key",{"_index":538,"title":{},"body":{"components/MapComponent.html":{}}}],["selection",{"_index":316,"title":{},"body":{"components/MapComponent.html":{}}}],["selection.ts",{"_index":813,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selector",{"_index":95,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["sent",{"_index":942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["separated",{"_index":83,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"miscellaneous/functions.html":{}}}],["server",{"_index":257,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["service",{"_index":44,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":25,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{}}}],["set(index",{"_index":63,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["set(use_api_url",{"_index":677,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["set(use_loader",{"_index":678,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["setelementclasses(classes",{"_index":191,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["setinputlayers(layerconfig",{"_index":408,"title":{},"body":{"components/MapComponent.html":{}}}],["setinputmarkers(markers",{"_index":431,"title":{},"body":{"components/MapComponent.html":{}}}],["setname(name",{"_index":246,"title":{},"body":{"components/IonIconComponent.html":{}}}],["sets",{"_index":372,"title":{},"body":{"components/MapComponent.html":{}}}],["setter",{"_index":234,"title":{},"body":{"components/IonIconComponent.html":{}}}],["shape",{"_index":271,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["shape.key",{"_index":550,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shape.name",{"_index":549,"title":{},"body":{"components/MapComponent.html":{}}}],["shapedata",{"_index":264,"title":{"interfaces/ShapeData.html":{}},"body":{"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"coverage.html":{}}}],["shapekeys",{"_index":690,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapekeys.push(shape.key",{"_index":693,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapes",{"_index":259,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/variables.html":{}}}],["shapes.push(shape",{"_index":659,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapestore",{"_index":689,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["show",{"_index":420,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["shown",{"_index":953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["simply",{"_index":599,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["single",{"_index":270,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["slash",{"_index":82,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["snapshot",{"_index":741,"title":{},"body":{"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["solution",{"_index":841,"title":{},"body":{"miscellaneous/functions.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["split",{"_index":492,"title":{},"body":{"components/MapComponent.html":{}}}],["split(\"is",{"_index":206,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["src/.../invert",{"_index":905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../layer",{"_index":901,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../map.component.ts",{"_index":902,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../map.service.ts",{"_index":904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../resolution.ts",{"_index":833,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../use",{"_index":906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../util.ts",{"_index":837,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts",{"_index":80,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"coverage.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:19",{"_index":131,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:21",{"_index":106,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:33",{"_index":124,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:48",{"_index":107,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:57",{"_index":117,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts",{"_index":6,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"coverage.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:29",{"_index":161,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:34",{"_index":162,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:44",{"_index":160,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:51",{"_index":159,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/bulma/bulma",{"_index":163,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"coverage.html":{}}}],["src/lib/guards/query",{"_index":718,"title":{},"body":{"guards/QueryParameterGuard.html":{},"coverage.html":{}}}],["src/lib/http",{"_index":800,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/ion",{"_index":208,"title":{},"body":{"components/IonIconComponent.html":{},"coverage.html":{}}}],["src/lib/map/invert",{"_index":812,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/map/layer",{"_index":250,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/map/map.component.ts",{"_index":280,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/map/map.component.ts:131",{"_index":313,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:139",{"_index":383,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:145",{"_index":384,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:150",{"_index":387,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:153",{"_index":342,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:156",{"_index":345,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:160",{"_index":394,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:163",{"_index":390,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:170",{"_index":400,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:176",{"_index":398,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:178",{"_index":396,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:181",{"_index":364,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:185",{"_index":309,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:196",{"_index":371,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:226",{"_index":369,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:352",{"_index":365,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:53",{"_index":392,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:56",{"_index":312,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:58",{"_index":382,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:61",{"_index":355,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:63",{"_index":404,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:66",{"_index":311,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:68",{"_index":376,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:71",{"_index":361,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:73",{"_index":407,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:79",{"_index":346,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:82",{"_index":359,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:84",{"_index":353,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.service.ts",{"_index":584,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/map/map.service.ts:70",{"_index":699,"title":{},"body":{"injectables/MapService.html":{}}}],["src/lib/map/map.service.ts:97",{"_index":701,"title":{},"body":{"injectables/MapService.html":{}}}],["src/lib/map/marker.ts",{"_index":703,"title":{},"body":{"interfaces/Marker.html":{},"coverage.html":{}}}],["src/lib/map/resolution.ts",{"_index":815,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/lib/util.ts",{"_index":818,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/wisdom.module.ts",{"_index":775,"title":{},"body":{"modules/WisdomModule.html":{}}}],["src/wisdominterface.ts",{"_index":749,"title":{},"body":{"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["stackoverflow",{"_index":842,"title":{},"body":{"miscellaneous/functions.html":{}}}],["state",{"_index":736,"title":{},"body":{"guards/QueryParameterGuard.html":{},"miscellaneous/enumerations.html":{}}}],["statements",{"_index":794,"title":{},"body":{"coverage.html":{}}}],["stops",{"_index":232,"title":{},"body":{"components/IonIconComponent.html":{}}}],["store",{"_index":654,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["stored",{"_index":637,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["str",{"_index":860,"title":{},"body":{"miscellaneous/functions.html":{}}}],["string",{"_index":16,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":29,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["stringtocolor",{"_index":821,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stringtocolor(str",{"_index":855,"title":{},"body":{"miscellaneous/functions.html":{}}}],["style",{"_index":524,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["styles",{"_index":279,"title":{},"body":{"components/MapComponent.html":{}}}],["styleurls",{"_index":284,"title":{},"body":{"components/MapComponent.html":{}}}],["subject",{"_index":41,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{}}}],["subscribe(next",{"_index":139,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["such",{"_index":754,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["support",{"_index":895,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":120,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["svg",{"_index":896,"title":{},"body":{"modules.html":{}}}],["swap",{"_index":877,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sync",{"_index":872,"title":{},"body":{"miscellaneous/functions.html":{}}}],["t",{"_index":866,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":825,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":824,"title":{},"body":{"coverage.html":{}}}],["takewhile",{"_index":133,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["template",{"_index":77,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["templateurl",{"_index":96,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["territorial",{"_index":274,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["text",{"_index":15,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{}}}],["therefore",{"_index":89,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["these&#39",{"_index":422,"title":{},"body":{"components/MapComponent.html":{}}}],["things",{"_index":166,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["third",{"_index":845,"title":{},"body":{"miscellaneous/functions.html":{}}}],["this.alive",{"_index":138,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.center",{"_index":469,"title":{},"body":{"components/MapComponent.html":{}}}],["this.classes",{"_index":200,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.classes.join",{"_index":198,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.classes.push(\"is",{"_index":204,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.elementclasses",{"_index":205,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.elref.nativeelement?.setattribute(\"name",{"_index":248,"title":{},"body":{"components/IonIconComponent.html":{}}}],["this.emitselection",{"_index":545,"title":{},"body":{"components/MapComponent.html":{}}}],["this.fragments",{"_index":140,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.fragments.includes(undefined",{"_index":142,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.fragments.length",{"_index":65,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.fragments[index",{"_index":67,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.height",{"_index":465,"title":{},"body":{"components/MapComponent.html":{}}}],["this.idb",{"_index":628,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["this.inputcenter",{"_index":468,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputheight",{"_index":464,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputlayerselectable",{"_index":533,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputscrollwheelzoom",{"_index":491,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputtileurl",{"_index":466,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputzoom",{"_index":470,"title":{},"body":{"components/MapComponent.html":{}}}],["this.isactive",{"_index":203,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.layerconfig.next(layerconfig",{"_index":457,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerconfig.subscribe(async",{"_index":473,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerdata.next(fetched",{"_index":486,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerdata.subscribe(layerdata",{"_index":504,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layernames[key",{"_index":557,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layernames[layerkey",{"_index":477,"title":{},"body":{"components/MapComponent.html":{}}}],["this.map",{"_index":499,"title":{},"body":{"components/MapComponent.html":{}}}],["this.mapelement.nativeelement",{"_index":489,"title":{},"body":{"components/MapComponent.html":{}}}],["this.markers.next(markers",{"_index":462,"title":{},"body":{"components/MapComponent.html":{}}}],["this.markers.subscribe(markers",{"_index":567,"title":{},"body":{"components/MapComponent.html":{}}}],["this.router.parseurl(redirect",{"_index":744,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["this.selected.emit",{"_index":581,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedcolor",{"_index":542,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedgeojsonlayer",{"_index":509,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedlayer",{"_index":552,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedshapes",{"_index":507,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedshapes[key",{"_index":512,"title":{},"body":{"components/MapComponent.html":{}}}],["this.service.fetchlayerdata",{"_index":479,"title":{},"body":{"components/MapComponent.html":{}}}],["this.service.observe",{"_index":136,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.subject.asobservable",{"_index":71,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.subject.next(this.fragments",{"_index":68,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.tileurl",{"_index":467,"title":{},"body":{"components/MapComponent.html":{}}}],["this.unselectedcolor",{"_index":526,"title":{},"body":{"components/MapComponent.html":{}}}],["this.zoom",{"_index":471,"title":{},"body":{"components/MapComponent.html":{}}}],["through",{"_index":875,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["tile",{"_index":356,"title":{},"body":{"components/MapComponent.html":{}}}],["tileurl",{"_index":295,"title":{},"body":{"components/MapComponent.html":{}}}],["times",{"_index":959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todo",{"_index":320,"title":{},"body":{"components/MapComponent.html":{}}}],["toenum",{"_index":816,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["toenum(length",{"_index":884,"title":{},"body":{"miscellaneous/functions.html":{}}}],["toggle",{"_index":170,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"miscellaneous/variables.html":{}}}],["toggleable",{"_index":156,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["toggleable.directive",{"_index":787,"title":{},"body":{"modules/WisdomModule.html":{}}}],["toggleable.directive.ts",{"_index":164,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"coverage.html":{}}}],["toggleable.directive.ts:15",{"_index":188,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:17",{"_index":187,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:22",{"_index":179,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:26",{"_index":192,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:36",{"_index":181,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["tokeylength",{"_index":817,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tokeylength(res",{"_index":888,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tooltip",{"_index":707,"title":{},"body":{"interfaces/Marker.html":{}}}],["top",{"_index":766,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["topright",{"_index":915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transforms",{"_index":889,"title":{},"body":{"miscellaneous/functions.html":{}}}],["translate",{"_index":143,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"miscellaneous/functions.html":{}}}],["translate/core",{"_index":784,"title":{},"body":{"modules/WisdomModule.html":{}}}],["translated",{"_index":956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["translatemodule",{"_index":782,"title":{},"body":{"modules/WisdomModule.html":{}}}],["translateobject",{"_index":822,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["translateobject(service",{"_index":864,"title":{},"body":{"miscellaneous/functions.html":{}}}],["translateservice",{"_index":32,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"miscellaneous/functions.html":{}}}],["translation",{"_index":319,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["translations",{"_index":760,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["translator",{"_index":955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":79,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["trimmedkeys",{"_index":646,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["true",{"_index":130,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":827,"title":{},"body":{"dependencies.html":{}}}],["tuple",{"_index":878,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tupleswap",{"_index":823,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tupleswap(tuple",{"_index":876,"title":{},"body":{"miscellaneous/functions.html":{}}}],["two",{"_index":883,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tx",{"_index":652,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["tx.objectstore(\"queries",{"_index":695,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["tx.objectstore(\"shapes",{"_index":655,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["type",{"_index":17,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":899,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":743,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["undefined",{"_index":110,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["under",{"_index":758,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["units",{"_index":275,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["unknown",{"_index":684,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["unselected",{"_index":360,"title":{},"body":{"components/MapComponent.html":{}}}],["unselectedcolor",{"_index":303,"title":{},"body":{"components/MapComponent.html":{}}}],["up",{"_index":109,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["update",{"_index":127,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{}}}],["upgrade(db",{"_index":630,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["upon",{"_index":125,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["url",{"_index":357,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["url.ts",{"_index":801,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["urltree",{"_index":37,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"guards/QueryParameterGuard.html":{}}}],["use",{"_index":22,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["use_api_url",{"_index":609,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_base_url",{"_index":805,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_cache",{"_index":807,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_error_curtain",{"_index":810,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_loader",{"_index":613,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":54,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":879,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["uses",{"_index":214,"title":{},"body":{"components/IonIconComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{}}}],["using",{"_index":868,"title":{},"body":{"miscellaneous/functions.html":{}}}],["utility",{"_index":867,"title":{},"body":{"miscellaneous/functions.html":{}}}],["value",{"_index":61,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":317,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["var",{"_index":147,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["variable",{"_index":802,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":903,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":619,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":219,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["viewchild",{"_index":432,"title":{},"body":{"components/MapComponent.html":{}}}],["viewchild(\"map",{"_index":442,"title":{},"body":{"components/MapComponent.html":{}}}],["viewchild('map",{"_index":391,"title":{},"body":{"components/MapComponent.html":{}}}],["void",{"_index":123,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"miscellaneous/variables.html":{}}}],["want",{"_index":949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webcomponents",{"_index":215,"title":{},"body":{"components/IonIconComponent.html":{}}}],["website",{"_index":244,"title":{},"body":{"components/IonIconComponent.html":{}}}],["whether",{"_index":132,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["whole",{"_index":946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wisdom",{"_index":750,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["wisdominterface",{"_index":748,"title":{"interfaces/WisdomInterface.html":{}},"body":{"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["wisdommodule",{"_index":769,"title":{"modules/WisdomModule.html":{}},"body":{"modules/WisdomModule.html":{},"index.html":{},"modules.html":{}}}],["without",{"_index":326,"title":{},"body":{"components/MapComponent.html":{}}}],["work",{"_index":240,"title":{},"body":{"components/IonIconComponent.html":{}}}],["wrong",{"_index":880,"title":{},"body":{"miscellaneous/functions.html":{}}}],["yes",{"_index":702,"title":{},"body":{"injectables/MapService.html":{},"miscellaneous/functions.html":{}}}],["yourself",{"_index":952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":296,"title":{},"body":{"components/MapComponent.html":{},"modules/WisdomModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Breadcrumb.html":{"url":"interfaces/Breadcrumb.html","title":"interface - Breadcrumb","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Breadcrumb\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/breadcrumbs/breadcrumbs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Breadcrumb fragment interface.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                        \n                                            link\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            query\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional icon name to be displayed on the left of the fragment name.\nThis will use an IonIconComponent for the icon.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Router link to be set for the fragment.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:         Params\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Params\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional query parameters for the router link.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    String or array of strings to be displayed as fragment.\nEvery element will be passed to the TranslateService.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {Injectable} from \"@angular/core\";\nimport {Params, ActivatedRouteSnapshot, UrlTree} from \"@angular/router\";\nimport {Observable, BehaviorSubject, Subject} from \"rxjs\";\n\n/** Breadcrumb fragment interface. */\nexport interface Breadcrumb {\n  /**\n   * Optional icon name to be displayed on the left of the fragment name.\n   * This will use an {@link IonIconComponent} for the icon.\n   */\n  icon?: string,\n  /**\n   * String or array of strings to be displayed as fragment.\n   * Every element will be passed to the {@link TranslateService}.\n   */\n  text: string | string[],\n  /** Router link to be set for the fragment. */\n  link: string,\n  /** Optional query parameters for the router link. */\n  query?: Params\n}\n\n/** Service collecting the breadcrumbs. */\n@Injectable({\n  providedIn: 'root'\n})\nexport class BreadcrumbsService {\n  /** List of breadcrumbs. */\n  fragments: Breadcrumb[] = [];\n  /**\n   * {@link Subject} for the {@link Breadcrumb}s, to be used as\n   * {@link Observable}.\n   */\n  private subject: BehaviorSubject\n    = new BehaviorSubject([]);\n\n  /**\n   * Set a new breadcrumb fragment.\n   *\n   * This removes all fragments with a higher index than the set one.\n   * @param index Index of the breadcrumb array\n   * @param value Breadcrumb fragment to display\n   */\n  set(index: number, value: Breadcrumb) {\n    this.fragments.length = index + 1;\n    this.fragments[index] = value;\n    this.subject.next(this.fragments);\n  }\n\n  /** Observe the breadcrumb fragments. */\n  observe(): Observable {\n    return this.subject.asObservable();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BreadcrumbsComponent.html":{"url":"components/BreadcrumbsComponent.html","title":"component - BreadcrumbsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BreadcrumbsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/breadcrumbs/breadcrumbs.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component to display breadcrumbs collected by the BreadcrumbsService.\nThis will display a slash separated row with all breadcrumb fragments.\nThe one the most right is considered the current page and is therefore not\nclickable.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                breadcrumbs\n            \n\n\n\n\n            \n                templateUrl\n                ./breadcrumbs.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                alive\n                            \n                            \n                                fragments\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isAllSet\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: BreadcrumbsService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        BreadcrumbsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to get breadcrumb fragments from\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isAllSet\n                        \n                    \n                \n            \n            \n                \nisAllSet()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:48\n                \n            \n\n\n            \n                \n                    Check if all fragments up to the most right are set.\nIf one is undefined this will return false.\nThis allows ensuring that only fully defined breadcrumbs will be displayed.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:57\n                \n            \n\n\n            \n                \n                    On destroy set alive to false.\nThis makes sure that the component does not live as long as the service.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:33\n                \n            \n\n\n            \n                \n                    Upon init this will observe the service and update the breadcrumbs if\nneeded.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        alive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:19\n                        \n                    \n\n            \n                \n                    Whether this component is alive.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fragments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         (Breadcrumb | undefined)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:21\n                        \n                    \n\n            \n                \n                    Breadcrumb fragments that will be displayed.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {Component, OnDestroy, OnInit} from \"@angular/core\";\nimport {takeWhile} from \"rxjs\";\n\nimport {Breadcrumb, BreadcrumbsService} from \"./breadcrumbs.service\";\n\n/**\n * Component to display breadcrumbs collected by the {@link BreadcrumbsService}.\n *\n * This will display a slash separated row with all breadcrumb fragments.\n * The one the most right is considered the current page and is therefore not\n * clickable.\n */\n@Component({\n  selector: 'breadcrumbs',\n  templateUrl: './breadcrumbs.component.html'\n})\nexport class BreadcrumbsComponent implements OnInit, OnDestroy {\n  /** Whether this component is alive. */\n  private alive: boolean = true;\n  /** Breadcrumb fragments that will be displayed. */\n  fragments: (Breadcrumb | undefined)[] = [];\n\n  /**\n   * Constructor.\n   * @param service Service to get breadcrumb fragments from\n   */\n  constructor(private service: BreadcrumbsService) { }\n\n  /**\n   * Upon init this will observe the service and update the breadcrumbs if\n   * needed.\n   */\n  ngOnInit(): void {\n    this.service.observe()\n      .pipe(takeWhile(() => this.alive))\n      .subscribe(next => {\n      this.fragments = next\n    });\n  }\n\n  /**\n   * Check if all fragments up to the most right are set.\n   *\n   * If one is undefined this will return `false`.\n   *\n   * This allows ensuring that only fully defined breadcrumbs will be displayed.\n   */\n  isAllSet(): boolean {\n    return !this.fragments.includes(undefined);\n  }\n\n  /**\n   * On destroy set {@link alive} to `false`.\n   *\n   * This makes sure that the component does not live as long as the service.\n   */\n  ngOnDestroy(): void {\n    this.alive = false;\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n          \n            \n          \n          \n            \n              {{text | translate}}\n            \n          \n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                        {{text | translate}}                                          '\n    var COMPONENTS = [{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'BreadcrumbsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BreadcrumbsService.html":{"url":"injectables/BreadcrumbsService.html","title":"injectable - BreadcrumbsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BreadcrumbsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/breadcrumbs/breadcrumbs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service collecting the breadcrumbs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fragments\n                            \n                            \n                                    Private\n                                subject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                observe\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        observe\n                        \n                    \n                \n            \n            \n                \nobserve()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:51\n                \n            \n\n\n            \n                \n                    Observe the breadcrumb fragments.\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(index: number, value: Breadcrumb)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:44\n                \n            \n\n\n            \n                \n                    Set a new breadcrumb fragment.\nThis removes all fragments with a higher index than the set one.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of the breadcrumb array\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                                Breadcrumb\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Breadcrumb fragment to display\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fragments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Breadcrumb[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:29\n                        \n                    \n\n            \n                \n                    List of breadcrumbs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:34\n                        \n                    \n\n            \n                \n                    Subject for the Breadcrumbs, to be used as\nObservable.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from \"@angular/core\";\nimport {Params, ActivatedRouteSnapshot, UrlTree} from \"@angular/router\";\nimport {Observable, BehaviorSubject, Subject} from \"rxjs\";\n\n/** Breadcrumb fragment interface. */\nexport interface Breadcrumb {\n  /**\n   * Optional icon name to be displayed on the left of the fragment name.\n   * This will use an {@link IonIconComponent} for the icon.\n   */\n  icon?: string,\n  /**\n   * String or array of strings to be displayed as fragment.\n   * Every element will be passed to the {@link TranslateService}.\n   */\n  text: string | string[],\n  /** Router link to be set for the fragment. */\n  link: string,\n  /** Optional query parameters for the router link. */\n  query?: Params\n}\n\n/** Service collecting the breadcrumbs. */\n@Injectable({\n  providedIn: 'root'\n})\nexport class BreadcrumbsService {\n  /** List of breadcrumbs. */\n  fragments: Breadcrumb[] = [];\n  /**\n   * {@link Subject} for the {@link Breadcrumb}s, to be used as\n   * {@link Observable}.\n   */\n  private subject: BehaviorSubject\n    = new BehaviorSubject([]);\n\n  /**\n   * Set a new breadcrumb fragment.\n   *\n   * This removes all fragments with a higher index than the set one.\n   * @param index Index of the breadcrumb array\n   * @param value Breadcrumb fragment to display\n   */\n  set(index: number, value: Breadcrumb) {\n    this.fragments.length = index + 1;\n    this.fragments[index] = value;\n    this.subject.next(this.fragments);\n  }\n\n  /** Observe the breadcrumb fragments. */\n  observe(): Observable {\n    return this.subject.asObservable();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/BulmaIsToggleableDirective.html":{"url":"directives/BulmaIsToggleableDirective.html","title":"directive - BulmaIsToggleableDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  BulmaIsToggleableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/bulma/bulma-is-toggleable.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Directive for making things toggleable with bulma.\nClicking on the node that has this directive will toggle the \"is-active\"\nclass.\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        .is-toggleable\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                classes\n                            \n                            \n                                    Private\n                                isActive\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toggle\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    elementClasses\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        class\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:22\n                            \n                        \n                \n                    \n                        The classes of the host node.\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:36\n                \n            \n\n\n            \n                \n                    Function to be executed when the host is clicked.\nWill toggle the \"is-active\" class on the host node.\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toggle\n                        \n                    \n                \n            \n            \n                \ntoggle()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click')\n                \n            \n\n            \n                \n                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:36\n                \n            \n\n\n            \n                \n                    Function to be executed when the host is clicked.\nWill toggle the \"is-active\" class on the host node.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        classes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:17\n                        \n                    \n\n            \n                \n                    The classes of the host node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:15\n                        \n                    \n\n            \n                \n                    Is the host currently active.\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        elementClasses\n                    \n                \n\n                \n                    \n                        getelementClasses()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:22\n                                \n                            \n                    \n                        \n                                The classes of the host node.\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        setelementClasses(classes: string)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:26\n                                \n                            \n                    \n                        \n                                Set the classes of the host node.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            classes\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import {HostBinding, Directive, Input, HostListener} from \"@angular/core\";\n\n/**\n * Directive for making things toggleable with bulma.\n *\n * Clicking on the node that has this directive will toggle the \"is-active\"\n * class.\n */\n@Directive({\n  selector: \".is-toggleable\"\n})\nexport class BulmaIsToggleableDirective {\n\n  /** Is the host currently active. */\n  private isActive: boolean = false;\n  /** The classes of the host node. */\n  private classes: string[] = [];\n\n  /** The classes of the host node. */\n  @Input(\"class\")\n  @HostBinding(\"class\")\n  get elementClasses(): string {\n    return this.classes.join(\" \");\n  }\n  /** Set the classes of the host node. */\n  set elementClasses(classes: string) {\n    this.classes = classes.trim().split(/\\s+/);\n  }\n\n  /**\n   * Function to be executed when the host is clicked.\n   *\n   * Will toggle the \"is-active\" class on the host node.\n   */\n  @HostListener(\"click\")\n  toggle() {\n    this.isActive = !this.isActive;\n    if (this.isActive) this.classes.push(\"is-active\")\n    else {\n      this.elementClasses = this.elementClasses\n        .split(\"is-active\")\n        .join(\"\");\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/IonIconComponent.html":{"url":"components/IonIconComponent.html","title":"component - IonIconComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  IonIconComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/ion-icon/ion-icon.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component is used to inject the icons from IonIcons.\nIonIcons uses WebComponents to display the icons.\nTo allow to use them here, this component adds the icons via js.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ion-icon\n            \n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(elRef: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ion-icon/ion-icon.component.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elRef\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Element reference to itself\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ion-icon/ion-icon.component.ts:31\n                            \n                        \n                \n                    \n                        The name of the icon.\nIs not used by angular but needed to render the correct icon and necessary\nso that angular stops complaining.\nThis setter also directly modifies the native element to have the \"name\"\ndirectly as an attribute which is needed to make ion icons work.\nYou can find the names at the official website\nhttps://ionic.io/ionicons.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n\n                \n                    \n                        setname(name: string | undefined)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/ion-icon/ion-icon.component.ts:31\n                                \n                            \n                    \n                        \n                                The name of the icon.\nIs not used by angular but needed to render the correct icon and necessary\nso that angular stops complaining.\nThis setter also directly modifies the native element to have the \"name\"\ndirectly as an attribute which is needed to make ion icons work.\nYou can find the names at the official website\nhttps://ionic.io/ionicons.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            name\n                                                    \n                                                            \n                                                                        string | undefined\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {Component, Input, ElementRef} from \"@angular/core\";\n\n/**\n * This component is used to inject the icons from IonIcons.\n * IonIcons uses WebComponents to display the icons.\n * To allow to use them here, this component adds the icons via js.\n */\n@Component({\n  selector: \"ion-icon\",\n  template: \"\"\n})\nexport class IonIconComponent {\n\n  /**\n   * Constructor.\n   * @param elRef Element reference to itself\n   */\n  constructor(private elRef: ElementRef) {}\n\n  /**\n   * The name of the icon.\n   * Is not used by angular but needed to render the correct icon and necessary\n   * so that angular stops complaining.\n   *\n   * This setter also directly modifies the native element to have the \"name\"\n   * directly as an attribute which is needed to make ion icons work.\n   *\n   * You can find the names at the official website\n   * {@link https://ionic.io/ionicons}.\n   */\n  @Input() set name(name: string | undefined) {\n    this.elRef.nativeElement?.setAttribute(\"name\", name);\n  };\n\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'IonIconComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LayerData.html":{"url":"interfaces/LayerData.html","title":"interface - LayerData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LayerData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/layer-data.ts\n        \n\n\n            \n                Description\n            \n            \n                Type to represent layer data received from the geo data server.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            box\n                                        \n                                \n                                \n                                        \n                                            shapes\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        box\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        box:     [, , , ]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [, , , ]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Corner coordinates of a box containing all the shapes this displays.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shapes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shapes:         ShapeData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ShapeData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of shapes.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as L from \"leaflet\";\n\n/**\n * GeoJSON data type used by Leaflet.\n * @private\n */\nexport type GeoJsonObject = Parameters[0];\n\n/** Type to represent a single shape with all of its metadata. */\nexport interface ShapeData {\n  /** Name of the shape. */\n  name: string,\n  /** Key of the shape. */\n  key: string,\n  /** Nomenclature of Territorial Units code of the shape. */\n  nutsKey: string,\n  /** GeoJson representing the shape. */\n  geoJson: GeoJsonObject\n}\n\n/** Type to represent layer data received from the geo data server. */\nexport interface LayerData {\n  /** Corner coordinates of a box containing all the shapes this displays. */\n  box: [[number, number], [number, number], [number, number], [number, number]],\n  /** List of shapes. */\n  shapes: ShapeData[]\n}\n\nexport default LayerData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MapComponent.html":{"url":"components/MapComponent.html","title":"component - MapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/map/map.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component for displaying maps.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                map\n            \n\n            \n                styleUrls\n                ./map.component.css\n            \n\n\n            \n                template\n                \n  \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                center\n                            \n                            \n                                height\n                            \n                            \n                                    Private\n                                layerConfig\n                            \n                            \n                                    Private\n                                layerData\n                            \n                            \n                                    Private\n                                layerNames\n                            \n                            \n                                    Optional\n                                map\n                            \n                            \n                                    Private\n                                mapElement\n                            \n                            \n                                    Private\n                                markers\n                            \n                            \n                                    Private\n                                    Optional\n                                selectedGeoJsonLayer\n                            \n                            \n                                    Private\n                                    Optional\n                                selectedLayer\n                            \n                            \n                                    Private\n                                selectedShapes\n                            \n                            \n                                tileUrl\n                            \n                            \n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                emitSelection\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                center\n                            \n                            \n                                height\n                            \n                            \n                                layers\n                            \n                            \n                                layerSelectable\n                            \n                            \n                                markers\n                            \n                            \n                                scrollWheelZoom\n                            \n                            \n                                selectedColor\n                            \n                            \n                                tileUrl\n                            \n                            \n                                unselectedColor\n                            \n                            \n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                selected\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    inputLayers\n                                \n                                \n                                    inputMarkers\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: MapService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/map/map.component.ts:185\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        MapService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to interact with the server for geo data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        center\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:66\n                            \n                        \n                \n                    \n                        Input for the center coordinates of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:56\n                            \n                        \n                \n                    \n                        Input for the height of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        layers\n                    \n                \n                \n                    \n                        Type :         LayerConfig\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:131\n                            \n                        \n                \n                    \n                        Input for the layers that should be displayed.\nThe key of the record is layer key and is also emitted on the selection.\nThe value of the record is an array and the values of that should be the\nfollowing:\n\n  \n    The name of the layer, this will be only used to display a name of\n    the layer (may also be a translation key).\n    // TODO: actually implement translation here\n  \n  \n    This should be the resolution to display the layer at, this may also\nbe\n    null to display the keys directly without any shape intersection\n    resolving.\n  \n  \n    These should be the keys used to display the shapes from.\n    If the given keys are empty or null, this will display everything from\n    the give resolution.\n  \n\n\nAttention: The service needs at least one of the resolution or the\nkeys\nto properly respond.\n```html\n// TODO: update link when geo data docs update\nSee https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n```\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        layerSelectable\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:153\n                            \n                        \n                \n                    \n                        Should the layers be selectable.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        markers\n                    \n                \n                \n                    \n                        Type :         Marker[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:156\n                            \n                        \n                \n                    \n                        Markers that should be displayed on the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        scrollWheelZoom\n                    \n                \n                \n                    \n                        Type :     boolean | \"center\"\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:79\n                            \n                        \n                \n                    \n                        Input for the option if the map should scroll zoom on mouse scroll.\nIf \"center\" is passed, the map will always zoom onto the center.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#d35a0c\"\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:84\n                            \n                        \n                \n                    \n                        Input for a hex code selected shapes.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        tileUrl\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:61\n                            \n                        \n                \n                    \n                        Input for the tile url of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        unselectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#1f5aec\"\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:82\n                            \n                        \n                \n                    \n                        Input for a hex code for unselected shapes.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        zoom\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:71\n                            \n                        \n                \n                    \n                        Input for the map zoom level.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        selected\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:181\n                            \n                        \n                \n                    \n                        Outputs the currently selected shapes.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        emitSelection\n                        \n                    \n                \n            \n            \n                \n                    \n                    emitSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:352\n                \n            \n\n\n            \n                \n                    Internally used function to emit the currently selected shapes via the\nselected output.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:226\n                \n            \n\n\n            \n                \n                    Renders the map with the given input values.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:196\n                \n            \n\n\n            \n                \n                    While init this sets the input values to the inner, private values.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        center\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"53.1434501, 8.2145521\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:68\n                        \n                    \n\n            \n                \n                    Center of the map, defaults to longitude and latitude of Oldenburg.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"500px\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:58\n                        \n                    \n\n            \n                \n                    Height of map, defaults to 500px.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        layerConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject({})\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:139\n                        \n                    \n\n            \n                \n                    Subject of the LayerConfig, to be used as\nObservable.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        layerData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject>\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject({})\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:145\n                        \n                    \n\n            \n                \n                    Subject of the pairs of Layerkey and LayerData,\nto be used as Observable.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        layerNames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:150\n                        \n                    \n\n            \n                \n                    Subject of the layer names mapped by the LayerKey.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        map\n                        \n                    \n                \n            \n                \n                    \n                        Type :     L.Map\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:163\n                        \n                    \n\n            \n                \n                    The leaflet map that is displayed here.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mapElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('map')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:53\n                        \n                    \n\n            \n                \n                    The ref to the map html element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        markers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:160\n                        \n                    \n\n            \n                \n                    Markers Subject to be used as Observable.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        selectedGeoJsonLayer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     L.Layer\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:178\n                        \n                    \n\n            \n                \n                    The currently selected geo json layer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        selectedLayer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LayerKey\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:176\n                        \n                    \n\n            \n                \n                    The currently selected layer in the map control.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedShapes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record>\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:170\n                        \n                    \n\n            \n                \n                    Internally holds all elements that are currently selected.\nThe set holds all keys of shapes currently selected.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tileUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:63\n                        \n                    \n\n            \n                \n                    Tile url of the map, defaults to the osm.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 7\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:73\n                        \n                    \n\n            \n                \n                    Zoom level of the map, defaults to 7.\n\n                \n            \n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        inputLayers\n                    \n                \n\n\n                \n                    \n                        setinputLayers(layerConfig: LayerConfig)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/map/map.component.ts:131\n                                \n                            \n                    \n                        \n                                Input for the layers that should be displayed.\nThe key of the record is layer key and is also emitted on the selection.\nThe value of the record is an array and the values of that should be the\nfollowing:\n\n  \n    The name of the layer, this will be only used to display a name of\n    the layer (may also be a translation key).\n    // TODO: actually implement translation here\n  \n  \n    This should be the resolution to display the layer at, this may also\nbe\n    null to display the keys directly without any shape intersection\n    resolving.\n  \n  \n    These should be the keys used to display the shapes from.\n    If the given keys are empty or null, this will display everything from\n    the give resolution.\n  \n\n\nAttention: The service needs at least one of the resolution or the\nkeys\nto properly respond.\n```html\n// TODO: update link when geo data docs update\nSee https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n```\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            layerConfig\n                                                    \n                                                            \n                                                                            LayerConfig\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                        Example :\n                                            \n                                                &lt;map\n  height=&quot;70vh&quot;\n  [layers]=&quot;{\n    full_res: [&#39;All of municipal resolution&#39;, Resolution.MUNICIPAL, null],\n    only_keys: [&#39;Only show exactly these&#39;, null, [&#39;01&#39;, &#39;034030000000&#39;]],\n    mixed: [&#39;Show district resolution&#39;, Resolution.DISTRICT, [&#39;01&#39;,\n  &#39;034030000000&#39;]]\n  }&quot;\n&gt;&lt;/map&gt;\n\n// TODO: update link when geo data docs update\n                                            \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        inputMarkers\n                    \n                \n\n\n                \n                    \n                        setinputMarkers(markers: Marker[])\n                    \n                \n                            \n                                \n                                    Defined in src/lib/map/map.component.ts:156\n                                \n                            \n                    \n                        \n                                Markers that should be displayed on the map.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            markers\n                                                    \n                                                            \n                                                                            Marker[]\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n  ViewChild,\n  Component,\n  EventEmitter,\n  OnInit,\n  AfterViewInit,\n  Input,\n  Output,\n  ElementRef\n} from \"@angular/core\";\nimport {BehaviorSubject, Subject} from \"rxjs\";\n\nimport * as L from \"leaflet\";\n\nimport {MapService} from \"./map.service\";\nimport LayerData from \"./layer-data\";\nimport {Resolution} from \"./resolution\";\nimport {Marker} from \"./marker\";\n\nimport * as LX from \"./invert-selection\";\n\nimport \"leaflet.markercluster\";\n\n/**\n * GeoJSON data type used by Leaflet.\n * @private\n */\ntype GeoJsonObject = Parameters[0];\n\n/** Type alias to enforce the meaning of the layer keys. */\ntype LayerKey = string;\n\n/** A layer config for the input of {@link MapComponent.inputLayers}. */\ntype LayerConfig = Record;\n\n/**\n * Component for displaying maps.\n */\n@Component({\n  selector: \"map\",\n  template: `\n    \n      \n    \n  `,\n  styleUrls: [\n    \"./map.component.css\"\n  ]\n})\nexport class MapComponent implements OnInit, AfterViewInit {\n\n  /** The ref to the map html element. */\n  @ViewChild(\"map\") private mapElement!: ElementRef;\n\n  /** Input for the height of the map. */\n  @Input(\"height\") inputHeight?: string;\n  /** Height of map, defaults to 500px. */\n  height = \"500px\";\n\n  /** Input for the tile url of the map. */\n  @Input(\"tileUrl\") inputTileUrl?: string;\n  /** Tile url of the map, defaults to the osm. */\n  tileUrl = \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\";\n\n  /** Input for the center coordinates of the map. */\n  @Input(\"center\") inputCenter?: string;\n  /** Center of the map, defaults to longitude and latitude of Oldenburg. */\n  center = \"53.1434501, 8.2145521\";\n\n  /** Input for the map zoom level. */\n  @Input(\"zoom\") inputZoom?: string;\n  /** Zoom level of the map, defaults to 7. */\n  zoom = 7;\n\n  /**\n   * Input for the option if the map should scroll zoom on mouse scroll.\n   * If \"center\" is passed, the map will always zoom onto the center.\n   */\n  @Input(\"scrollWheelZoom\") inputScrollWheelZoom: boolean | \"center\" = true;\n\n  /** Input for a hex code for unselected shapes. */\n  @Input(\"unselectedColor\") unselectedColor = \"#1f5aec\";\n  /** Input for a hex code selected shapes. */\n  @Input(\"selectedColor\") selectedColor = \"#d35a0c\";\n\n  /**\n   * Input for the layers that should be displayed.\n   *\n   * The key of the record is layer key and is also emitted on the selection.\n   * The value of the record is an array and the values of that should be the\n   * following:\n   * \n   *   \n   *     The name of the layer, this will be only used to display a name of\n   *     the layer (may also be a translation key).\n   *     // TODO: actually implement translation here\n   *   \n   *   \n   *     This should be the resolution to display the layer at, this may also\n   * be\n   *     null to display the keys directly without any shape intersection\n   *     resolving.\n   *   \n   *   \n   *     These should be the keys used to display the shapes from.\n   *     If the given keys are empty or null, this will display everything from\n   *     the give resolution.\n   *   \n   * \n   *\n   * **Attention**: The service needs at least one of the resolution or the\n   * keys\n   * to properly respond.\n   *\n   * @example\n   * ```html\n   * \n   * ```\n   * // TODO: update link when geo data docs update\n   * @see https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n   */\n  @Input(\"layers\")\n  set inputLayers(layerConfig: LayerConfig) {\n    this.layerConfig.next(layerConfig);\n  };\n  /**\n   * {@link Subject} of the {@link LayerConfig}, to be used as\n   * {@link Observable}.\n   * @private\n   */\n  private layerConfig: BehaviorSubject = new BehaviorSubject({});\n  /**\n   * {@link Subject} of the pairs of {@link Layerkey} and {@link LayerData},\n   * to be used as {@link Observable}.\n   * @private\n   */\n  private layerData: BehaviorSubject> = new BehaviorSubject({});\n  /**\n   * {@link Subject} of the layer names mapped by the {@link LayerKey}.\n   * @private\n   */\n  private layerNames: Record = {};\n\n  /** Should the layers be selectable. */\n  @Input(\"layerSelectable\") inputLayerSelectable: boolean = true;\n\n  /** Markers that should be displayed on the map. */\n  @Input(\"markers\") set inputMarkers(markers: Marker[]) {\n    this.markers.next(markers);\n  };\n  /** {@link Marker}s {@link Subject} to be used as {@link Observable}. */\n  private markers = new BehaviorSubject([]);\n\n  /** The leaflet map that is displayed here. */\n  map?: L.Map;\n\n  /**\n   * Internally holds all elements that are currently selected.\n   *\n   * The set holds all keys of shapes currently selected.\n   */\n  private selectedShapes: Record> = {};\n\n  /**\n   * The currently selected layer in the map control.\n   * @private\n   */\n  private selectedLayer?: LayerKey;\n  /** The currently selected geo json layer. */\n  private selectedGeoJsonLayer?: L.Layer;\n\n  /** Outputs the currently selected shapes. */\n  @Output() selected = new EventEmitter();\n\n  /**\n   * Constructor.\n   * @param service Service to interact with the server for geo data\n   */\n  constructor(private service: MapService) {}\n\n  /**\n   * While init this sets the input values to the inner, private values.\n   */\n  ngOnInit(): void {\n    if (this.inputHeight) this.height = this.inputHeight;\n    if (this.inputTileUrl) this.tileUrl = this.inputTileUrl;\n    if (this.inputCenter) this.center = this.inputCenter;\n    if (this.inputZoom) this.zoom = parseInt(this.inputZoom);\n\n    this.layerConfig.subscribe(async config => {\n      let layerData = {};\n      let requests: Record> = {};\n      for (\n        let [layerKey, [displayName, resolution, keys]]\n        of Object.entries(config)\n      ) {\n        this.layerNames[layerKey] = displayName;\n        requests[layerKey] = this.service.fetchLayerData(\n          resolution,\n          keys?.map(k => k.split(\" \").join(\"\"))\n        );\n      }\n      let fetched: Record = {};\n      for (let [layerKey, data] of Object.entries(requests)) {\n        fetched[layerKey] = await data;\n      }\n      this.layerData.next(fetched);\n    });\n  }\n\n  /**\n   * Renders the map with the given input values.\n   */\n  ngAfterViewInit(): void {\n    const nativeMapElement = this.mapElement.nativeElement;\n\n    const map = L.map(nativeMapElement, {\n      scrollWheelZoom: this.inputScrollWheelZoom,\n      center: this.center\n        .split(\", \")\n        .map(str => parseFloat(str)) as [number, number],\n      zoom: this.zoom\n    });\n    map.getRenderer(map as any).options.padding = 100;\n\n    L.tileLayer(this.tileUrl).addTo(map);\n\n    this.map = map;\n    let layersControl: L.Control.Layers;\n    // TODO: make a clear type from this\n    let invertSelectionControl: any;\n\n    this.layerData.subscribe(layerData => {\n      let displayLayer = true;\n\n      // reset selected data\n      this.selectedShapes = {};\n\n      if (layersControl) map.removeControl(layersControl);\n      layersControl = L.control.layers();\n      let layers: L.Layer[] = [];\n\n      if (this.selectedGeoJsonLayer) map.removeLayer(this.selectedGeoJsonLayer);\n\n      // update map with new layer data\n      for (let [key, data] of Object.entries(layerData)) {\n        let selectedShapes = this.selectedShapes[key] = new Set();\n        // use for every layer a new geoJSON layer\n        let geoJsonLayer = L.geoJSON(undefined, {\n          attribution: `\n            \n              📐 © GeoBasis-DE / BKG 2022\n            \n            |\n            \n              🔖 dl-de/by-2-0\n            \n          `,\n          style: {color: this.unselectedColor},\n          onEachFeature: (feature, layer) => {\n            // used properties are injected later into the feature\n            layer.bindTooltip(feature.properties.name, {direction: \"center\"});\n            if (this.inputLayerSelectable) {\n              layer.on(\"click\", () => {\n                let [key, path] = [feature.properties.key, layer as L.Path];\n                if (selectedShapes.has(key)) {\n                  path.setStyle({color: this.unselectedColor});\n                  path.bringToBack();\n                  selectedShapes.delete(key);\n                }\n                else {\n                  path.setStyle({color: this.selectedColor});\n                  path.bringToFront();\n                  selectedShapes.add(key);\n                }\n                this.emitSelection();\n              });\n            }\n            layers.push(layer);\n          }\n        });\n        for (let shape of data.shapes) {\n          geoJsonLayer.addData(Object.assign(shape.geoJson, {properties: {\n            name: shape.name,\n            key: shape.key\n          }}));\n          if (displayLayer) {\n            geoJsonLayer.addTo(map);\n            displayLayer = false;\n            this.selectedLayer = key;\n            this.selectedGeoJsonLayer = geoJsonLayer;\n            map.fitBounds([\n              data.box[0],\n              data.box[2]\n            ]);\n          }\n        }\n        layersControl.addBaseLayer(geoJsonLayer, this.layerNames[key]);\n        map.on(\"baselayerchange\", ({layer}) => {\n          if (layer == geoJsonLayer) {\n            this.selectedGeoJsonLayer = layer;\n            this.selectedLayer = key;\n            this.emitSelection();\n          }\n        })\n      }\n      if (Object.keys(layerData).length > 1) layersControl.addTo(map);\n\n      if (this.inputLayerSelectable) {\n        if (invertSelectionControl) map.removeControl(invertSelectionControl);\n        invertSelectionControl = LX.control.invertSelection(() => {\n          for (let layer of layers) {\n            layer.fire(\"click\");\n          }\n        });\n        invertSelectionControl.addTo(map);\n      }\n    });\n\n    let markerLayer = L.markerClusterGroup();\n    this.markers.subscribe(markers => {\n      markerLayer.removeFrom(map);\n      markerLayer = L.markerClusterGroup();\n      for (let marker of markers) {\n        let lMarker = L.marker(marker.coordinates);\n        if (marker.icon) lMarker.setIcon(marker.icon);\n        if (marker.tooltip) lMarker.bindTooltip(marker.tooltip);\n        if (marker.onClick) lMarker.on(\"click\", marker.onClick)\n        lMarker.addTo(markerLayer);\n      }\n      markerLayer.addTo(map);\n    });\n  }\n\n  /**\n   * Internally used function to emit the currently selected shapes via the\n   * {@link selected} output.\n   * @private\n   */\n  private emitSelection(): void {\n    let layerKey = this.selectedLayer!;\n    let layerName = this.layerNames[layerKey]!;\n    let keys = Array.from(this.selectedShapes[layerKey]);\n    this.selected.emit({\n      layer: layerKey,\n      name: layerName,\n      keys\n    });\n  }\n}\n\n    \n\n\n    \n                \n                    ./map.component.css\n                \n                .map-container {}\n\n.map {\n  height: 100%;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'MapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MapDB.html":{"url":"interfaces/MapDB.html","title":"interface - MapDB","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MapDB\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/map.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The schema the map db uses.\n\n            \n\n            \n                Extends\n            \n            \n                    DBSchema\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            queries\n                                        \n                                \n                                \n                                        \n                                            shapes\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        queries\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queries:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    All cached queries, used to identify if a query is already in the db.\nThe key[0] represents the resolution of the query, a -1 represents no\nresolution.\nThe rest are the given keys.\nThe value is an array of all the keys the query returned.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shapes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shapes:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    All shapes in the indexed db.\nThe key is the key of the shape.\nThe value is some ShapeData.\nSince LayerData is simply an array of ShapeData, this may\nbe used to reconstruct some layer data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  HttpClient,\n  HttpContext,\n  HttpHeaders,\n  HttpParams\n} from \"@angular/common/http\";\nimport {Injectable} from \"@angular/core\";\nimport {openDB, DBSchema} from \"idb\";\nimport {Layer} from \"leaflet\";\nimport {firstValueFrom} from \"rxjs\";\n\nimport {Resolution} from \"./resolution\";\nimport {LayerData, ShapeData, GeoJsonObject} from \"./layer-data\";\nimport {USE_API_URL} from \"../http-context/use-api-url\";\nimport {USE_LOADER} from \"../http-context/use-loader\";\n\n/** API url for the map to request data from. */\nconst API_URL = \"geodata\";\n/** Indexed DB name. */\nconst DB_NAME = \"map-db\";\n/** Indexed DB schema version. */\nconst SCHEMA_V = 2;\n\n/** The schema the map db uses. */\ninterface MapDB extends DBSchema {\n  /**\n   * All cached queries, used to identify if a query is already in the db.\n   *\n   * The key[0] represents the resolution of the query, a -1 represents no\n   * resolution.\n   * The rest are the given keys.\n   *\n   * The value is an array of all the keys the query returned.\n   */\n  queries: {\n    key: [number, ...string[]],\n    value: {\n      box: LayerData[\"box\"],\n      shapes: string[]\n    }\n  },\n\n  /**\n   * All shapes in the indexed db.\n   *\n   * The key is the key of the shape.\n   *\n   * The value is some {@link ShapeData}.\n   * Since {@link LayerData} is simply an array of {@link ShapeData}, this may\n   * be used to reconstruct some layer data.\n   */\n  shapes: {\n    key: string,\n    value: ShapeData\n  }\n}\n\n/**\n * Service to interact with the geo data api to fetch map data.\n *\n * Fetched map data is cached in the indexedDB and therefore only retrieved\n * lazily.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n\n  /** Indexed DB client. */\n  private readonly idb;\n\n  /**\n   * Constructor.\n   * @param http Client to request geo data\n   */\n  constructor(private http: HttpClient) {\n    this.idb = openDB(DB_NAME, SCHEMA_V, {\n      upgrade(db, oldV) {\n        if (oldV) {\n          db.deleteObjectStore(\"queries\");\n          db.deleteObjectStore(\"shapes\");\n        }\n        db.createObjectStore(\"queries\");\n        db.createObjectStore(\"shapes\");\n      }\n    });\n  }\n\n  /**\n   * Asynchronously fetch the map from the geo data rest api.\n   *\n   * Will only fetch data if not already stored in the indexedDB.\n   * @param resolution The resolution the of the shapes returned by the service\n   * @param keys The keys given to look for shapes\n   * @param force If true, this will ignore the cache and request everything\n   */\n  async fetchLayerData(\n    resolution: Resolution | null | undefined,\n    keys?: string[] | null,\n    force: boolean = false\n  ): Promise {\n    // prepare db and keys\n    let idb = await this.idb;\n    let trimmedKeys = keys ?? [];\n    let resolutionNum = resolution ? Resolution.toKeyLength(resolution) : -1;\n    let queryKey = [resolutionNum, ...trimmedKeys] as [number, ...string[]];\n\n    // check for cached keys or ignore if is force is true\n    let cachedQuery = force ? undefined : await idb.get(\"queries\", queryKey);\n    if (cachedQuery) {\n      let tx = idb.transaction(\"shapes\", \"readonly\");\n      let store = tx.objectStore(\"shapes\");\n      let shapes: ShapeData[] = [];\n      let operations = [];\n      for (let key of cachedQuery.shapes) {\n        operations.push(store.get(key).then(shape => {\n          if (shape) shapes.push(shape);\n        }));\n      }\n      operations.push(tx.done);\n      await Promise.all(operations);\n      return {\n        box: cachedQuery.box,\n        shapes\n      };\n    }\n\n    // if cachedKeys was empty, request data from the server\n    let params = new HttpParams();\n    if (resolution) params = params.set(\"resolution\", resolution);\n    if (keys && keys.length) params = params.appendAll({key: keys.map(k => {\n      if (resolution) return k.substring(0, resolutionNum);\n      return k;\n    })});\n\n    let rawLayerData = await firstValueFrom(this.http.get(`${API_URL}/`, {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      }),\n      params,\n      responseType: \"json\",\n      context: new HttpContext()\n        .set(USE_API_URL, true)\n        .set(USE_LOADER, true)\n    }));\n\n    rawLayerData.shapes = rawLayerData.shapes.map(rawShape => ({\n      nutsKey: rawShape.nuts_key,\n      geoJson: rawShape.geojson,\n      ...rawShape\n    }));\n\n    let layerData = rawLayerData as unknown as LayerData;\n\n    // store the requested data back into the db\n    let tx = idb.transaction([\"queries\", \"shapes\"], \"readwrite\");\n    let operations = [];\n    let shapeStore = tx.objectStore(\"shapes\");\n    let shapeKeys = [];\n    for (let shape of layerData.shapes) {\n      operations.push(shapeStore.put(shape, shape.key));\n      shapeKeys.push(shape.key);\n    }\n    let queryStore = tx.objectStore(\"queries\");\n    operations.push(queryStore.put({\n      box: layerData.box,\n      shapes: shapeKeys\n    }, queryKey));\n    await Promise.all(operations);\n\n    return layerData;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MapService.html":{"url":"injectables/MapService.html","title":"injectable - MapService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MapService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/map.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to interact with the geo data api to fetch map data.\nFetched map data is cached in the indexedDB and therefore only retrieved\nlazily.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                idb\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                fetchLayerData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/lib/map/map.service.ts:70\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Client to request geo data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchLayerData\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchLayerData(resolution: Resolution | null | undefined, keys?: string[] | null, force: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.service.ts:97\n                \n            \n\n\n            \n                \n                    Asynchronously fetch the map from the geo data rest api.\nWill only fetch data if not already stored in the indexedDB.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    resolution\n                                    \n                                                Resolution | null | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The resolution the of the shapes returned by the service\n\n                                    \n                                \n                                \n                                    keys\n                                    \n                                            string[] | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The keys given to look for shapes\n\n                                    \n                                \n                                \n                                    force\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        If true, this will ignore the cache and request everything\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        idb\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/lib/map/map.service.ts:70\n                        \n                    \n\n            \n                \n                    Indexed DB client.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpClient,\n  HttpContext,\n  HttpHeaders,\n  HttpParams\n} from \"@angular/common/http\";\nimport {Injectable} from \"@angular/core\";\nimport {openDB, DBSchema} from \"idb\";\nimport {Layer} from \"leaflet\";\nimport {firstValueFrom} from \"rxjs\";\n\nimport {Resolution} from \"./resolution\";\nimport {LayerData, ShapeData, GeoJsonObject} from \"./layer-data\";\nimport {USE_API_URL} from \"../http-context/use-api-url\";\nimport {USE_LOADER} from \"../http-context/use-loader\";\n\n/** API url for the map to request data from. */\nconst API_URL = \"geodata\";\n/** Indexed DB name. */\nconst DB_NAME = \"map-db\";\n/** Indexed DB schema version. */\nconst SCHEMA_V = 2;\n\n/** The schema the map db uses. */\ninterface MapDB extends DBSchema {\n  /**\n   * All cached queries, used to identify if a query is already in the db.\n   *\n   * The key[0] represents the resolution of the query, a -1 represents no\n   * resolution.\n   * The rest are the given keys.\n   *\n   * The value is an array of all the keys the query returned.\n   */\n  queries: {\n    key: [number, ...string[]],\n    value: {\n      box: LayerData[\"box\"],\n      shapes: string[]\n    }\n  },\n\n  /**\n   * All shapes in the indexed db.\n   *\n   * The key is the key of the shape.\n   *\n   * The value is some {@link ShapeData}.\n   * Since {@link LayerData} is simply an array of {@link ShapeData}, this may\n   * be used to reconstruct some layer data.\n   */\n  shapes: {\n    key: string,\n    value: ShapeData\n  }\n}\n\n/**\n * Service to interact with the geo data api to fetch map data.\n *\n * Fetched map data is cached in the indexedDB and therefore only retrieved\n * lazily.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n\n  /** Indexed DB client. */\n  private readonly idb;\n\n  /**\n   * Constructor.\n   * @param http Client to request geo data\n   */\n  constructor(private http: HttpClient) {\n    this.idb = openDB(DB_NAME, SCHEMA_V, {\n      upgrade(db, oldV) {\n        if (oldV) {\n          db.deleteObjectStore(\"queries\");\n          db.deleteObjectStore(\"shapes\");\n        }\n        db.createObjectStore(\"queries\");\n        db.createObjectStore(\"shapes\");\n      }\n    });\n  }\n\n  /**\n   * Asynchronously fetch the map from the geo data rest api.\n   *\n   * Will only fetch data if not already stored in the indexedDB.\n   * @param resolution The resolution the of the shapes returned by the service\n   * @param keys The keys given to look for shapes\n   * @param force If true, this will ignore the cache and request everything\n   */\n  async fetchLayerData(\n    resolution: Resolution | null | undefined,\n    keys?: string[] | null,\n    force: boolean = false\n  ): Promise {\n    // prepare db and keys\n    let idb = await this.idb;\n    let trimmedKeys = keys ?? [];\n    let resolutionNum = resolution ? Resolution.toKeyLength(resolution) : -1;\n    let queryKey = [resolutionNum, ...trimmedKeys] as [number, ...string[]];\n\n    // check for cached keys or ignore if is force is true\n    let cachedQuery = force ? undefined : await idb.get(\"queries\", queryKey);\n    if (cachedQuery) {\n      let tx = idb.transaction(\"shapes\", \"readonly\");\n      let store = tx.objectStore(\"shapes\");\n      let shapes: ShapeData[] = [];\n      let operations = [];\n      for (let key of cachedQuery.shapes) {\n        operations.push(store.get(key).then(shape => {\n          if (shape) shapes.push(shape);\n        }));\n      }\n      operations.push(tx.done);\n      await Promise.all(operations);\n      return {\n        box: cachedQuery.box,\n        shapes\n      };\n    }\n\n    // if cachedKeys was empty, request data from the server\n    let params = new HttpParams();\n    if (resolution) params = params.set(\"resolution\", resolution);\n    if (keys && keys.length) params = params.appendAll({key: keys.map(k => {\n      if (resolution) return k.substring(0, resolutionNum);\n      return k;\n    })});\n\n    let rawLayerData = await firstValueFrom(this.http.get(`${API_URL}/`, {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      }),\n      params,\n      responseType: \"json\",\n      context: new HttpContext()\n        .set(USE_API_URL, true)\n        .set(USE_LOADER, true)\n    }));\n\n    rawLayerData.shapes = rawLayerData.shapes.map(rawShape => ({\n      nutsKey: rawShape.nuts_key,\n      geoJson: rawShape.geojson,\n      ...rawShape\n    }));\n\n    let layerData = rawLayerData as unknown as LayerData;\n\n    // store the requested data back into the db\n    let tx = idb.transaction([\"queries\", \"shapes\"], \"readwrite\");\n    let operations = [];\n    let shapeStore = tx.objectStore(\"shapes\");\n    let shapeKeys = [];\n    for (let shape of layerData.shapes) {\n      operations.push(shapeStore.put(shape, shape.key));\n      shapeKeys.push(shape.key);\n    }\n    let queryStore = tx.objectStore(\"queries\");\n    operations.push(queryStore.put({\n      box: layerData.box,\n      shapes: shapeKeys\n    }, queryKey));\n    await Promise.all(operations);\n\n    return layerData;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Marker.html":{"url":"interfaces/Marker.html","title":"interface - Marker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Marker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/marker.ts\n        \n\n\n            \n                Description\n            \n            \n                Marker interface for creating custom markers on a MapComponent.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            coordinates\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onClick\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tooltip\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coordinates\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        coordinates:     [number, number]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [number, number]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Coordinates of the marker.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:     L.Icon | L.DivIcon\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     L.Icon | L.DivIcon\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional icon for the marker, if not set a default one will be used.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onClick\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onClick:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Event handler for a click on the marker.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tooltip\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tooltip:     Content |  | Tooltip\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Content |  | Tooltip\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Displayed tooltip when hovering the marker.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {Content, LeafletMouseEvent, Layer, Tooltip} from \"leaflet\";\n\nimport * as L from \"leaflet\";\n\n/** Marker interface for creating custom markers on a {@link MapComponent}. */\nexport interface Marker {\n  /** Coordinates of the marker. */\n  coordinates: [number, number],\n  /** Displayed tooltip when hovering the marker. */\n  tooltip?: Content | ((layer: Layer) => Content) | Tooltip,\n  /** Event handler for a click on the marker. */\n  onClick?: (evt: LeafletMouseEvent) => void,\n  /** Optional icon for the marker, if not set a default one will be used. */\n  icon?: L.Icon | L.DivIcon\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/QueryParameterGuard.html":{"url":"guards/QueryParameterGuard.html","title":"guard - QueryParameterGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    QueryParameterGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/lib/guards/query-parameter.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard to check if certain query parameters are set.\nIn the data attribute of route it expects an optional redirectTo\ncontaining an Observable, a Promise or a direct\nUrlTree or a string that will be passed to Router#parseUrl\nand queryParams containing a string or an array of strings.\n\nredirect will be used when the check fails.\nqueryParams will be iterated to check for the keys\n\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/lib/guards/query-parameter.guard.ts:25\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Router used to parse redirect entries\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/guards/query-parameter.guard.ts:41\n                \n            \n\n\n            \n                \n                    Whether the route can be activated.\nFor more info check QueryParameterGuard.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently activated route snapshot\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state of the router\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise | boolean | UrlTree\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {Injectable} from \"@angular/core\";\nimport {\n  CanActivate,\n  Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree\n} from \"@angular/router\";\nimport {Observable} from \"rxjs\";\n\n/**\n * Guard to check if certain query parameters are set.\n *\n * In the `data` attribute of route it expects an optional `redirectTo`\n * containing an {@link Observable}, a {@link Promise} or a direct\n * {@link UrlTree} or a string that will be passed to {@link Router#parseUrl}\n * and `queryParams` containing a string or an array of strings.\n *\n * - `redirect` will be used when the check fails.\n * - `queryParams` will be iterated to check for the keys\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class QueryParameterGuard implements CanActivate {\n\n  /**\n   * Constructor.\n   * @param router Router used to parse redirect entries\n   */\n  constructor(private router: Router) {}\n\n  /**\n   * Whether the route can be activated.\n   *\n   * For more info check {@link QueryParameterGuard}.\n   *\n   * @param route Currently activated route snapshot\n   * @param state Current state of the router\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable | Promise | boolean | UrlTree {\n    let redirect  = route.data[\"redirect\"] ?? false;\n    if (typeof redirect === \"string\") redirect = this.router.parseUrl(redirect);\n    for (let param of [route.data[\"queryParams\"] ?? []].flat()) {\n      if (route.queryParams[param] === undefined) return redirect;\n    }\n    return true;\n  }\n\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ShapeData.html":{"url":"interfaces/ShapeData.html","title":"interface - ShapeData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ShapeData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/layer-data.ts\n        \n\n\n            \n                Description\n            \n            \n                Type to represent a single shape with all of its metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            geoJson\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            nutsKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        geoJson\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        geoJson:         GeoJsonObject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         GeoJsonObject\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    GeoJson representing the shape.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Key of the shape.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the shape.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nutsKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nutsKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Nomenclature of Territorial Units code of the shape.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as L from \"leaflet\";\n\n/**\n * GeoJSON data type used by Leaflet.\n * @private\n */\nexport type GeoJsonObject = Parameters[0];\n\n/** Type to represent a single shape with all of its metadata. */\nexport interface ShapeData {\n  /** Name of the shape. */\n  name: string,\n  /** Key of the shape. */\n  key: string,\n  /** Nomenclature of Territorial Units code of the shape. */\n  nutsKey: string,\n  /** GeoJson representing the shape. */\n  geoJson: GeoJsonObject\n}\n\n/** Type to represent layer data received from the geo data server. */\nexport interface LayerData {\n  /** Corner coordinates of a box containing all the shapes this displays. */\n  box: [[number, number], [number, number], [number, number], [number, number]],\n  /** List of shapes. */\n  shapes: ShapeData[]\n}\n\nexport default LayerData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WisdomInterface.html":{"url":"interfaces/WisdomInterface.html","title":"interface - WisdomInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WisdomInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/WisdomInterface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for the wisdom modules.\nEvery wisdom module must provide such an object implementing this interface.\nThe object must be exported under the name \"wisdomInterface\".\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            route\n                                        \n                                \n                                \n                                        \n                                            scopes\n                                        \n                                \n                                \n                                        \n                                            translations\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        route\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        route:         Route\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Route\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The route that leads to this module.\nThis may also include guards but some guards will be automatically injected.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scopes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scopes:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The scopes required to see the component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translations:     Record>>>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record>>>\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The translations the modules provides and uses.\nThe top most entry should be the namespace, the following the component and\nin the component there should be keys for the translation keys.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {Route} from \"@angular/router\";\n\n/**\n * Interface for the wisdom modules.\n *\n * Every wisdom module must provide such an object implementing this interface.\n * The object must be exported under the name \"wisdomInterface\".\n */\nexport interface WisdomInterface {\n  /**\n   * The route that leads to this module.\n   * This may also include guards but some guards will be automatically injected.\n   */\n  route: Route;\n  /** The scopes required to see the component. */\n  scopes: string[];\n  /**\n   * The translations the modules provides and uses.\n   *\n   * The top most entry should be the namespace, the following the component and\n   * in the component there should be keys for the translation keys.\n   */\n  translations: Record>>>\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WisdomModule.html":{"url":"modules/WisdomModule.html","title":"module - WisdomModule","body":"\n                   \n\n\n\n\n    Modules\n    WisdomModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WisdomModule\n\n\n\ncluster_WisdomModule_exports\n\n\n\ncluster_WisdomModule_declarations\n\n\n\n\nBreadcrumbsComponent\n\nBreadcrumbsComponent\n\n\n\nWisdomModule\n\nWisdomModule\n\nWisdomModule -->\n\nBreadcrumbsComponent->WisdomModule\n\n\n\n\n\nBulmaIsToggleableDirective\n\nBulmaIsToggleableDirective\n\nWisdomModule -->\n\nBulmaIsToggleableDirective->WisdomModule\n\n\n\n\n\nIonIconComponent\n\nIonIconComponent\n\nWisdomModule -->\n\nIonIconComponent->WisdomModule\n\n\n\n\n\nMapComponent\n\nMapComponent\n\nWisdomModule -->\n\nMapComponent->WisdomModule\n\n\n\n\n\nBreadcrumbsComponent \n\nBreadcrumbsComponent \n\nBreadcrumbsComponent  -->\n\nWisdomModule->BreadcrumbsComponent \n\n\n\n\n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective  -->\n\nWisdomModule->BulmaIsToggleableDirective \n\n\n\n\n\nIonIconComponent \n\nIonIconComponent \n\nIonIconComponent  -->\n\nWisdomModule->IonIconComponent \n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nWisdomModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/wisdom.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BreadcrumbsComponent\n                        \n                        \n                            BulmaIsToggleableDirective\n                        \n                        \n                            IonIconComponent\n                        \n                        \n                            MapComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BreadcrumbsComponent\n                        \n                        \n                            BulmaIsToggleableDirective\n                        \n                        \n                            IonIconComponent\n                        \n                        \n                            MapComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\nimport {RouterModule} from \"@angular/router\";\nimport {TranslateModule} from \"@ngx-translate/core\";\n\nimport {BreadcrumbsComponent} from \"./breadcrumbs/breadcrumbs.component\";\nimport {\n  BulmaIsToggleableDirective\n} from \"./bulma/bulma-is-toggleable.directive\";\nimport {IonIconComponent} from \"./ion-icon/ion-icon.component\";\nimport {MapComponent} from \"./map/map.component\";\n\n@NgModule({\n  declarations: [\n    IonIconComponent,\n    BulmaIsToggleableDirective,\n    MapComponent,\n    BreadcrumbsComponent\n  ],\n  imports: [\n    TranslateModule,\n    CommonModule,\n    RouterModule\n  ],\n  exports: [\n    IonIconComponent,\n    BulmaIsToggleableDirective,\n    MapComponent,\n    BreadcrumbsComponent\n  ]\n})\nexport class WisdomModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/WisdomInterface.ts\n            \n            interface\n            WisdomInterface\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/breadcrumbs/breadcrumbs.component.ts\n            \n            component\n            BreadcrumbsComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/lib/breadcrumbs/breadcrumbs.service.ts\n            \n            injectable\n            BreadcrumbsService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/breadcrumbs/breadcrumbs.service.ts\n            \n            interface\n            Breadcrumb\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/bulma/bulma-is-toggleable.directive.ts\n            \n            directive\n            BulmaIsToggleableDirective\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/guards/query-parameter.guard.ts\n            \n            guard\n            QueryParameterGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-api-url.ts\n            \n            variable\n            USE_API_URL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-base-url.ts\n            \n            variable\n            USE_BASE_URL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-cache.ts\n            \n            variable\n            USE_CACHE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-error-curtain.ts\n            \n            variable\n            USE_ERROR_CURTAIN\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-loader.ts\n            \n            variable\n            USE_LOADER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/ion-icon/ion-icon.component.ts\n            \n            component\n            IonIconComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/map/invert-selection.ts\n            \n            variable\n            control\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/layer-data.ts\n            \n            interface\n            LayerData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/map/layer-data.ts\n            \n            interface\n            ShapeData\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/map/map.component.ts\n            \n            component\n            MapComponent\n            \n                100 %\n                (29/29)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            injectable\n            MapService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            interface\n            MapDB\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            API_URL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            DB_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            SCHEMA_V\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/marker.ts\n            \n            interface\n            Marker\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/map/resolution.ts\n            \n            function\n            toEnum\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/resolution.ts\n            \n            function\n            toKeyLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            getResolvedUrl\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            prettyPrintNum\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            stringToColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            translateObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            tupleSwap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.4.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^14.0.3\n        \n            @angular/core : ^14.0.3\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Resolution   (src/.../resolution.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/map/resolution.ts\n    \n        \n            \n                \n                    \n                        \n                        Resolution\n                    \n                \n                    \n                        \n                            Resolutions the map may display.\n\n                        \n                    \n                        \n                            \n                                 STATE\n                            \n                        \n                        \n                            \n                                Value : state\n                            \n                        \n                        \n                            \n                                 DISTRICT\n                            \n                        \n                        \n                            \n                                Value : district\n                            \n                        \n                        \n                            \n                                 ADMINISTRATION\n                            \n                        \n                        \n                            \n                                Value : administration\n                            \n                        \n                        \n                            \n                                 MUNICIPAL\n                            \n                        \n                        \n                            \n                                Value : municipal\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getResolvedUrl   (src/.../util.ts)\n                        \n                        \n                            prettyPrintNum   (src/.../util.ts)\n                        \n                        \n                            stringToColor   (src/.../util.ts)\n                        \n                        \n                            toEnum   (src/.../resolution.ts)\n                        \n                        \n                            toKeyLength   (src/.../resolution.ts)\n                        \n                        \n                            translateObject   (src/.../util.ts)\n                        \n                        \n                            tupleSwap   (src/.../util.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getResolvedUrl\n                        \n                    \n                \n            \n            \n                \ngetResolvedUrl(route: ActivatedRouteSnapshot)\n                \n            \n\n\n\n\n            \n                \n                    Function to return a fully resolved url in a string from an activated route\nsnapshot.\nRecreated by this solution on StackOverflow.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Route snapshot of a component.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prettyPrintNum\n                        \n                    \n                \n            \n            \n                \nprettyPrintNum(num: number)\n                \n            \n\n\n\n\n            \n                \n                    Returns a number presentation where every third digit from the end is\nseparated by a dot.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Number to pretty print\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            prettyPrintNum(12345678) =&gt; &quot;12.345.678&quot;\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stringToColor\n                        \n                    \n                \n            \n            \n                \nstringToColor(str: string, map?: Record)\n                \n            \n\n\n\n\n            \n                \n                    Generates deterministically a hex color code from any string.\nThis is a modernized version of this\nStackOverflow reply.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A string to generate a hex color for\n\n                                    \n                                \n                                \n                                    map\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A color map for predefined strings\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A hex color code in the style of '#abc123'\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        translateObject\n                        \n                    \n                \n            \n            \n                \ntranslateObject(service: TranslateService, obj: T)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to translate strings in any data object using the given\ntranslate service.\nInternally the instant() method is used, causing this to be sync, beware.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    service\n                                    \n                                            TranslateService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Translate service to translate with\n\n                                    \n                                \n                                \n                                    obj\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to iterate and translate through\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tupleSwap\n                        \n                    \n                \n            \n            \n                \ntupleSwap(tuple)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to swap the values of a tuple.\nUseful if coordinates are in the wrong order.\n(e.g. geojson to leaflet)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tuple\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Tuple of two values\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/lib/map/resolution.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toEnum\n                        \n                    \n                \n            \n            \n                \ntoEnum(length: number)\n                \n            \n\n\n\n\n            \n                \n                    Get the Resolution from a key length.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key length\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Resolution | undefined\n\n                    \n                    \n                        Resolution if found, otherwise undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toKeyLength\n                        \n                    \n                \n            \n            \n                \ntoKeyLength(res: Resolution)\n                \n            \n\n\n\n\n            \n                \n                    Transforms a Resolution into the key length.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                                Resolution\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Resolution to find key length\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WisdomModule\n\n\n\ncluster_WisdomModule_declarations\n\n\n\ncluster_WisdomModule_exports\n\n\n\n\nBreadcrumbsComponent\n\nBreadcrumbsComponent\n\n\n\nWisdomModule\n\nWisdomModule\n\nWisdomModule -->\n\nBreadcrumbsComponent->WisdomModule\n\n\n\n\n\nBulmaIsToggleableDirective\n\nBulmaIsToggleableDirective\n\nWisdomModule -->\n\nBulmaIsToggleableDirective->WisdomModule\n\n\n\n\n\nIonIconComponent\n\nIonIconComponent\n\nWisdomModule -->\n\nIonIconComponent->WisdomModule\n\n\n\n\n\nMapComponent\n\nMapComponent\n\nWisdomModule -->\n\nMapComponent->WisdomModule\n\n\n\n\n\nBreadcrumbsComponent \n\nBreadcrumbsComponent \n\nBreadcrumbsComponent  -->\n\nWisdomModule->BreadcrumbsComponent \n\n\n\n\n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective  -->\n\nWisdomModule->BulmaIsToggleableDirective \n\n\n\n\n\nIonIconComponent \n\nIonIconComponent \n\nIonIconComponent  -->\n\nWisdomModule->IonIconComponent \n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nWisdomModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        WisdomModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GeoJsonObject   (src/.../layer-data.ts)\n                        \n                        \n                            GeoJsonObject   (src/.../map.component.ts)\n                        \n                        \n                            LayerConfig   (src/.../map.component.ts)\n                        \n                        \n                            LayerKey   (src/.../map.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/map/layer-data.ts\n    \n    \n        \n            \n                \n                    \n                    GeoJsonObject\n                \n            \n            \n                \n                    GeoJSON data type used by Leaflet.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/lib/map/map.component.ts\n    \n    \n        \n            \n                \n                    \n                    GeoJsonObject\n                \n            \n            \n                \n                    GeoJSON data type used by Leaflet.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LayerConfig\n                \n            \n            \n                \n                    A layer config for the input of MapComponent.inputLayers.\n\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LayerKey\n                \n            \n            \n                \n                    Type alias to enforce the meaning of the layer keys.\n\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            API_URL   (src/.../map.service.ts)\n                        \n                        \n                            control   (src/.../invert-selection.ts)\n                        \n                        \n                            DB_NAME   (src/.../map.service.ts)\n                        \n                        \n                            SCHEMA_V   (src/.../map.service.ts)\n                        \n                        \n                            USE_API_URL   (src/.../use-api-url.ts)\n                        \n                        \n                            USE_BASE_URL   (src/.../use-base-url.ts)\n                        \n                        \n                            USE_CACHE   (src/.../use-cache.ts)\n                        \n                        \n                            USE_ERROR_CURTAIN   (src/.../use-error-curtain.ts)\n                        \n                        \n                            USE_LOADER   (src/.../use-loader.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/map/map.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        API_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"geodata\"\n                    \n                \n\n            \n                \n                    API url for the map to request data from.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DB_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"map-db\"\n                    \n                \n\n            \n                \n                    Indexed DB name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SCHEMA_V\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 2\n                    \n                \n\n            \n                \n                    Indexed DB schema version.\n\n                \n            \n\n        \n    \n\n    src/lib/map/invert-selection.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  invertSelection: (callback: (arg0: MouseEvent) => void, options?: L.ControlOptions) => {\n    let InvertSelection = L.Control.extend({\n      options: {\n        position: \"topright\"\n      },\n      initialize: function (options: any) {\n        L.Util.setOptions(this, options);\n      },\n      onAdd: function (map: L.Map) {\n        let centerContent = [\n          \"is-flex is-align-content-center\",\n          \"is-align-items-center\",\n          \"is-justify-content-center\"\n        ].join(\" \");\n\n        let container = L.DomUtil.create(\n          \"div\",\n          \"select-all-container leaflet-control-layers leaflet-control\"\n        );\n        container.addEventListener(\"click\", callback);\n        let button = L.DomUtil.create(\n          \"a\",\n          \"leaflet-control-layers-toggle \" + centerContent,\n          container\n        );\n        button.style.backgroundImage = \"none\";\n        let icon = L.DomUtil.create(\n          \"ion-icon\",\n          \"select-all-icon\",\n          button\n        );\n        icon.style.pointerEvents = \"none\";\n        icon.setAttribute(\"name\", \"extension-puzzle\");\n        icon.setAttribute(\"size\", \"large\");\n        icon.style.color = \"#a0a0a0\";\n        return container;\n      }\n    });\n    return new InvertSelection(options);\n  }\n}\n                    \n                \n\n            \n                \n                    Custom control to invert the currently selected shapes on a\nMapComponent.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-api-url.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_API_URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => false)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if the api url should be used.\nDefaults to false.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-base-url.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_BASE_URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => true)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if the base url should be used.\nDefaults to true.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-cache.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_CACHE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => true)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if cache headers should be sent.\nDefaults to true.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-error-curtain.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_ERROR_CURTAIN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => true)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if requests that error should show\nthe error message on curtain covering the whole main container.\nDisable this if you want to handle errors yourself.\nDefaults to true.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-loader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_LOADER\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => false)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if loader should be shown.\nA given string will be run through the translator and therefore may get\ntranslated.\nUseful for longer loading times.\nDefaults to false.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
