var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/BarChartComponent.html",[0,0.437,1,0.657]],["body/components/BarChartComponent.html",[0,0.699,1,0.988,2,1.294,3,0.436,4,0.436,5,1.061,6,1.061,7,0.352,8,3.312,9,1.271,10,0.766,11,1.537,12,1.847,13,2.249,14,2.901,15,1.841,16,2.166,17,2.645,18,0.893,19,1.905,20,3.802,21,1.537,22,0.352,23,1.294,24,1.522,25,1.808,26,2.645,27,1.294,28,2.375,29,2.249,30,1.294,31,1.951,32,3.211,33,0.729,34,0.068,35,2.645,36,1.558,37,1.552,38,1.841,39,2.645,40,1.552,41,2.249,42,1.552,43,2.249,44,2.249,45,2.249,46,1.841,47,1.294,48,1.982,49,2.249,50,2.901,51,1.552,52,2.249,53,2.249,54,1.841,55,0.893,56,1.184,57,2.901,58,2.249,59,1.552,60,2.249,61,2.166,62,1.061,63,1.552,64,1.552,65,1.841,66,1.982,67,0.766,68,1.271,69,0.893,70,1.271,71,0.436,72,1.552,73,0.436,74,0.529,75,1.552,76,1.552,77,1.552,78,1.061,79,1.552,80,1.552,81,2.249,82,0.753,83,1.552,84,2.645,85,1.552,86,1.552,87,1.061,88,1.552,89,1.552,90,1.552,91,1.271,92,1.061,93,1.537,94,0.529,95,1.982,96,1.061,97,1.537,98,0.529,99,0.893,100,1.061,101,0.529,102,0.893,103,0.529,104,0.893,105,0.893,106,0.436,107,0.893,108,1.061,109,0.038,110,0.038]],["title/directives/BulmaIsToggleableDirective.html",[94,0.657,106,0.541]],["body/directives/BulmaIsToggleableDirective.html",[3,0.465,4,0.465,7,0.376,10,0.564,18,0.952,19,1.355,22,0.376,23,1.355,24,0.952,25,2.242,27,1.355,30,1.355,33,0.678,34,0.068,36,1.638,47,1.577,48,1.61,55,0.952,56,0.675,62,1.131,65,3.046,67,0.564,69,0.952,71,0.465,73,0.465,74,1.176,94,1.118,105,0.952,106,0.661,107,1.719,109,0.04,110,0.04,111,3.451,112,1.655,113,3.003,114,3.003,115,3.003,116,3.003,117,4.64,118,4.477,119,4.477,120,4.595,121,3.497,122,3.003,123,2.355,124,3.003,125,3.497,126,1.675,127,3.003,128,3.003,129,2.742,130,3.497,131,2.742,132,2.11,133,1.61,134,1.61,135,2.11,136,2.355,137,1.61,138,2.11,139,2.355,140,2.11,141,2.11,142,2.11,143,3.497,144,2.11,145,2.11,146,2.11,147,2.11,148,1.355,149,2.11,150,2.11,151,2.11,152,2.11,153,2.11,154,3.497,155,2.11,156,3.003,157,2.11,158,2.11]],["title/modules/ChartModule.html",[159,1.318,160,1.109]],["body/modules/ChartModule.html",[1,1.312,3,0.665,4,0.665,7,0.537,10,0.807,12,1.362,13,2.998,34,0.067,67,1.178,71,0.665,73,0.665,74,0.807,101,1.312,102,1.362,109,0.051,110,0.051,159,2.049,160,2.191,161,1.149,162,1.724,163,2.368,164,2.368,165,2.368,166,2.049,167,1.939,168,1.939,169,3.02,170,3.823,171,2.998,172,2.998,173,3.823,174,2.368,175,2.998,176,3.823,177,2.368]],["title/components/IonIconComponent.html",[0,0.437,98,0.657]],["body/components/IonIconComponent.html",[0,0.8,1,0.661,2,1.513,3,0.545,4,0.545,5,1.326,6,1.326,7,0.44,10,0.661,12,1.116,18,1.116,19,2.029,21,1.326,22,0.44,30,1.513,33,0.44,34,0.067,36,0.941,38,2.154,46,2.154,56,1.465,66,1.798,67,0.661,69,1.513,71,0.545,73,0.545,74,0.661,92,1.326,93,1.798,94,0.661,95,2.187,96,1.326,97,1.798,98,1.09,99,1.717,100,1.326,101,0.661,102,1.116,103,0.661,104,1.116,105,1.116,106,0.545,107,1.116,108,1.326,109,0.045,110,0.045,126,1.276,178,2.63,179,2.154,180,1.94,181,2.187,182,3.354,183,4.398,184,4.08,185,2.63,186,3.354,187,2.63,188,2.63,189,2.63,190,3.354,191,2.63,192,3.354,193,4.398,194,3.354,195,2.474,196,4.08,197,2.63,198,3.354,199,3.354,200,3.354,201,3.354,202,3.354,203,2.63,204,3.354,205,3.354,206,3.354,207,1.94]],["title/components/LineChartComponent.html",[0,0.437,101,0.657]],["body/components/LineChartComponent.html",[0,0.699,1,0.529,2,1.294,3,0.436,4,0.436,5,1.061,6,1.061,7,0.352,9,1.271,10,0.766,11,1.537,12,1.522,14,2.901,15,1.841,16,2.166,17,2.645,18,0.893,19,1.905,20,3.802,21,1.537,22,0.352,23,1.294,24,1.522,25,1.808,26,2.645,27,1.294,28,2.375,29,2.249,30,1.294,31,1.951,32,3.211,33,0.729,34,0.068,35,2.645,36,1.558,37,1.552,38,1.841,39,2.645,40,1.552,41,2.249,42,1.552,43,2.249,44,2.249,45,2.249,46,1.841,47,1.294,48,1.982,49,2.249,50,2.901,51,1.552,52,2.249,53,2.249,54,1.841,55,0.893,56,1.184,57,2.901,58,2.249,59,1.552,60,2.249,61,2.166,62,1.061,63,1.552,64,1.552,65,1.841,66,1.982,67,0.766,68,1.271,69,0.893,70,1.271,71,0.436,72,1.552,73,0.436,74,0.529,75,1.552,76,1.552,77,1.552,78,1.061,79,1.552,80,1.552,81,2.249,82,0.753,83,1.552,84,2.645,85,1.552,86,1.552,87,1.061,88,1.552,89,1.552,90,1.552,91,1.271,92,1.061,93,1.537,94,0.529,95,1.982,96,1.061,97,1.537,98,0.529,99,0.893,100,1.061,101,0.988,102,1.847,103,0.529,104,0.893,105,0.893,106,0.436,107,0.893,108,1.061,109,0.038,110,0.038,208,3.312]],["title/components/MapComponent.html",[0,0.437,103,0.657]],["body/components/MapComponent.html",[0,0.461,1,0.23,2,0.667,3,0.19,4,0.19,5,0.462,6,0.462,7,0.153,10,0.395,11,0.792,12,0.389,15,0.949,16,1.247,18,0.389,19,1.365,21,0.792,22,0.153,23,0.876,24,1.365,25,2.25,27,0.667,28,1.478,30,0.667,31,1.654,33,0.74,34,0.068,36,1.598,47,0.876,48,1.516,54,0.553,55,0.389,56,1.068,61,1.247,62,0.462,66,1.234,67,0.519,68,0.553,69,1.856,70,1.664,71,0.19,73,0.19,74,0.23,78,0.792,82,0.562,87,0.462,92,0.462,93,1.389,94,0.23,95,1.234,96,0.462,97,0.792,98,0.23,99,0.389,100,0.462,101,0.23,102,0.389,103,0.615,104,2.067,105,0.389,106,0.19,107,0.389,108,0.462,109,0.02,110,0.02,123,0.675,126,1.582,129,1.159,131,0.675,133,1.711,134,1.913,137,0.462,139,2.504,148,0.553,166,1.855,181,1.041,187,0.675,188,1.159,189,1.806,191,1.159,197,0.675,203,0.675,207,0.675,209,0.861,210,0.553,211,1.478,212,1.942,213,1.478,214,1.942,215,3.57,216,3.461,217,1.478,218,1.942,219,1.942,220,1.942,221,2.592,222,2.303,223,2.303,224,2.592,225,1.942,226,1.942,227,2.303,228,3.959,229,1.523,230,0.861,231,1.234,232,0.861,233,2.033,234,1.159,235,1.159,236,1.478,237,0.861,238,1.478,239,0.861,240,2.218,241,0.861,242,1.806,243,1.478,244,1.942,245,2.303,246,1.478,247,1.478,248,1.159,249,1.478,250,1.478,251,1.478,252,2.458,253,1.478,254,0.861,255,2.303,256,2.303,257,2.875,258,0.861,259,2.303,260,1.478,261,1.478,262,0.861,263,1.478,264,0.861,265,2.303,266,1.942,267,0.861,268,0.861,269,2.303,270,1.478,271,0.861,272,1.478,273,1.478,274,3.193,275,0.861,276,1.942,277,1.478,278,1.478,279,1.478,280,1.478,281,0.861,282,2.504,283,1.478,284,1.478,285,1.478,286,2.303,287,0.861,288,2.303,289,0.861,290,1.478,291,1.478,292,0.861,293,1.806,294,0.861,295,0.861,296,1.478,297,0.861,298,2.303,299,0.861,300,1.478,301,1.478,302,1.159,303,1.478,304,2.942,305,3.026,306,1.478,307,0.861,308,1.478,309,1.942,310,2.303,311,0.861,312,0.861,313,0.861,314,1.523,315,0.675,316,0.861,317,0.861,318,0.861,319,0.861,320,0.861,321,0.861,322,0.861,323,0.861,324,0.861,325,0.861,326,0.861,327,0.861,328,0.861,329,0.861,330,0.675,331,1.478,332,0.861,333,1.478,334,0.861,335,1.478,336,1.478,337,0.861,338,1.478,339,0.861,340,0.861,341,1.478,342,0.861,343,0.861,344,0.861,345,0.861,346,0.861,347,2.617,348,1.942,349,0.861,350,0.861,351,0.861,352,0.861,353,0.861,354,0.861,355,0.861,356,0.861,357,0.861,358,0.861,359,0.861,360,0.861,361,0.861,362,0.861,363,0.861,364,0.861,365,0.861,366,0.861,367,1.159,368,0.861,369,0.861,370,0.861,371,0.949,372,0.861,373,0.861,374,0.861,375,0.861,376,1.942,377,0.861,378,0.861,379,0.861,380,0.861,381,0.861,382,0.861,383,1.478,384,0.861,385,0.861,386,1.942,387,1.478,388,0.861,389,0.861,390,1.478,391,0.861,392,0.861,393,0.861,394,0.861,395,0.861,396,0.861,397,0.861,398,0.861,399,0.675,400,0.861,401,0.861,402,0.861,403,1.478,404,0.675,405,0.861,406,1.942,407,1.478,408,0.861,409,0.861,410,0.861,411,0.861,412,0.861,413,1.478,414,0.861,415,0.861,416,0.861,417,0.861,418,0.861,419,0.861,420,0.861,421,0.553,422,1.942,423,0.861,424,0.861,425,0.861,426,0.861,427,0.861,428,0.861,429,0.861,430,0.861,431,0.861,432,0.675,433,0.861,434,0.861,435,0.861,436,0.861,437,0.861,438,1.478,439,0.861,440,0.861,441,0.861,442,0.861]],["title/injectables/MapService.html",[231,1.318,443,1.318]],["body/injectables/MapService.html",[3,0.462,4,0.462,7,0.374,10,0.932,22,0.374,24,1.35,27,1.35,31,2.125,33,0.62,34,0.067,36,1.139,47,0.947,55,1.35,56,1.216,67,1.074,71,0.462,73,0.462,74,0.561,78,1.125,82,1.139,87,2.037,104,1.884,109,0.04,110,0.04,126,1.589,133,1.125,134,1.125,136,2.734,137,1.603,148,1.921,217,2.239,229,2.734,231,1.603,233,2.346,234,2.346,236,2.682,252,1.921,257,2.346,260,1.921,304,2.346,330,1.646,347,2.734,404,2.346,421,2.239,443,1.603,444,2.099,445,1.348,446,2.58,447,4.177,448,2.992,449,2.992,450,3.801,451,2.992,452,2.992,453,2.992,454,3.486,455,3.486,456,2.099,457,3.801,458,2.099,459,3.801,460,2.992,461,4.394,462,2.099,463,3.801,464,4.018,465,2.099,466,2.992,467,2.734,468,2.992,469,2.992,470,2.992,471,2.992,472,2.099,473,2.099,474,2.992,475,2.099,476,2.099,477,2.099,478,2.992,479,2.099,480,1.348,481,1.348,482,1.348,483,1.646,484,2.099,485,2.099,486,2.099,487,2.099,488,3.801,489,2.099,490,2.099,491,2.099,492,2.099,493,2.099,494,2.099,495,2.099,496,2.099,497,2.099,498,2.099,499,2.099,500,2.099]],["title/interfaces/WisdomInterface.html",[501,1.318,502,1.579]],["body/interfaces/WisdomInterface.html",[0,0.852,3,0.613,4,0.613,7,0.495,10,0.744,11,1.944,22,0.495,23,1.637,33,0.761,34,0.067,56,0.891,73,0.613,109,0.049,110,0.049,126,1.731,159,2.163,161,1.536,185,2.845,240,3.165,242,2.845,248,2.845,302,3.354,399,3.566,432,2.845,501,2.163,502,2.592,503,2.784,504,2.183,505,3.628,506,2.784,507,2.784,508,3.628,509,2.784,510,2.784,511,2.784,512,4.277,513,4.548,514,4.548,515,4.277,516,3.628,517,3.628,518,3.628,519,3.628,520,3.628]],["title/modules/WisdomModule.html",[159,1.318,521,1.318]],["body/modules/WisdomModule.html",[3,0.634,4,0.634,7,0.512,34,0.067,67,1.198,71,0.634,73,0.634,74,0.769,98,1.304,99,1.299,103,1.304,106,1.074,109,0.05,110,0.05,160,2.106,161,1.096,162,1.673,166,1.987,167,1.849,168,1.849,171,2.908,172,2.908,175,2.908,177,2.258,179,1.849,521,2.638,522,2.258,523,2.258,524,2.258,525,2.879,526,2.879,527,2.879,528,2.879,529,2.879,530,2.879]],["title/coverage.html",[531,2.619]],["body/coverage.html",[0,0.792,1,0.828,7,0.551,8,2.43,9,2.495,33,0.551,34,0.066,82,1.179,91,1.99,94,0.828,98,0.828,101,0.828,103,0.828,106,0.682,109,0.052,110,0.052,111,2.43,112,2.43,178,2.43,179,1.99,180,2.43,208,2.43,210,1.99,231,1.661,367,3.797,371,1.99,443,1.661,445,2.495,446,1.99,480,1.99,481,2.495,482,1.99,501,1.661,502,1.99,504,2.43,531,2.43,532,3.099,533,3.099,534,3.099,535,3.099,536,3.099,537,3.886,538,3.047,539,3.047,540,4.245,541,3.886,542,2.43,543,3.099,544,3.099,545,3.099,546,3.099,547,3.099,548,3.099]],["title/dependencies.html",[162,1.332,549,2.061]],["body/dependencies.html",[34,0.065,71,0.831,109,0.059,110,0.059,162,1.974,174,2.96,550,3.775,551,3.775,552,3.775,553,4.377]],["title/index.html",[22,0.437,554,1.928]],["body/index.html",[1,1.259,2,1.352,34,0.066,94,0.801,98,1.259,101,1.259,103,1.259,106,1.037,109,0.051,110,0.051,160,2.213,161,1.14,162,1.716,163,2.35,164,2.35,165,2.35,166,2.039,167,1.924,168,1.924,443,1.606,501,1.606,521,2.629,522,2.35,523,2.35,524,2.35,554,2.35,555,2.997,556,2.997,557,4.18]],["title/modules.html",[161,1.271]],["body/modules.html",[34,0.059,109,0.059,110,0.059,160,1.708,161,1.441,521,2.029,558,4.385,559,4.385,560,4.385,561,4.385]],["title/miscellaneous/typealiases.html",[562,1.104,563,2.953]],["body/miscellaneous/typealiases.html",[22,0.637,31,2.04,33,0.832,34,0.057,109,0.057,110,0.057,181,1.918,210,2.298,217,2.724,235,2.807,236,2.298,252,2.298,293,2.807,314,2.807,315,3.327,562,1.918,564,3.58,565,3.58,566,3.58,567,4.243,568,3.58,569,3.58,570,3.58,571,3.58]],["title/miscellaneous/variables.html",[562,1.104,572,2.316]],["body/miscellaneous/variables.html",[22,0.577,33,0.577,34,0.065,82,1.521,109,0.054,110,0.054,126,1.235,133,2.322,134,2.322,137,2.142,181,2.424,260,2.567,282,3.135,371,2.782,421,2.567,445,2.083,446,2.782,467,2.544,480,2.567,481,2.567,482,2.567,483,2.544,538,3.135,539,3.547,542,3.135,562,1.739,572,2.544,573,3.244,574,3.998,575,4.523,576,3.998]]],"invertedIndex":[["",{"_index":34,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":91,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"coverage.html":{}}}],["0/1",{"_index":546,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":557,"title":{},"body":{"index.html":{}}}],["1/1",{"_index":541,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":367,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["13.2.0",{"_index":553,"title":{},"body":{"dependencies.html":{}}}],["1f5aec",{"_index":261,"title":{},"body":{"components/MapComponent.html":{}}}],["2",{"_index":555,"title":{},"body":{"index.html":{}}}],["2.3.0",{"_index":551,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":543,"title":{},"body":{"coverage.html":{}}}],["22/22",{"_index":544,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":545,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":556,"title":{},"body":{"index.html":{}}}],["5/5",{"_index":535,"title":{},"body":{"coverage.html":{}}}],["500px",{"_index":286,"title":{},"body":{"components/MapComponent.html":{}}}],["53.1434501",{"_index":279,"title":{},"body":{"components/MapComponent.html":{}}}],["6/6",{"_index":536,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":310,"title":{},"body":{"components/MapComponent.html":{}}}],["7/7",{"_index":537,"title":{},"body":{"coverage.html":{}}}],["8.2145521",{"_index":280,"title":{},"body":{"components/MapComponent.html":{}}}],["accessors",{"_index":124,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["active",{"_index":119,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["actual_component",{"_index":108,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["add",{"_index":402,"title":{},"body":{"components/MapComponent.html":{}}}],["adds",{"_index":190,"title":{},"body":{"components/IonIconComponent.html":{}}}],["afterviewinit",{"_index":16,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["aliases",{"_index":564,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":187,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["already",{"_index":404,"title":{},"body":{"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["angular",{"_index":196,"title":{},"body":{"components/IonIconComponent.html":{}}}],["angular/common",{"_index":174,"title":{},"body":{"modules/ChartModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":475,"title":{},"body":{"injectables/MapService.html":{}}}],["angular/core",{"_index":71,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"modules/WisdomModule.html":{},"dependencies.html":{}}}],["any).options.padding",{"_index":366,"title":{},"body":{"components/MapComponent.html":{}}}],["api",{"_index":446,"title":{},"body":{"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["api_url",{"_index":482,"title":{},"body":{"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["application/json",{"_index":495,"title":{},"body":{"injectables/MapService.html":{}}}],["array",{"_index":246,"title":{},"body":{"components/MapComponent.html":{}}}],["assign",{"_index":414,"title":{},"body":{"components/MapComponent.html":{}}}],["async",{"_index":454,"title":{},"body":{"injectables/MapService.html":{}}}],["asynchronously",{"_index":466,"title":{},"body":{"injectables/MapService.html":{}}}],["automatic",{"_index":392,"title":{},"body":{"components/MapComponent.html":{}}}],["await",{"_index":488,"title":{},"body":{"injectables/MapService.html":{}}}],["awaited",{"_index":345,"title":{},"body":{"components/MapComponent.html":{}}}],["bar",{"_index":12,"title":{},"body":{"components/BarChartComponent.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["barchartcomponent",{"_index":1,"title":{"components/BarChartComponent.html":{}},"body":{"components/BarChartComponent.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"coverage.html":{},"index.html":{}}}],["base",{"_index":371,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["baselayerdisplayed",{"_index":376,"title":{},"body":{"components/MapComponent.html":{}}}],["boolean",{"_index":136,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"injectables/MapService.html":{}}}],["browse",{"_index":561,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":558,"title":{},"body":{"modules.html":{}}}],["bulma",{"_index":115,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["bulma/bulma",{"_index":526,"title":{},"body":{"modules/WisdomModule.html":{}}}],["bulmaistoggleabledirective",{"_index":106,"title":{"directives/BulmaIsToggleableDirective.html":{}},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["cache",{"_index":470,"title":{},"body":{"injectables/MapService.html":{}}}],["cached",{"_index":449,"title":{},"body":{"injectables/MapService.html":{}}}],["call",{"_index":53,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["catch(e",{"_index":357,"title":{},"body":{"components/MapComponent.html":{}}}],["caused",{"_index":431,"title":{},"body":{"components/MapComponent.html":{}}}],["center",{"_index":215,"title":{},"body":{"components/MapComponent.html":{}}}],["change",{"_index":430,"title":{},"body":{"components/MapComponent.html":{}}}],["changed",{"_index":52,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["changes",{"_index":57,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chart",{"_index":20,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chart'},{'name",{"_index":97,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["chart(ctx",{"_index":83,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chart.component",{"_index":176,"title":{},"body":{"modules/ChartModule.html":{}}}],["chart.component.ts",{"_index":9,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"coverage.html":{}}}],["chart.component.ts:21",{"_index":64,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chart.component.ts:24",{"_index":37,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chart.component.ts:27",{"_index":40,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chart.component.ts:30",{"_index":59,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chart.component.ts:33",{"_index":42,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chart.component.ts:46",{"_index":51,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chart.js",{"_index":14,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chart.js/auto",{"_index":72,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chart/chart.module",{"_index":528,"title":{},"body":{"modules/WisdomModule.html":{}}}],["chartdata",{"_index":35,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chartelement",{"_index":26,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chartmodule",{"_index":160,"title":{"modules/ChartModule.html":{}},"body":{"modules/ChartModule.html":{},"modules/WisdomModule.html":{},"index.html":{},"modules.html":{}}}],["chartoptions",{"_index":39,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["charts",{"_index":13,"title":{},"body":{"components/BarChartComponent.html":{},"modules/ChartModule.html":{}}}],["check",{"_index":426,"title":{},"body":{"components/MapComponent.html":{}}}],["class",{"_index":74,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"modules/WisdomModule.html":{}}}],["classes",{"_index":120,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["classes.trim().split(/\\s",{"_index":152,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["click",{"_index":123,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{}}}],["clicked",{"_index":131,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{}}}],["clicking",{"_index":116,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["client",{"_index":460,"title":{},"body":{"injectables/MapService.html":{}}}],["cluster_chartmodule",{"_index":163,"title":{},"body":{"modules/ChartModule.html":{},"index.html":{}}}],["cluster_chartmodule_declarations",{"_index":165,"title":{},"body":{"modules/ChartModule.html":{},"index.html":{}}}],["cluster_chartmodule_exports",{"_index":164,"title":{},"body":{"modules/ChartModule.html":{},"index.html":{}}}],["cluster_wisdommodule",{"_index":522,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["cluster_wisdommodule_declarations",{"_index":523,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["cluster_wisdommodule_exports",{"_index":524,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["code",{"_index":256,"title":{},"body":{"components/MapComponent.html":{}}}],["color",{"_index":386,"title":{},"body":{"components/MapComponent.html":{}}}],["commonmodule",{"_index":173,"title":{},"body":{"modules/ChartModule.html":{}}}],["complaining",{"_index":201,"title":{},"body":{"components/IonIconComponent.html":{}}}],["component",{"_index":0,"title":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["component_template",{"_index":96,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"index.html":{}}}],["const",{"_index":78,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["constructor",{"_index":229,"title":{},"body":{"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["constructor(http",{"_index":456,"title":{},"body":{"injectables/MapService.html":{}}}],["constructor(private",{"_index":330,"title":{},"body":{"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["constructor(service",{"_index":230,"title":{},"body":{"components/MapComponent.html":{}}}],["container",{"_index":442,"title":{},"body":{"components/MapComponent.html":{}}}],["containing",{"_index":170,"title":{},"body":{"modules/ChartModule.html":{}}}],["content",{"_index":494,"title":{},"body":{"injectables/MapService.html":{}}}],["context",{"_index":498,"title":{},"body":{"injectables/MapService.html":{}}}],["context/use",{"_index":481,"title":{},"body":{"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["control",{"_index":298,"title":{},"body":{"components/MapComponent.html":{}}}],["control.addbaselayer(geojsonlayer",{"_index":424,"title":{},"body":{"components/MapComponent.html":{}}}],["control.addto(map",{"_index":435,"title":{},"body":{"components/MapComponent.html":{}}}],["coordinates",{"_index":238,"title":{},"body":{"components/MapComponent.html":{}}}],["correct",{"_index":198,"title":{},"body":{"components/IonIconComponent.html":{}}}],["coverage",{"_index":531,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":45,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["ctx",{"_index":79,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["current",{"_index":427,"title":{},"body":{"components/MapComponent.html":{}}}],["currently",{"_index":139,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{}}}],["d35a0c",{"_index":253,"title":{},"body":{"components/MapComponent.html":{}}}],["data",{"_index":31,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"miscellaneous/typealiases.html":{}}}],["data.ts",{"_index":567,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["datasets",{"_index":85,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["dbkey",{"_index":486,"title":{},"body":{"injectables/MapService.html":{}}}],["declarations",{"_index":171,"title":{},"body":{"modules/ChartModule.html":{},"modules/WisdomModule.html":{}}}],["decorators",{"_index":62,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["default",{"_index":133,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":282,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":36,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["delete",{"_index":409,"title":{},"body":{"components/MapComponent.html":{}}}],["dependencies",{"_index":162,"title":{"dependencies.html":{}},"body":{"modules/ChartModule.html":{},"modules/WisdomModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":10,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{}}}],["determine",{"_index":576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["direction",{"_index":395,"title":{},"body":{"components/MapComponent.html":{}}}],["directive",{"_index":94,"title":{"directives/BulmaIsToggleableDirective.html":{}},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"coverage.html":{},"index.html":{}}}],["directives",{"_index":105,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["display",{"_index":38,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{}}}],["displayed",{"_index":242,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["displaying",{"_index":11,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["documentation",{"_index":532,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["efforts",{"_index":433,"title":{},"body":{"components/MapComponent.html":{}}}],["element",{"_index":66,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["elementclasses",{"_index":125,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["elementclasses(classes",{"_index":150,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["elementref",{"_index":61,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["elements",{"_index":301,"title":{},"body":{"components/MapComponent.html":{}}}],["ellayername",{"_index":439,"title":{},"body":{"components/MapComponent.html":{}}}],["elresolution",{"_index":438,"title":{},"body":{"components/MapComponent.html":{}}}],["emit",{"_index":270,"title":{},"body":{"components/MapComponent.html":{}}}],["emitselection",{"_index":222,"title":{},"body":{"components/MapComponent.html":{}}}],["encodeuri(`${api_url}/${layername}/${layerresolution",{"_index":491,"title":{},"body":{"injectables/MapService.html":{}}}],["entry",{"_index":515,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["entrycomponent",{"_index":512,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["eventemitter",{"_index":266,"title":{},"body":{"components/MapComponent.html":{}}}],["everything",{"_index":471,"title":{},"body":{"injectables/MapService.html":{}}}],["example",{"_index":326,"title":{},"body":{"components/MapComponent.html":{}}}],["executed",{"_index":130,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["expects",{"_index":243,"title":{},"body":{"components/MapComponent.html":{}}}],["export",{"_index":73,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["exported",{"_index":510,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["exports",{"_index":172,"title":{},"body":{"modules/ChartModule.html":{},"modules/WisdomModule.html":{}}}],["false",{"_index":137,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["feature",{"_index":389,"title":{},"body":{"components/MapComponent.html":{}}}],["feature.properties.name",{"_index":397,"title":{},"body":{"components/MapComponent.html":{}}}],["fetch",{"_index":447,"title":{},"body":{"injectables/MapService.html":{}}}],["fetched",{"_index":448,"title":{},"body":{"injectables/MapService.html":{}}}],["fetching",{"_index":290,"title":{},"body":{"components/MapComponent.html":{}}}],["fetchlayerdata",{"_index":455,"title":{},"body":{"injectables/MapService.html":{}}}],["fetchlayerdata(layername",{"_index":462,"title":{},"body":{"injectables/MapService.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{}}}],["filter(([ellayername",{"_index":437,"title":{},"body":{"components/MapComponent.html":{}}}],["find",{"_index":202,"title":{},"body":{"components/IonIconComponent.html":{}}}],["first",{"_index":419,"title":{},"body":{"components/MapComponent.html":{}}}],["firstvaluefrom",{"_index":476,"title":{},"body":{"injectables/MapService.html":{}}}],["firstvaluefrom(this.http.get(url",{"_index":492,"title":{},"body":{"injectables/MapService.html":{}}}],["following",{"_index":520,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["force",{"_index":464,"title":{},"body":{"injectables/MapService.html":{}}}],["function",{"_index":129,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{}}}],["generated",{"_index":60,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["geo",{"_index":236,"title":{},"body":{"components/MapComponent.html":{},"injectables/MapService.html":{},"miscellaneous/typealiases.html":{}}}],["geodata",{"_index":483,"title":{},"body":{"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["geojson",{"_index":314,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["geojsonlayer",{"_index":383,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonlayer.adddata(object.assign(geojson",{"_index":418,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonlayer.addto(map",{"_index":420,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonobject",{"_index":315,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["getelementclasses",{"_index":140,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["given",{"_index":273,"title":{},"body":{"components/MapComponent.html":{}}}],["handler",{"_index":417,"title":{},"body":{"components/MapComponent.html":{}}}],["headers",{"_index":493,"title":{},"body":{"injectables/MapService.html":{}}}],["height",{"_index":216,"title":{},"body":{"components/MapComponent.html":{}}}],["here",{"_index":189,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["hex",{"_index":255,"title":{},"body":{"components/MapComponent.html":{}}}],["highlight",{"_index":401,"title":{},"body":{"components/MapComponent.html":{}}}],["holds",{"_index":300,"title":{},"body":{"components/MapComponent.html":{}}}],["host",{"_index":65,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{}}}],["hostbinding",{"_index":144,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostbinding(\"class",{"_index":147,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener",{"_index":145,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener(\"click",{"_index":153,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener('click",{"_index":132,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlisteners",{"_index":122,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["html",{"_index":93,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["http",{"_index":459,"title":{},"body":{"injectables/MapService.html":{}}}],["httpclient",{"_index":457,"title":{},"body":{"injectables/MapService.html":{}}}],["httpcontext",{"_index":473,"title":{},"body":{"injectables/MapService.html":{}}}],["httpcontext().set(use_api_url",{"_index":499,"title":{},"body":{"injectables/MapService.html":{}}}],["httpcontexttoken",{"_index":575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpheaders",{"_index":474,"title":{},"body":{"injectables/MapService.html":{}}}],["https://ionic.io/ionicons",{"_index":206,"title":{},"body":{"components/IonIconComponent.html":{}}}],["https://tile.openstreetmap.org/{z}/{x}/{y}.png",{"_index":306,"title":{},"body":{"components/MapComponent.html":{}}}],["https://wisdom04.vlba.uni",{"_index":249,"title":{},"body":{"components/MapComponent.html":{}}}],["icon",{"_index":193,"title":{},"body":{"components/IonIconComponent.html":{}}}],["icon'},{'name",{"_index":100,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["icon.component",{"_index":529,"title":{},"body":{"modules/WisdomModule.html":{}}}],["icon.component.ts",{"_index":180,"title":{},"body":{"components/IonIconComponent.html":{},"coverage.html":{}}}],["icon.component.ts:22",{"_index":195,"title":{},"body":{"components/IonIconComponent.html":{}}}],["icon/ion",{"_index":179,"title":{},"body":{"components/IonIconComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{}}}],["icons",{"_index":183,"title":{},"body":{"components/IonIconComponent.html":{}}}],["idb",{"_index":478,"title":{},"body":{"injectables/MapService.html":{}}}],["idb.get(dbkey",{"_index":490,"title":{},"body":{"injectables/MapService.html":{}}}],["idb.keys()).includes(dbkey",{"_index":489,"title":{},"body":{"injectables/MapService.html":{}}}],["idb.set(dbkey",{"_index":500,"title":{},"body":{"injectables/MapService.html":{}}}],["identifier",{"_index":533,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":469,"title":{},"body":{"injectables/MapService.html":{}}}],["implementing",{"_index":509,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["implements",{"_index":15,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["import",{"_index":67,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"modules/WisdomModule.html":{}}}],["imports",{"_index":177,"title":{},"body":{"modules/ChartModule.html":{},"modules/WisdomModule.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexeddb",{"_index":450,"title":{},"body":{"injectables/MapService.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["init",{"_index":276,"title":{},"body":{"components/MapComponent.html":{}}}],["initialized",{"_index":44,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["inject",{"_index":182,"title":{},"body":{"components/IonIconComponent.html":{}}}],["injectable",{"_index":443,"title":{"injectables/MapService.html":{}},"body":{"injectables/MapService.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":444,"title":{},"body":{"injectables/MapService.html":{}}}],["inner",{"_index":278,"title":{},"body":{"components/MapComponent.html":{}}}],["input",{"_index":69,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["input(\"center",{"_index":322,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"class",{"_index":146,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["input(\"data",{"_index":76,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["input(\"height",{"_index":318,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"layers",{"_index":327,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"options",{"_index":77,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["input(\"selectedcolor",{"_index":329,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"tileurl",{"_index":320,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"unselectedcolor",{"_index":328,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"zoom",{"_index":324,"title":{},"body":{"components/MapComponent.html":{}}}],["inputcenter",{"_index":323,"title":{},"body":{"components/MapComponent.html":{}}}],["inputheight",{"_index":319,"title":{},"body":{"components/MapComponent.html":{}}}],["inputs",{"_index":30,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["inputtileurl",{"_index":321,"title":{},"body":{"components/MapComponent.html":{}}}],["inputzoom",{"_index":325,"title":{},"body":{"components/MapComponent.html":{}}}],["interact",{"_index":234,"title":{},"body":{"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["interface",{"_index":501,"title":{"interfaces/WisdomInterface.html":{}},"body":{"interfaces/WisdomInterface.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":503,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["internally",{"_index":269,"title":{},"body":{"components/MapComponent.html":{}}}],["ion",{"_index":99,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{}}}],["ioniconcomponent",{"_index":98,"title":{"components/IonIconComponent.html":{}},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["ionicons",{"_index":184,"title":{},"body":{"components/IonIconComponent.html":{}}}],["isactive",{"_index":121,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["join",{"_index":158,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["js",{"_index":192,"title":{},"body":{"components/IonIconComponent.html":{}}}],["json",{"_index":497,"title":{},"body":{"injectables/MapService.html":{}}}],["key",{"_index":244,"title":{},"body":{"components/MapComponent.html":{}}}],["keys",{"_index":302,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["keyval",{"_index":479,"title":{},"body":{"injectables/MapService.html":{}}}],["l",{"_index":312,"title":{},"body":{"components/MapComponent.html":{}}}],["l.control.layers",{"_index":372,"title":{},"body":{"components/MapComponent.html":{}}}],["l.geojson(undefined",{"_index":384,"title":{},"body":{"components/MapComponent.html":{}}}],["l.layerscontrolevent",{"_index":434,"title":{},"body":{"components/MapComponent.html":{}}}],["l.map",{"_index":291,"title":{},"body":{"components/MapComponent.html":{}}}],["l.map(nativemapelement",{"_index":361,"title":{},"body":{"components/MapComponent.html":{}}}],["l.path",{"_index":400,"title":{},"body":{"components/MapComponent.html":{}}}],["l.tilelayer(this.tileurl).addto(map",{"_index":368,"title":{},"body":{"components/MapComponent.html":{}}}],["latitude",{"_index":284,"title":{},"body":{"components/MapComponent.html":{}}}],["layer",{"_index":252,"title":{},"body":{"components/MapComponent.html":{},"injectables/MapService.html":{},"miscellaneous/typealiases.html":{}}}],["layer.bindtooltip(feature.properties.name",{"_index":394,"title":{},"body":{"components/MapComponent.html":{}}}],["layer.on(\"click",{"_index":396,"title":{},"body":{"components/MapComponent.html":{}}}],["layer_name",{"_index":245,"title":{},"body":{"components/MapComponent.html":{}}}],["layer_name.resolution.shape",{"_index":303,"title":{},"body":{"components/MapComponent.html":{}}}],["layer_resolutions",{"_index":247,"title":{},"body":{"components/MapComponent.html":{}}}],["layerdata",{"_index":217,"title":{},"body":{"components/MapComponent.html":{},"injectables/MapService.html":{},"miscellaneous/typealiases.html":{}}}],["layerdata![layername][resolution",{"_index":354,"title":{},"body":{"components/MapComponent.html":{}}}],["layerdata[layername",{"_index":350,"title":{},"body":{"components/MapComponent.html":{}}}],["layername",{"_index":347,"title":{},"body":{"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["layerresolution",{"_index":463,"title":{},"body":{"injectables/MapService.html":{}}}],["layers",{"_index":224,"title":{},"body":{"components/MapComponent.html":{}}}],["lazily",{"_index":453,"title":{},"body":{"injectables/MapService.html":{}}}],["leaflet",{"_index":293,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["legend",{"_index":92,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["level",{"_index":265,"title":{},"body":{"components/MapComponent.html":{}}}],["line",{"_index":102,"title":{},"body":{"components/BarChartComponent.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["linechartcomponent",{"_index":101,"title":{"components/LineChartComponent.html":{}},"body":{"components/BarChartComponent.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"coverage.html":{},"index.html":{}}}],["link",{"_index":207,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["literal",{"_index":571,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["longitude",{"_index":283,"title":{},"body":{"components/MapComponent.html":{}}}],["made",{"_index":58,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["make",{"_index":391,"title":{},"body":{"components/MapComponent.html":{}}}],["making",{"_index":113,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["map",{"_index":104,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["map(([layername",{"_index":440,"title":{},"body":{"components/MapComponent.html":{}}}],["map(str",{"_index":363,"title":{},"body":{"components/MapComponent.html":{}}}],["map.component.css",{"_index":214,"title":{},"body":{"components/MapComponent.html":{}}}],["map.getrenderer(map",{"_index":365,"title":{},"body":{"components/MapComponent.html":{}}}],["map.on(\"baselayerchange",{"_index":425,"title":{},"body":{"components/MapComponent.html":{}}}],["map.service",{"_index":313,"title":{},"body":{"components/MapComponent.html":{}}}],["map/map.component",{"_index":530,"title":{},"body":{"modules/WisdomModule.html":{}}}],["map_layer_data:${layername}:${layerresolution",{"_index":487,"title":{},"body":{"injectables/MapService.html":{}}}],["mapcomponent",{"_index":103,"title":{"components/MapComponent.html":{}},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["mapelement",{"_index":218,"title":{},"body":{"components/MapComponent.html":{}}}],["maps",{"_index":211,"title":{},"body":{"components/MapComponent.html":{}}}],["mapservice",{"_index":231,"title":{"injectables/MapService.html":{}},"body":{"components/MapComponent.html":{},"injectables/MapService.html":{},"coverage.html":{}}}],["matching",{"_index":110,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":18,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["methods",{"_index":27,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["miscellaneous",{"_index":562,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":159,"title":{"modules/ChartModule.html":{},"modules/WisdomModule.html":{}},"body":{"modules/ChartModule.html":{},"interfaces/WisdomInterface.html":{}}}],["modules",{"_index":161,"title":{"modules.html":{}},"body":{"modules/ChartModule.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"index.html":{},"modules.html":{}}}],["name",{"_index":56,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{}}}],["names",{"_index":203,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["namespace",{"_index":519,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["nativemapelement",{"_index":359,"title":{},"body":{"components/MapComponent.html":{}}}],["necessary",{"_index":199,"title":{},"body":{"components/IonIconComponent.html":{}}}],["needed",{"_index":197,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["new",{"_index":82,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ngafterviewinit",{"_index":28,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["ngmodule",{"_index":175,"title":{},"body":{"modules/ChartModule.html":{},"modules/WisdomModule.html":{}}}],["ngonchanges",{"_index":29,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["ngonchanges(changes",{"_index":49,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["ngoninit",{"_index":223,"title":{},"body":{"components/MapComponent.html":{}}}],["node",{"_index":117,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["number",{"_index":309,"title":{},"body":{"components/MapComponent.html":{}}}],["object",{"_index":508,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["object.entries(layerdata",{"_index":377,"title":{},"body":{"components/MapComponent.html":{}}}],["object.entries(resolutions",{"_index":378,"title":{},"body":{"components/MapComponent.html":{}}}],["object.entries(this.layers",{"_index":349,"title":{},"body":{"components/MapComponent.html":{}}}],["object.values(this.selectedshapes",{"_index":436,"title":{},"body":{"components/MapComponent.html":{}}}],["official",{"_index":204,"title":{},"body":{"components/IonIconComponent.html":{}}}],["oldenburg",{"_index":285,"title":{},"body":{"components/MapComponent.html":{}}}],["oldenburg.de/repos/service",{"_index":250,"title":{},"body":{"components/MapComponent.html":{}}}],["onchanges",{"_index":17,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["oneachfeature",{"_index":388,"title":{},"body":{"components/MapComponent.html":{}}}],["oninit",{"_index":212,"title":{},"body":{"components/MapComponent.html":{}}}],["optimize",{"_index":381,"title":{},"body":{"components/MapComponent.html":{}}}],["optional",{"_index":24,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["options",{"_index":32,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["osm",{"_index":308,"title":{},"body":{"components/MapComponent.html":{}}}],["out",{"_index":168,"title":{},"body":{"modules/ChartModule.html":{},"modules/WisdomModule.html":{},"index.html":{}}}],["output",{"_index":70,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["outputs",{"_index":227,"title":{},"body":{"components/MapComponent.html":{}}}],["over",{"_index":429,"title":{},"body":{"components/MapComponent.html":{}}}],["overview",{"_index":554,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":549,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":87,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["parameters",{"_index":55,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["parameters[0",{"_index":316,"title":{},"body":{"components/MapComponent.html":{}}}],["parsefloat(str",{"_index":364,"title":{},"body":{"components/MapComponent.html":{}}}],["parseint(this.inputzoom",{"_index":339,"title":{},"body":{"components/MapComponent.html":{}}}],["part",{"_index":375,"title":{},"body":{"components/MapComponent.html":{}}}],["passed",{"_index":41,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["path",{"_index":399,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["path.bringtoback",{"_index":408,"title":{},"body":{"components/MapComponent.html":{}}}],["path.bringtofront",{"_index":411,"title":{},"body":{"components/MapComponent.html":{}}}],["path.setstyle",{"_index":407,"title":{},"body":{"components/MapComponent.html":{}}}],["peer",{"_index":552,"title":{},"body":{"dependencies.html":{}}}],["preffered",{"_index":428,"title":{},"body":{"components/MapComponent.html":{}}}],["private",{"_index":25,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["promise",{"_index":288,"title":{},"body":{"components/MapComponent.html":{}}}],["promise(async",{"_index":342,"title":{},"body":{"components/MapComponent.html":{}}}],["promise.all(requests",{"_index":355,"title":{},"body":{"components/MapComponent.html":{}}}],["properties",{"_index":23,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["property",{"_index":415,"title":{},"body":{"components/MapComponent.html":{}}}],["provide",{"_index":506,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["providedin",{"_index":484,"title":{},"body":{"injectables/MapService.html":{}}}],["provides",{"_index":517,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["put",{"_index":379,"title":{},"body":{"components/MapComponent.html":{}}}],["received",{"_index":570,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["record",{"_index":240,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["ref",{"_index":296,"title":{},"body":{"components/MapComponent.html":{}}}],["reject",{"_index":344,"title":{},"body":{"components/MapComponent.html":{}}}],["reject(e",{"_index":358,"title":{},"body":{"components/MapComponent.html":{}}}],["render",{"_index":46,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{}}}],["renders",{"_index":272,"title":{},"body":{"components/MapComponent.html":{}}}],["represent",{"_index":569,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["request",{"_index":461,"title":{},"body":{"injectables/MapService.html":{}}}],["requests",{"_index":346,"title":{},"body":{"components/MapComponent.html":{}}}],["requests.push",{"_index":351,"title":{},"body":{"components/MapComponent.html":{}}}],["required",{"_index":516,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["reset",{"_index":167,"title":{},"body":{"modules/ChartModule.html":{},"modules/WisdomModule.html":{},"index.html":{}}}],["resolution",{"_index":304,"title":{},"body":{"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["resolutions",{"_index":348,"title":{},"body":{"components/MapComponent.html":{}}}],["resolve",{"_index":343,"title":{},"body":{"components/MapComponent.html":{}}}],["resolve(layerdata",{"_index":356,"title":{},"body":{"components/MapComponent.html":{}}}],["responsetype",{"_index":496,"title":{},"body":{"injectables/MapService.html":{}}}],["rest",{"_index":467,"title":{},"body":{"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["rest/main/api/get",{"_index":251,"title":{},"body":{"components/MapComponent.html":{}}}],["results",{"_index":109,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":452,"title":{},"body":{"injectables/MapService.html":{}}}],["return",{"_index":148,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["returns",{"_index":47,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["root",{"_index":485,"title":{},"body":{"injectables/MapService.html":{}}}],["runtime",{"_index":382,"title":{},"body":{"components/MapComponent.html":{}}}],["rxjs",{"_index":477,"title":{},"body":{"injectables/MapService.html":{}}}],["scopes",{"_index":513,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["see",{"_index":248,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["select",{"_index":370,"title":{},"body":{"components/MapComponent.html":{}}}],["selected",{"_index":228,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedcolor",{"_index":225,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedlayer",{"_index":219,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes",{"_index":220,"title":{},"body":{"components/MapComponent.html":{}}}],["selecting",{"_index":412,"title":{},"body":{"components/MapComponent.html":{}}}],["selection",{"_index":403,"title":{},"body":{"components/MapComponent.html":{}}}],["selector",{"_index":19,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["server",{"_index":235,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["service",{"_index":233,"title":{},"body":{"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["set",{"_index":143,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["setelementclasses(classes",{"_index":141,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["sets",{"_index":277,"title":{},"body":{"components/MapComponent.html":{}}}],["settimeout",{"_index":89,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["shape",{"_index":305,"title":{},"body":{"components/MapComponent.html":{}}}],["shapes",{"_index":257,"title":{},"body":{"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["simplechanges",{"_index":50,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["single",{"_index":380,"title":{},"body":{"components/MapComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["split",{"_index":362,"title":{},"body":{"components/MapComponent.html":{}}}],["split(\"is",{"_index":157,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["src/.../layer",{"_index":566,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../map.component.ts",{"_index":565,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../map.service.ts",{"_index":573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../use",{"_index":574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/bulma/bulma",{"_index":111,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"coverage.html":{}}}],["src/lib/chart/bar",{"_index":8,"title":{},"body":{"components/BarChartComponent.html":{},"coverage.html":{}}}],["src/lib/chart/chart.module.ts",{"_index":169,"title":{},"body":{"modules/ChartModule.html":{}}}],["src/lib/chart/line",{"_index":208,"title":{},"body":{"components/LineChartComponent.html":{},"coverage.html":{}}}],["src/lib/http",{"_index":538,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/ion",{"_index":178,"title":{},"body":{"components/IonIconComponent.html":{},"coverage.html":{}}}],["src/lib/map/layer",{"_index":568,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/lib/map/map.component.ts",{"_index":210,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/map/map.component.ts:103",{"_index":297,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:106",{"_index":267,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:110",{"_index":232,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:121",{"_index":275,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:149",{"_index":271,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:252",{"_index":268,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:39",{"_index":295,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:42",{"_index":239,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:44",{"_index":287,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:47",{"_index":258,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:49",{"_index":307,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:52",{"_index":237,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:54",{"_index":281,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:57",{"_index":264,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:59",{"_index":311,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:77",{"_index":241,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:80",{"_index":289,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:83",{"_index":262,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:85",{"_index":254,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:88",{"_index":292,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:97",{"_index":299,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.service.ts",{"_index":445,"title":{},"body":{"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/map/map.service.ts:20",{"_index":458,"title":{},"body":{"injectables/MapService.html":{}}}],["src/lib/map/map.service.ts:36",{"_index":465,"title":{},"body":{"injectables/MapService.html":{}}}],["src/lib/wisdom.module.ts",{"_index":525,"title":{},"body":{"modules/WisdomModule.html":{}}}],["src/wisdominterface.ts",{"_index":504,"title":{},"body":{"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["started",{"_index":374,"title":{},"body":{"components/MapComponent.html":{}}}],["statements",{"_index":534,"title":{},"body":{"coverage.html":{}}}],["stops",{"_index":200,"title":{},"body":{"components/IonIconComponent.html":{}}}],["stored",{"_index":468,"title":{},"body":{"injectables/MapService.html":{}}}],["string",{"_index":126,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":385,"title":{},"body":{"components/MapComponent.html":{}}}],["styles",{"_index":209,"title":{},"body":{"components/MapComponent.html":{}}}],["styleurls",{"_index":213,"title":{},"body":{"components/MapComponent.html":{}}}],["such",{"_index":507,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["support",{"_index":559,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":560,"title":{},"body":{"modules.html":{}}}],["table",{"_index":548,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":547,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":21,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["then(data",{"_index":353,"title":{},"body":{"components/MapComponent.html":{}}}],["therefore",{"_index":451,"title":{},"body":{"injectables/MapService.html":{}}}],["things",{"_index":114,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.center",{"_index":336,"title":{},"body":{"components/MapComponent.html":{}}}],["this.chart",{"_index":81,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["this.chart!.update",{"_index":90,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["this.chart.data",{"_index":88,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["this.chartelement.nativeelement.getcontext(\"2d",{"_index":80,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["this.classes",{"_index":151,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.classes.join",{"_index":149,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.classes.push(\"is",{"_index":155,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.data",{"_index":84,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["this.elementclasses",{"_index":156,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.emitselection",{"_index":413,"title":{},"body":{"components/MapComponent.html":{}}}],["this.height",{"_index":332,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputcenter",{"_index":335,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputheight",{"_index":331,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputtileurl",{"_index":333,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputzoom",{"_index":337,"title":{},"body":{"components/MapComponent.html":{}}}],["this.isactive",{"_index":154,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.layerdata",{"_index":341,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerdata.then(layerdata",{"_index":373,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layers",{"_index":340,"title":{},"body":{"components/MapComponent.html":{}}}],["this.map",{"_index":369,"title":{},"body":{"components/MapComponent.html":{}}}],["this.mapelement.nativeelement",{"_index":360,"title":{},"body":{"components/MapComponent.html":{}}}],["this.options",{"_index":86,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["this.selected.emit",{"_index":441,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedcolor",{"_index":410,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedlayer",{"_index":422,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedshapes[key",{"_index":406,"title":{},"body":{"components/MapComponent.html":{}}}],["this.service.fetchlayerdata(layername",{"_index":352,"title":{},"body":{"components/MapComponent.html":{}}}],["this.tileurl",{"_index":334,"title":{},"body":{"components/MapComponent.html":{}}}],["this.unselectedcolor",{"_index":387,"title":{},"body":{"components/MapComponent.html":{}}}],["this.zoom",{"_index":338,"title":{},"body":{"components/MapComponent.html":{}}}],["tile",{"_index":259,"title":{},"body":{"components/MapComponent.html":{}}}],["tileurl",{"_index":221,"title":{},"body":{"components/MapComponent.html":{}}}],["todo",{"_index":390,"title":{},"body":{"components/MapComponent.html":{}}}],["toggle",{"_index":118,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable",{"_index":107,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["toggleable.directive",{"_index":527,"title":{},"body":{"modules/WisdomModule.html":{}}}],["toggleable.directive.ts",{"_index":112,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"coverage.html":{}}}],["toggleable.directive.ts:20",{"_index":138,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:22",{"_index":135,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:27",{"_index":127,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:31",{"_index":142,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:41",{"_index":128,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["tooltips",{"_index":393,"title":{},"body":{"components/MapComponent.html":{}}}],["top",{"_index":518,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["translated",{"_index":423,"title":{},"body":{"components/MapComponent.html":{}}}],["translation",{"_index":432,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["translations",{"_index":514,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["true",{"_index":421,"title":{},"body":{"components/MapComponent.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":550,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":33,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":563,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["undefined",{"_index":194,"title":{},"body":{"components/IonIconComponent.html":{}}}],["under",{"_index":511,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["unknown",{"_index":472,"title":{},"body":{"injectables/MapService.html":{}}}],["unselect",{"_index":405,"title":{},"body":{"components/MapComponent.html":{}}}],["unselected",{"_index":263,"title":{},"body":{"components/MapComponent.html":{}}}],["unselectedcolor",{"_index":226,"title":{},"body":{"components/MapComponent.html":{}}}],["update",{"_index":54,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["url",{"_index":260,"title":{},"body":{"components/MapComponent.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["url.ts",{"_index":539,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["usage",{"_index":416,"title":{},"body":{"components/MapComponent.html":{}}}],["use",{"_index":188,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["use_api_url",{"_index":480,"title":{},"body":{"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_base_url",{"_index":542,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":181,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["uses",{"_index":185,"title":{},"body":{"components/IonIconComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["value",{"_index":134,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["value.join",{"_index":398,"title":{},"body":{"components/MapComponent.html":{}}}],["values",{"_index":274,"title":{},"body":{"components/MapComponent.html":{}}}],["var",{"_index":95,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["variable",{"_index":540,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":572,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["via",{"_index":191,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["view",{"_index":43,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["viewchild",{"_index":68,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["viewchild(\"chart",{"_index":75,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["viewchild(\"map",{"_index":317,"title":{},"body":{"components/MapComponent.html":{}}}],["viewchild('chart",{"_index":63,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["viewchild('map",{"_index":294,"title":{},"body":{"components/MapComponent.html":{}}}],["void",{"_index":48,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["webcomponents",{"_index":186,"title":{},"body":{"components/IonIconComponent.html":{}}}],["website",{"_index":205,"title":{},"body":{"components/IonIconComponent.html":{}}}],["wisdom",{"_index":505,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["wisdominterface",{"_index":502,"title":{"interfaces/WisdomInterface.html":{}},"body":{"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["wisdommodule",{"_index":521,"title":{"modules/WisdomModule.html":{}},"body":{"modules/WisdomModule.html":{},"index.html":{},"modules.html":{}}}],["zoom",{"_index":166,"title":{},"body":{"modules/ChartModule.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/BarChartComponent.html":{"url":"components/BarChartComponent.html","title":"component - BarChartComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BarChartComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/chart/bar-chart.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component for displaying bar charts with chart.js\n\n    \n\n\n    \n        Implements\n    \n    \n                    AfterViewInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                bar-chart\n            \n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                chart\n                            \n                            \n                                    Private\n                                chartElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                options\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :     ChartData\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/chart/bar-chart.component.ts:24\n                            \n                        \n                \n                    \n                        The data to display with the chart.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :     ChartOptions\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/chart/bar-chart.component.ts:27\n                            \n                        \n                \n                    \n                        Options passed to the chart.\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/chart/bar-chart.component.ts:33\n                \n            \n\n\n            \n                \n                    After the view is initialized this will create the chart and render it.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/chart/bar-chart.component.ts:46\n                \n            \n\n\n            \n                \n                    When the data is changed on the chart, it will call an update.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Changes made to the chart\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        chart\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Chart\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/chart/bar-chart.component.ts:30\n                        \n                    \n\n            \n                \n                    The chart generated by chart.js.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        chartElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('chart')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/chart/bar-chart.component.ts:21\n                        \n                    \n\n            \n                \n                    The host element of the chart.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n  OnChanges,\n  SimpleChanges,\n  ViewChild,\n  Component,\n  AfterViewInit,\n  Input,\n  Output,\n  ElementRef\n} from \"@angular/core\";\nimport Chart, {ChartData, ChartOptions} from \"chart.js/auto\";\n\n/** Component for displaying bar charts with chart.js */\n@Component({\n  selector: \"bar-chart\",\n  template: \"\"\n})\nexport class BarChartComponent implements AfterViewInit, OnChanges {\n\n  /** The host element of the chart. */\n  @ViewChild(\"chart\") private chartElement!: ElementRef;\n\n  /** The data to display with the chart. */\n  @Input(\"data\") data?: ChartData;\n\n  /** Options passed to the chart. */\n  @Input(\"options\") options?: ChartOptions;\n\n  /** The chart generated by chart.js. */\n  chart?: Chart;\n\n  /** After the view is initialized this will create the chart and render it. */\n  ngAfterViewInit(): void {\n    const ctx = this.chartElement.nativeElement.getContext(\"2d\")!;\n    this.chart = new Chart(ctx, {\n      type: \"bar\",\n      data: this.data ?? {datasets: []},\n      options: this.options\n    })\n  }\n\n  /**\n   * When the data is changed on the chart, it will call an update.\n   * @param changes Changes made to the chart\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.data && this.chart) {\n      this.chart.data = this.data;\n      setTimeout(() => this.chart!.update(), 0);\n    }\n  }\n\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'BarChartComponent', 'selector': 'bar-chart'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'LineChartComponent', 'selector': 'line-chart'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'BarChartComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/BulmaIsToggleableDirective.html":{"url":"directives/BulmaIsToggleableDirective.html","title":"directive - BulmaIsToggleableDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  BulmaIsToggleableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/bulma/bulma-is-toggleable.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Directive for making things toggleable with bulma.\nClicking on the node that has this directive will toggle the \"is-active\"\nclass.\n\n            \n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        .is-toggleable\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                classes\n                            \n                            \n                                    Private\n                                isActive\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toggle\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    elementClasses\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        class\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:27\n                            \n                        \n                \n                    \n                        The classes of the host node.\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:41\n                \n            \n\n\n            \n                \n                    Function to be executed when the host is clicked.\nWill toggle the \"is-active\" class on the host node.\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toggle\n                        \n                    \n                \n            \n            \n                \ntoggle()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click')\n                \n            \n\n            \n                \n                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:41\n                \n            \n\n\n            \n                \n                    Function to be executed when the host is clicked.\nWill toggle the \"is-active\" class on the host node.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        classes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:22\n                        \n                    \n\n            \n                \n                    The classes of the host node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:20\n                        \n                    \n\n            \n                \n                    Is the host currently active.\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        elementClasses\n                    \n                \n\n                \n                    \n                        getelementClasses()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:27\n                                \n                            \n                    \n                        \n                                The classes of the host node.\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        setelementClasses(classes: string)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:31\n                                \n                            \n                    \n                        \n                                Set the classes of the host node.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            classes\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import {\n  HostBinding,\n  Directive,\n  Input,\n  HostListener\n} from \"@angular/core\";\n\n/**\n * Directive for making things toggleable with bulma.\n *\n * Clicking on the node that has this directive will toggle the \"is-active\"\n * class.\n */\n@Directive({\n  selector: \".is-toggleable\"\n})\nexport class BulmaIsToggleableDirective {\n\n  /** Is the host currently active. */\n  private isActive: boolean = false;\n  /** The classes of the host node. */\n  private classes: string[] = [];\n\n  /** The classes of the host node. */\n  @Input(\"class\")\n  @HostBinding(\"class\")\n  get elementClasses(): string {\n    return this.classes.join(\" \");\n  }\n  /** Set the classes of the host node. */\n  set elementClasses(classes: string) {\n    this.classes = classes.trim().split(/\\s+/);\n  }\n\n  /**\n   * Function to be executed when the host is clicked.\n   *\n   * Will toggle the \"is-active\" class on the host node.\n   */\n  @HostListener(\"click\")\n  toggle() {\n    this.isActive = !this.isActive;\n    if (this.isActive) this.classes.push(\"is-active\")\n    else {\n      this.elementClasses = this.elementClasses\n        .split(\"is-active\")\n        .join(\"\");\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChartModule.html":{"url":"modules/ChartModule.html","title":"module - ChartModule","body":"\n                   \n\n\n\n\n    Modules\n    ChartModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ChartModule\n\n\n\ncluster_ChartModule_exports\n\n\n\ncluster_ChartModule_declarations\n\n\n\n\nBarChartComponent\n\nBarChartComponent\n\n\n\nChartModule\n\nChartModule\n\nChartModule -->\n\nBarChartComponent->ChartModule\n\n\n\n\n\nLineChartComponent\n\nLineChartComponent\n\nChartModule -->\n\nLineChartComponent->ChartModule\n\n\n\n\n\nBarChartComponent \n\nBarChartComponent \n\nBarChartComponent  -->\n\nChartModule->BarChartComponent \n\n\n\n\n\nLineChartComponent \n\nLineChartComponent \n\nLineChartComponent  -->\n\nChartModule->LineChartComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/chart/chart.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module containing the charts.\n\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BarChartComponent\n                        \n                        \n                            LineChartComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BarChartComponent\n                        \n                        \n                            LineChartComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\n\nimport {BarChartComponent} from \"./bar-chart.component\";\nimport {LineChartComponent} from \"./line-chart.component\";\n\n/** Module containing the charts. */\n@NgModule({\n  declarations: [\n    BarChartComponent,\n    LineChartComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    BarChartComponent,\n    LineChartComponent\n  ]\n})\nexport class ChartModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/IonIconComponent.html":{"url":"components/IonIconComponent.html","title":"component - IonIconComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  IonIconComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/ion-icon/ion-icon.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component is used to inject the icons from IonIcons.\nIonIcons uses WebComponents to display the icons.\nTo allow to use them here, this component adds the icons via js.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ion-icon\n            \n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ion-icon/ion-icon.component.ts:22\n                            \n                        \n                \n                    \n                        The name of the icon.\nIs not used by angular but needed to render the correct icon and necessary\nso that angular stops complaining.\nYou can find the names at the official website\nhttps://ionic.io/ionicons.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import {Component, Input} from \"@angular/core\";\n\n/**\n * This component is used to inject the icons from IonIcons.\n * IonIcons uses WebComponents to display the icons.\n * To allow to use them here, this component adds the icons via js.\n */\n@Component({\n  selector: \"ion-icon\",\n  template: \"\"\n})\nexport class IonIconComponent {\n\n  /**\n   * The name of the icon.\n   * Is not used by angular but needed to render the correct icon and necessary\n   * so that angular stops complaining.\n   *\n   * You can find the names at the official website\n   * {@link https://ionic.io/ionicons}.\n   */\n  @Input() name: string | undefined;\n\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'BarChartComponent', 'selector': 'bar-chart'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'LineChartComponent', 'selector': 'line-chart'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'IonIconComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LineChartComponent.html":{"url":"components/LineChartComponent.html","title":"component - LineChartComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LineChartComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/chart/line-chart.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component for displaying bar line with chart.js\n\n    \n\n\n    \n        Implements\n    \n    \n                    AfterViewInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                line-chart\n            \n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                chart\n                            \n                            \n                                    Private\n                                chartElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                options\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :     ChartData\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/chart/line-chart.component.ts:24\n                            \n                        \n                \n                    \n                        The data to display with the chart.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :     ChartOptions\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/chart/line-chart.component.ts:27\n                            \n                        \n                \n                    \n                        Options passed to the chart.\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/chart/line-chart.component.ts:33\n                \n            \n\n\n            \n                \n                    After the view is initialized this will create the chart and render it.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/chart/line-chart.component.ts:46\n                \n            \n\n\n            \n                \n                    When the data is changed on the chart, it will call an update.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Changes made to the chart\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        chart\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Chart\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/chart/line-chart.component.ts:30\n                        \n                    \n\n            \n                \n                    The chart generated by chart.js.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        chartElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('chart')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/chart/line-chart.component.ts:21\n                        \n                    \n\n            \n                \n                    The host element of the chart.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n  OnChanges,\n  SimpleChanges,\n  ViewChild,\n  Component,\n  AfterViewInit,\n  Input,\n  Output,\n  ElementRef\n} from \"@angular/core\";\nimport Chart, {ChartData, ChartOptions} from \"chart.js/auto\";\n\n/** Component for displaying bar line with chart.js */\n@Component({\n  selector: \"line-chart\",\n  template: \"\"\n})\nexport class LineChartComponent implements AfterViewInit, OnChanges {\n\n  /** The host element of the chart. */\n  @ViewChild(\"chart\") private chartElement!: ElementRef;\n\n  /** The data to display with the chart. */\n  @Input(\"data\") data?: ChartData;\n\n  /** Options passed to the chart. */\n  @Input(\"options\") options?: ChartOptions;\n\n  /** The chart generated by chart.js. */\n  chart?: Chart;\n\n  /** After the view is initialized this will create the chart and render it. */\n  ngAfterViewInit(): void {\n    const ctx = this.chartElement.nativeElement.getContext(\"2d\")!;\n    this.chart = new Chart(ctx, {\n      type: \"line\",\n      data: this.data ?? {datasets: []},\n      options: this.options\n    })\n  }\n\n  /**\n   * When the data is changed on the chart, it will call an update.\n   * @param changes Changes made to the chart\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.data && this.chart) {\n      this.chart.data = this.data;\n      setTimeout(() => this.chart!.update(), 0);\n    }\n  }\n\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'BarChartComponent', 'selector': 'bar-chart'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'LineChartComponent', 'selector': 'line-chart'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'LineChartComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MapComponent.html":{"url":"components/MapComponent.html","title":"component - MapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/map/map.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component for displaying maps.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                map\n            \n\n            \n                styleUrls\n                ./map.component.css\n            \n\n\n            \n                template\n                \n  \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                center\n                            \n                            \n                                height\n                            \n                            \n                                    Private\n                                    Optional\n                                layerData\n                            \n                            \n                                    Optional\n                                map\n                            \n                            \n                                    Private\n                                mapElement\n                            \n                            \n                                    Private\n                                    Optional\n                                selectedLayer\n                            \n                            \n                                    Private\n                                selectedShapes\n                            \n                            \n                                tileUrl\n                            \n                            \n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                emitSelection\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                center\n                            \n                            \n                                height\n                            \n                            \n                                layers\n                            \n                            \n                                selectedColor\n                            \n                            \n                                tileUrl\n                            \n                            \n                                unselectedColor\n                            \n                            \n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                selected\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: MapService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/map/map.component.ts:110\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        MapService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to interact with the server for geo data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        center\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:52\n                            \n                        \n                \n                    \n                        Input for the center coordinates of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:42\n                            \n                        \n                \n                    \n                        Input for the height of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        layers\n                    \n                \n                \n                    \n                        Type :     Record\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:77\n                            \n                        \n                \n                    \n                        Input for the layers that should be displayed.\nThe record expects as the key the layer_name and as the value an array\nof layer_resolutions.\nSee https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#d35a0c\"\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:85\n                            \n                        \n                \n                    \n                        Input for a hex code selected shapes.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        tileUrl\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:47\n                            \n                        \n                \n                    \n                        Input for the tile url of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        unselectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#1f5aec\"\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:83\n                            \n                        \n                \n                    \n                        Input for a hex code for unselected shapes.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        zoom\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:57\n                            \n                        \n                \n                    \n                        Input for the map zoom level.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        selected\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:106\n                            \n                        \n                \n                    \n                        Outputs the currently selected shapes.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        emitSelection\n                        \n                    \n                \n            \n            \n                \n                    \n                    emitSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:252\n                \n            \n\n\n            \n                \n                    Internally used function to emit the currently selected shapes via the\nselected output.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:149\n                \n            \n\n\n            \n                \n                    Renders the map with the given input values.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:121\n                \n            \n\n\n            \n                \n                    While init this sets the input values to the inner, private values.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        center\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"53.1434501, 8.2145521\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:54\n                        \n                    \n\n            \n                \n                    Center of the map, defaults to longitude and latitude of Oldenburg.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"500px\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:44\n                        \n                    \n\n            \n                \n                    Height of map, defaults to 500px.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        layerData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Promise>>\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:80\n                        \n                    \n\n            \n                \n                    Layer data fetching the map data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        map\n                        \n                    \n                \n            \n                \n                    \n                        Type :     L.Map\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:88\n                        \n                    \n\n            \n                \n                    The leaflet map that is displayed here.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mapElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('map')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:39\n                        \n                    \n\n            \n                \n                    The ref to the map html element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        selectedLayer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     [string, string]\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:103\n                        \n                    \n\n            \n                \n                    The currently selected layer in the map control.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedShapes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:97\n                        \n                    \n\n            \n                \n                    Internally holds all elements that are currently selected.\nKeys: \"layer_name.resolution.shape\"\nValues: [layer_name, resolution, shape]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tileUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:49\n                        \n                    \n\n            \n                \n                    Tile url of the map, defaults to the osm.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 7\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:59\n                        \n                    \n\n            \n                \n                    Zoom level of the map, defaults to 7.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n  ViewChild,\n  Component,\n  EventEmitter,\n  OnInit,\n  AfterViewInit,\n  Input,\n  Output,\n  ElementRef\n} from \"@angular/core\";\n\nimport * as L from \"leaflet\";\n\nimport {MapService} from \"./map.service\";\n\n/**\n * GeoJSON data type used by Leaflet.\n * @private\n */\ntype GeoJsonObject = Parameters[0];\n\n/**\n * Component for displaying maps.\n */\n@Component({\n  selector: \"map\",\n  template: `\n    \n      \n    \n  `,\n  styleUrls: [\n    \"./map.component.css\"\n  ]\n})\nexport class MapComponent implements OnInit, AfterViewInit {\n\n  /** The ref to the map html element. */\n  @ViewChild(\"map\") private mapElement!: ElementRef;\n\n  /** Input for the height of the map. */\n  @Input(\"height\") inputHeight?: string;\n  /** Height of map, defaults to 500px. */\n  height = \"500px\";\n\n  /** Input for the tile url of the map. */\n  @Input(\"tileUrl\") inputTileUrl?: string;\n  /** Tile url of the map, defaults to the osm. */\n  tileUrl = \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\";\n\n  /** Input for the center coordinates of the map. */\n  @Input(\"center\") inputCenter?: string;\n  /** Center of the map, defaults to longitude and latitude of Oldenburg. */\n  center = \"53.1434501, 8.2145521\";\n\n  /** Input for the map zoom level. */\n  @Input(\"zoom\") inputZoom?: string;\n  /** Zoom level of the map, defaults to 7. */\n  zoom = 7;\n\n  /**\n   * Input for the layers that should be displayed.\n   *\n   * The record expects as the key the `layer_name` and as the value an array\n   * of `layer_resolutions`.\n   *\n   * @example\n   * ```html\n   * \n   * ```\n   *\n   * @see https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n   */\n  @Input(\"layers\") layers?: Record\n\n  /** Layer data fetching the map data. */\n  private layerData?: Promise>>\n\n  /** Input for a hex code for unselected shapes. */\n  @Input(\"unselectedColor\") unselectedColor = \"#1f5aec\";\n  /** Input for a hex code selected shapes. */\n  @Input(\"selectedColor\") selectedColor = \"#d35a0c\";\n\n  /** The leaflet map that is displayed here. */\n  map?: L.Map;\n\n  /**\n   * Internally holds all elements that are currently selected.\n   *\n   * Keys: `\"layer_name.resolution.shape\"`\n   * Values: `[layer_name, resolution, shape]`\n   * @private\n   */\n  private selectedShapes: Record = {};\n\n  /**\n   * The currently selected layer in the map control.\n   * @private\n   */\n  private selectedLayer?: [string, string];\n\n  /** Outputs the currently selected shapes. */\n  @Output() selected = new EventEmitter();\n\n  /**\n   * Constructor.\n   * @param service Service to interact with the server for geo data\n   */\n  constructor(private service: MapService) {}\n\n  /**\n   * While init this sets the input values to the inner, private values.\n   */\n  ngOnInit(): void {\n    if (this.inputHeight) this.height = this.inputHeight;\n    if (this.inputTileUrl) this.tileUrl = this.inputTileUrl;\n    if (this.inputCenter) this.center = this.inputCenter;\n    if (this.inputZoom) this.zoom = parseInt(this.inputZoom);\n    if (this.layers) {\n      this.layerData = new Promise(async (resolve, reject) => {\n        let layerData: Awaited = {};\n        let requests: Promise[] = [];\n        for (let [layerName, resolutions] of Object.entries(this.layers!)) {\n          layerData[layerName] = {};\n          for (let resolution of resolutions) {\n            requests.push(\n              this.service.fetchLayerData(layerName, resolution)\n                .then(data => layerData![layerName][resolution] = data)\n            );\n          }\n        }\n        Promise.all(requests)\n          .then(() => resolve(layerData!))\n          .catch(e => reject(e));\n      });\n    }\n  }\n\n  /**\n   * Renders the map with the given input values.\n   */\n  ngAfterViewInit(): void {\n    const nativeMapElement = this.mapElement.nativeElement;\n\n    const map = L.map(nativeMapElement, {\n      center: this.center\n        .split(\", \")\n        .map(str => parseFloat(str)) as [number, number],\n      zoom: this.zoom\n    });\n    map.getRenderer(map as any).options.padding = 100;\n\n    L.tileLayer(this.tileUrl).addTo(map);\n\n    this.map = map;\n\n    if (this.layerData) {\n      // control to select which base layer to use\n      let control = L.control.layers();\n\n      this.layerData.then(layerData => {\n        // this promise is started in the init part, but is needed here\n\n        let baseLayerDisplayed = false;\n\n        for (let [layerName, resolutions] of Object.entries(layerData)) {\n          for (let [resolution, shapes] of Object.entries(resolutions)) {\n\n            // put the geojson in a single layer to optimize runtime of the map\n            let geoJsonLayer = L.geoJSON(undefined, {\n              style: {color: this.unselectedColor},\n              onEachFeature: (feature, layer) => {\n                // TODO: make automatic tooltips\n                layer.bindTooltip(feature.properties.name, {\n                  direction: \"center\"\n                });\n\n                layer.on(\"click\", () => {\n                  let value = [layerName, resolution, feature.properties.name];\n                  let key = value.join(\".\");\n\n                  let path = layer as L.Path;\n\n                  // highlight the clicked on shape and add it to the selection\n                  // if already in the selection, unselect\n                  if (this.selectedShapes[key]) {\n                    path.setStyle({\n                      color: this.unselectedColor\n                    });\n                    path.bringToBack();\n                    delete this.selectedShapes[key];\n                  }\n                  else {\n                    path.setStyle({\n                      color: this.selectedColor\n                    });\n                    path.bringToFront();\n                    this.selectedShapes[key] = value as [string, string, string];\n                  }\n\n                  // selecting a shape should update the output\n                  this.emitSelection();\n                });\n              }\n            });\n\n            for (let {name, geojson} of shapes) {\n              // assign the name as a property in the shape to allow its usage\n              // in the click handler\n              geoJsonLayer.addData(Object.assign(geojson!, {properties: {name}}));\n            }\n\n            if (!baseLayerDisplayed) {\n              // the first base layer should be the default\n              geoJsonLayer.addTo(map);\n              baseLayerDisplayed = true;\n              this.selectedLayer = [layerName, resolution];\n            }\n\n            // TODO: use names here than can be translated\n            control.addBaseLayer(geoJsonLayer, `${layerName}: ${resolution}`);\n\n            map.on(\"baselayerchange\", data => {\n              // check if the current layer is selected, this preffered over the\n              // name, since the name might change caused by translation efforts\n              let {layer} = data as L.LayersControlEvent;\n              if (layer == geoJsonLayer) {\n                this.selectedLayer = [layerName, resolution];\n                this.emitSelection();\n              }\n            });\n          }\n        }\n      });\n\n      control.addTo(map);\n    }\n  }\n\n  /**\n   * Internally used function to emit the currently selected shapes via the\n   * {@link selected} output.\n   * @private\n   */\n  private emitSelection(): void {\n    let [layerName, resolution] = this.selectedLayer!;\n    let shapes = Object.values(this.selectedShapes)\n      .filter(([elLayerName, elResolution]) => {\n        return elLayerName == layerName && elResolution == resolution;\n      })\n      .map(([layerName, resolution, shape]) => shape);\n    this.selected.emit({\n      layerName,\n      resolution,\n      shapes\n    });\n  }\n}\n\n    \n\n\n    \n                \n                    ./map.component.css\n                \n                .map-container {}\n\n.map {\n  height: 100%;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'BarChartComponent', 'selector': 'bar-chart'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'LineChartComponent', 'selector': 'line-chart'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'MapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MapService.html":{"url":"injectables/MapService.html","title":"injectable - MapService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MapService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/map.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to interact with the geo data api to fetch map data.\nFetched map data is cached in the indexedDB and therefore only retrieved\nlazily.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                fetchLayerData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/lib/map/map.service.ts:20\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Client to request geo data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchLayerData\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchLayerData(layerName: string, layerResolution: string, force: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.service.ts:36\n                \n            \n\n\n            \n                \n                    Asynchronously fetch the map from the geo data rest api.\nWill only fetch data if not already stored in the indexedDB.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    layerName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The layer name to request data from\n\n                                    \n                                \n                                \n                                    layerResolution\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The resolution to request shapes from\n\n                                    \n                                \n                                \n                                    force\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        If true, this will ignore the cache and request everything\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {HttpClient, HttpContext, HttpHeaders} from \"@angular/common/http\";\nimport {Injectable} from \"@angular/core\";\nimport {firstValueFrom} from \"rxjs\";\n\nimport * as idb from \"idb-keyval\";\n\nimport {USE_API_URL} from \"../http-context/use-api-url\";\n\nconst API_URL = \"geodata-rest\";\n\n/**\n * Service to interact with the geo data api to fetch map data.\n *\n * Fetched map data is cached in the indexedDB and therefore only retrieved\n * lazily.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n\n  /**\n   * Constructor.\n   * @param http Client to request geo data\n   */\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Asynchronously fetch the map from the geo data rest api.\n   *\n   * Will only fetch data if not already stored in the indexedDB.\n   * @param layerName The layer name to request data from\n   * @param layerResolution The resolution to request shapes from\n   * @param force If true, this will ignore the cache and request everything\n   */\n  async fetchLayerData(\n    layerName: string,\n    layerResolution: string,\n    force: boolean = false\n  ) {\n    let dbKey = `MAP_LAYER_DATA:${layerName}:${layerResolution}`;\n    if (!force && (await idb.keys()).includes(dbKey)) {\n      return await idb.get(dbKey);\n    }\n\n    let url = encodeURI(`${API_URL}/${layerName}/${layerResolution}`);\n    let layerData = await firstValueFrom(this.http.get(url, {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      }),\n      responseType: \"json\",\n      context: new HttpContext().set(USE_API_URL, true)\n    }));\n\n    await idb.set(dbKey, layerData);\n    return layerData;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WisdomInterface.html":{"url":"interfaces/WisdomInterface.html","title":"interface - WisdomInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WisdomInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/WisdomInterface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for the wisdom modules.\nEvery wisdom module must provide such an object implementing this interface.\nThe object must be exported under the name \"wisdomInterface\".\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            entryComponent\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            scopes\n                                        \n                                \n                                \n                                        \n                                            translations\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entryComponent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entryComponent:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The entry component that should be displayed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The path to the component displaying the module.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scopes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scopes:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The scopes required to see the component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translations:     Record>>>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record>>>\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The translations the modules provides and uses.\nThe top most entry should be the namespace, the following the component and\nin the component there should be keys for the translation keys.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface WisdomInterface {\n  /** The path to the component displaying the module. */\n  path: string;\n  /** The scopes required to see the component. */\n  scopes: string[];\n  /** The entry component that should be displayed. */\n  entryComponent: any;\n  /**\n   * The translations the modules provides and uses.\n   *\n   * The top most entry should be the namespace, the following the component and\n   * in the component there should be keys for the translation keys.\n   */\n  translations: Record>>>\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WisdomModule.html":{"url":"modules/WisdomModule.html","title":"module - WisdomModule","body":"\n                   \n\n\n\n\n    Modules\n    WisdomModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WisdomModule\n\n\n\ncluster_WisdomModule_declarations\n\n\n\ncluster_WisdomModule_exports\n\n\n\n\nBulmaIsToggleableDirective\n\nBulmaIsToggleableDirective\n\n\n\nWisdomModule\n\nWisdomModule\n\nWisdomModule -->\n\nBulmaIsToggleableDirective->WisdomModule\n\n\n\n\n\nIonIconComponent\n\nIonIconComponent\n\nWisdomModule -->\n\nIonIconComponent->WisdomModule\n\n\n\n\n\nMapComponent\n\nMapComponent\n\nWisdomModule -->\n\nMapComponent->WisdomModule\n\n\n\n\n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective  -->\n\nWisdomModule->BulmaIsToggleableDirective \n\n\n\n\n\nChartModule \n\nChartModule \n\nChartModule  -->\n\nWisdomModule->ChartModule \n\n\n\n\n\nIonIconComponent \n\nIonIconComponent \n\nIonIconComponent  -->\n\nWisdomModule->IonIconComponent \n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nWisdomModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/wisdom.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BulmaIsToggleableDirective\n                        \n                        \n                            IonIconComponent\n                        \n                        \n                            MapComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BulmaIsToggleableDirective\n                        \n                        \n                            ChartModule\n                        \n                        \n                            IonIconComponent\n                        \n                        \n                            MapComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\n\nimport {\n  BulmaIsToggleableDirective\n} from \"./bulma/bulma-is-toggleable.directive\";\nimport {ChartModule} from \"./chart/chart.module\";\nimport {IonIconComponent} from \"./ion-icon/ion-icon.component\";\nimport {MapComponent} from \"./map/map.component\";\n\n@NgModule({\n  declarations: [\n    IonIconComponent,\n    BulmaIsToggleableDirective,\n    MapComponent\n  ],\n  imports: [],\n  exports: [\n    IonIconComponent,\n    BulmaIsToggleableDirective,\n    MapComponent,\n    ChartModule\n  ]\n})\nexport class WisdomModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/WisdomInterface.ts\n            \n            interface\n            WisdomInterface\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/bulma/bulma-is-toggleable.directive.ts\n            \n            directive\n            BulmaIsToggleableDirective\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/chart/bar-chart.component.ts\n            \n            component\n            BarChartComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/lib/chart/line-chart.component.ts\n            \n            component\n            LineChartComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-api-url.ts\n            \n            variable\n            USE_API_URL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-base-url.ts\n            \n            variable\n            USE_BASE_URL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/ion-icon/ion-icon.component.ts\n            \n            component\n            IonIconComponent\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/lib/map/map.component.ts\n            \n            component\n            MapComponent\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            injectable\n            MapService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            API_URL\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^13.2.0\n        \n            @angular/core : ^13.2.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ChartModule\n\n\n\ncluster_ChartModule_declarations\n\n\n\ncluster_ChartModule_exports\n\n\n\ncluster_WisdomModule\n\n\n\ncluster_WisdomModule_declarations\n\n\n\ncluster_WisdomModule_exports\n\n\n\n\nBarChartComponent\n\nBarChartComponent\n\n\n\nChartModule\n\nChartModule\n\nChartModule -->\n\nBarChartComponent->ChartModule\n\n\n\n\n\nLineChartComponent\n\nLineChartComponent\n\nChartModule -->\n\nLineChartComponent->ChartModule\n\n\n\n\n\nBarChartComponent \n\nBarChartComponent \n\nBarChartComponent  -->\n\nChartModule->BarChartComponent \n\n\n\n\n\nLineChartComponent \n\nLineChartComponent \n\nLineChartComponent  -->\n\nChartModule->LineChartComponent \n\n\n\n\n\nBulmaIsToggleableDirective\n\nBulmaIsToggleableDirective\n\n\n\nWisdomModule\n\nWisdomModule\n\nWisdomModule -->\n\nBulmaIsToggleableDirective->WisdomModule\n\n\n\n\n\nIonIconComponent\n\nIonIconComponent\n\nWisdomModule -->\n\nIonIconComponent->WisdomModule\n\n\n\n\n\nMapComponent\n\nMapComponent\n\nWisdomModule -->\n\nMapComponent->WisdomModule\n\n\n\n\n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective  -->\n\nWisdomModule->BulmaIsToggleableDirective \n\n\n\n\n\nChartModule \n\nChartModule \n\nChartModule  -->\n\nWisdomModule->ChartModule \n\n\n\n\n\nIonIconComponent \n\nIonIconComponent \n\nIonIconComponent  -->\n\nWisdomModule->IonIconComponent \n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nWisdomModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ChartModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WisdomModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GeoJsonObject   (src/.../map.component.ts)\n                        \n                        \n                            LayerData   (src/.../layer-data.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/map/map.component.ts\n    \n    \n        \n            \n                \n                    \n                    GeoJsonObject\n                \n            \n            \n                \n                    GeoJSON data type used by Leaflet.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/lib/map/layer-data.ts\n    \n    \n        \n            \n                \n                    \n                    LayerData\n                \n            \n            \n                \n                    Type to represent layer data received from the geo data server.\n\n                \n            \n            \n                \n                        literal type[]\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            API_URL   (src/.../map.service.ts)\n                        \n                        \n                            USE_API_URL   (src/.../use-api-url.ts)\n                        \n                        \n                            USE_BASE_URL   (src/.../use-base-url.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/map/map.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        API_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"geodata-rest\"\n                    \n                \n\n\n        \n    \n\n    src/lib/http-context/use-api-url.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_API_URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => false)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if the api url should be used.\nDefaults to false.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-base-url.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_BASE_URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => true)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if the base url should be used.\nDefaults to true.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
