var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/BimComponent.html",[0,0.853,1,1.169]],["body/components/BimComponent.html",[0,0.863,1,1.36,2,1.305,3,0.236,4,0.236,5,0.911,6,0.911,7,0.481,8,1.216,9,1.474,10,2.478,11,0.646,12,2.337,13,2.397,14,1.474,15,0.123,16,0.491,17,3.019,18,3.019,19,1.598,20,3.81,21,4.077,22,0.939,23,3.469,24,2.848,25,1.474,26,2.397,27,3.019,28,1.968,29,2.122,30,3.019,31,3.019,32,3.019,33,3.019,34,3.019,35,3.019,36,3.019,37,3.019,38,3.019,39,2.122,40,3.019,41,3.019,42,3.019,43,3.019,44,3.019,45,3.019,46,3.019,47,3.019,48,3.019,49,3.019,50,3.019,51,3.019,52,3.019,53,3.019,54,3.019,55,3.019,56,3.019,57,3.019,58,3.019,59,3.019,60,3.019,61,3.019,62,3.019,63,3.019,64,3.019,65,3.019,66,3.019,67,3.019,68,3.019,69,3.019,70,3.019,71,0.581,72,1.041,73,2.133,74,2.083,75,2.397,76,0.424,77,0.042,78,0.553,79,0.594,80,0.38,81,0.939,82,0.685,83,0.471,84,0.471,85,2.397,86,1.481,87,0.382,88,1.481,89,4.963,90,1.481,91,1.481,92,1.481,93,1.481,94,1.481,95,1.481,96,1.481,97,1.481,98,1.481,99,1.481,100,1.481,101,1.481,102,1.481,103,1.481,104,1.481,105,1.481,106,1.481,107,1.481,108,1.481,109,1.481,110,1.481,111,1.481,112,1.481,113,1.481,114,1.481,115,1.481,116,1.481,117,1.481,118,1.481,119,1.481,120,1.481,121,1.481,122,1.481,123,1.481,124,1.481,125,1.481,126,1.481,127,1.481,128,1.481,129,1.481,130,1.481,131,1.481,132,1.481,133,0.762,134,1.183,135,1.481,136,2.678,137,1.685,138,1.481,139,1.481,140,1.481,141,1.481,142,1.481,143,0.481,144,0.807,145,4.791,146,1.216,147,0.34,148,1.481,149,1.481,150,1.481,151,1.481,152,1.481,153,1.481,154,0.236,155,0.38,156,1.481,157,1.481,158,1.481,159,1.481,160,1.481,161,2.063,162,0.646,163,1.216,164,1.041,165,0.807,166,1.481,167,1.481,168,1.481,169,1.481,170,1.481,171,1.481,172,1.481,173,1.481,174,1.481,175,1.481,176,1.041,177,1.216,178,1.481,179,1.481,180,2.397,181,1.481,182,2.397,183,1.481,184,1.481,185,1.481,186,1.481,187,1.481,188,1.481,189,0.38,190,1.041,191,1.216,192,0.911,193,1.481,194,1.481,195,2.397,196,1.481,197,1.481,198,1.481,199,1.481,200,1.481,201,4.783,202,1.481,203,1.481,204,1.481,205,1.481,206,1.481,207,1.481,208,1.481,209,1.481,210,1.481,211,1.481,212,1.481,213,1.481,214,1.481,215,1.481,216,1.481,217,1.481,218,1.481,219,1.481,220,1.481,221,1.481,222,1.481,223,1.481,224,1.481,225,1.481,226,1.481,227,1.481,228,1.481,229,1.481,230,1.481,231,1.481,232,1.481,233,1.481,234,1.481,235,1.481,236,1.481,237,1.481,238,1.481,239,1.481,240,1.481,241,1.481,242,1.481,243,1.481,244,1.481,245,1.481,246,1.481,247,1.481,248,1.481,249,1.481,250,1.481,251,1.481,252,1.481,253,1.481,254,1.481,255,1.481,256,1.481,257,1.481,258,1.481,259,1.481,260,1.481,261,1.481,262,1.481,263,1.481,264,1.481,265,1.481,266,1.481,267,1.481,268,1.481,269,1.481,270,1.481,271,1.481,272,1.481,273,1.481,274,1.481,275,1.481,276,1.481,277,1.481,278,1.481,279,1.481,280,1.481,281,1.481,282,1.481,283,1.481,284,0.911,285,1.474,286,1.165,287,0.581,288,2.133,289,0.911,290,0.911,291,0.581,292,0.911,293,0.471,294,0.72,295,0.911,296,0.471,297,0.523,298,0.807,299,0.523,300,0.807,301,0.911,302,0.016,303,0.016]],["title/injectables/BimService.html",[73,1.834,304,0.948]],["body/injectables/BimService.html",[3,0.634,4,0.634,7,0.552,15,0.331,22,1.908,71,1.559,73,2.994,74,1.718,76,1.392,77,0.041,78,0.776,79,0.491,80,1.25,87,0.839,133,1.264,143,0.874,147,0.914,154,0.634,155,1.021,161,1.404,162,1.733,189,1.021,191,3.265,302,0.033,303,0.033,304,1.548,305,2.445,306,3.265,307,4.869,308,3.265,309,3.855,310,3.977,311,3.699,312,4.869,313,3.977,314,3.977,315,2.994,316,3.423,317,2.796,318,2.445,319,1.559,320,2.166,321,2.166,322,2.445,323,1.933,324,1.933,325,3.423,326,3.977,327,3.977,328,3.977,329,2.796]],["title/interfaces/Breadcrumb.html",[330,0.541,331,1.625]],["body/interfaces/Breadcrumb.html",[3,0.486,4,0.486,7,0.423,15,0.432,16,0.84,19,1.195,76,1.174,77,0.042,78,0.791,79,0.501,80,1.423,81,1.195,82,0.872,84,1.475,87,0.93,143,0.74,147,0.701,154,0.654,155,0.783,161,1.449,165,2.235,189,0.783,286,1.995,293,1.305,302,0.028,303,0.028,304,1.305,319,1.195,323,1.482,324,1.482,330,0.841,331,3.09,332,1.329,333,2.144,334,0.624,335,4.659,336,3.018,337,2.048,338,2.905,339,3.489,340,2.703,341,3.37,342,3.489,343,1.945,344,3.052,345,2.255,346,2.524,347,2.524,348,2.524,349,1.875,350,2.144,351,1.661,352,2.853,353,3.262,354,3.262,355,2.504,356,2.886,357,1.661,358,1.875,359,3.262,360,2.504,361,0.969,362,2.504,363,2.504,364,1.661,365,1.609,366,1.482,367,2.504,368,2.504,369,1.482,370,2.504,371,2.504,372,2.886,373,2.504]],["title/components/BreadcrumbsComponent.html",[0,0.853,291,1.169]],["body/components/BreadcrumbsComponent.html",[0,1.551,1,1.02,2,2.003,3,0.415,4,0.415,5,1.6,6,1.6,7,0.361,9,2.262,11,1.134,12,2.844,14,1.6,15,0.217,16,0.753,19,1.672,22,1.442,71,1.672,72,1.829,74,1.883,76,0.744,77,0.042,78,0.739,79,0.43,80,0.668,81,2.126,83,1.169,84,1.169,133,1.356,134,1.818,143,0.68,147,0.598,154,0.415,155,0.668,162,1.134,189,1.096,284,1.6,285,2.262,286,1.788,287,1.02,288,2.852,289,1.6,290,1.6,291,1.818,292,1.6,293,0.827,294,1.264,295,1.6,296,0.827,297,0.918,298,1.417,299,0.918,300,1.417,301,1.6,302,0.025,303,0.025,319,1.02,331,2.954,334,0.753,337,1.298,339,2.586,340,2.526,343,1.818,356,3.75,357,2.766,359,3.91,364,2.526,365,1.02,366,2.254,372,2.586,374,2.136,375,3.678,376,3.678,377,3.02,378,3.678,379,4.638,380,3.678,381,3.02,382,3.678,383,2.262,384,3.678,385,3.503,386,4.267,387,3.678,388,3.678,389,5.222,390,4.638,391,4.638,392,3.808,393,3.678,394,2.602,395,2.262,396,3.678,397,2.254,398,2.133,399,3.02,400,3.678,401,3.02,402,2.254,403,2.602,404,3.678,405,3.678,406,3.678,407,3.678,408,3.678,409,2.602,410,3.678,411,3.02,412,3.02,413,3.02,414,1.788,415,2.602,416,3.02,417,2.602,418,2.602,419,2.602,420,2.602,421,3.678,422,2.602,423,2.602,424,2.602,425,2.602,426,2.586]],["title/injectables/BreadcrumbsService.html",[304,0.948,357,1.625]],["body/injectables/BreadcrumbsService.html",[3,0.474,4,0.474,7,0.412,15,0.459,16,0.825,19,1.794,22,1.58,74,1.733,76,1.153,77,0.042,78,0.73,79,0.462,80,1.175,81,1.58,82,1.309,83,1.282,84,1.721,87,0.818,133,1.282,134,1.164,143,0.73,147,0.682,154,0.643,155,0.763,161,1.733,165,1.618,189,0.763,286,1.444,293,0.944,302,0.027,303,0.027,304,1.282,305,1.826,319,1.164,323,1.444,324,1.444,330,0.731,331,3.181,333,2.088,334,0.825,335,4.523,336,2.493,337,1.945,338,2.196,339,2.088,340,2.196,341,2.439,342,2.835,343,2.122,344,2.479,345,2.225,346,1.826,347,1.826,348,1.826,349,1.826,350,2.088,351,1.618,352,3.156,353,3.609,354,3.722,355,3.31,356,3.609,357,2.196,358,2.479,359,3.807,360,2.439,361,1.282,362,3.31,363,3.31,364,2.196,365,1.58,366,1.96,367,3.31,368,2.439,369,1.444,370,2.439,371,2.439,372,3.722,373,2.439,427,2.97,428,2.97,429,2.97,430,2.97]],["title/directives/BulmaIsToggleableDirective.html",[287,1.169,299,1.053]],["body/directives/BulmaIsToggleableDirective.html",[3,0.476,4,0.476,7,0.415,11,1.302,12,2.204,15,0.249,16,0.829,19,2.078,22,1.587,25,2.489,29,2.846,74,1.914,76,0.854,77,0.042,78,0.476,79,0.496,80,0.767,83,1.287,84,1.287,87,0.879,133,1.459,134,1.587,137,2.1,143,0.476,144,1.627,147,0.686,154,0.476,155,1.416,189,0.767,287,2.078,298,1.627,299,1.429,300,2.68,302,0.028,303,0.028,334,0.612,343,1.8,398,1.764,402,1.967,431,4.529,432,2.453,433,4.048,434,4.048,435,4.048,436,4.048,437,5.749,438,4.591,439,5.592,440,5.705,441,4.591,442,4.048,443,2.846,444,4.591,445,4.048,446,5.847,447,4.048,448,2.231,449,4.591,450,4.591,451,2.988,452,2.988,453,2.988,454,2.489,455,2.988,456,2.988,457,2.988,458,2.988,459,2.988,460,2.988,461,2.988,462,2.988,463,2.988,464,2.988,465,2.988,466,2.988,467,4.591,468,2.988,469,4.048,470,2.988,471,2.1]],["title/components/IonIconComponent.html",[0,0.853,293,0.948]],["body/components/IonIconComponent.html",[0,1.528,1,1.107,2,2.121,3,0.45,4,0.45,5,1.736,6,1.736,7,0.392,11,1.23,12,2.909,14,1.736,15,0.235,25,2.395,71,1.747,74,1.574,76,1.114,77,0.042,78,0.933,79,0.45,80,1,87,0.766,133,0.897,134,1.107,136,3.379,143,0.45,144,2.121,147,0.649,154,0.45,155,0.725,162,1.23,164,3.134,165,2.121,284,1.736,285,2.395,286,2.596,287,1.107,288,2.955,289,1.736,290,1.736,291,1.107,292,1.736,293,1.528,294,2.534,295,1.736,296,0.897,297,0.997,298,1.537,299,0.997,300,1.537,301,1.736,302,0.027,303,0.027,334,0.797,336,2.964,337,0.997,343,1.107,361,1.603,365,1.107,366,1.893,397,2.336,413,4.28,443,2.738,472,3.946,473,3.379,474,2.318,475,3.895,476,5.525,477,4.807,478,2.395,479,3.895,480,3.197,481,3.197,482,3.895,483,3.197,484,3.895,485,2.823,486,2.823,487,4.459,488,3.895,489,3.895,490,3.895,491,5.213,492,4.459,493,4.459,494,4.459,495,4.459,496,4.459,497,4.459,498,4.28,499,4.459,500,4.459,501,3.66,502,4.459,503,3.66,504,3.66,505,4.459,506,4.459,507,4.459,508,2.823,509,2.823,510,2.823]],["title/interfaces/LayerData.html",[330,0.541,511,1.3]],["body/interfaces/LayerData.html",[3,0.578,4,0.578,7,0.503,11,1.58,15,0.302,16,0.941,77,0.042,78,0.733,79,0.552,82,1.644,83,1.153,87,0.804,143,0.733,154,0.804,302,0.031,303,0.031,330,0.833,332,1.58,334,0.742,358,2.826,511,2.199,512,2.549,513,2.549,514,4.143,515,2.003,516,2.08,517,3.773,518,2.503,519,2.503,520,3.44,521,2.795,522,3.773,523,2.503,524,3.231,525,3.773,526,2.579,527,2.229,528,1.421,529,3.773,530,2.452,531,2.977,532,2.982,533,2.234,534,2.977,535,2.977,536,2.977,537,2.229,538,2.229,539,2.977]],["title/components/MapComponent.html",[0,0.853,296,0.948]],["body/components/MapComponent.html",[0,0.852,1,0.377,2,0.908,3,0.153,4,0.153,5,0.591,6,0.591,7,0.133,9,1.025,10,1.812,11,0.419,12,1.909,14,1.025,15,0.139,16,0.539,19,2.132,22,0.653,24,2.162,25,1.025,28,2.162,71,1.032,72,0.676,74,1.87,76,0.631,77,0.042,78,0.717,79,0.534,80,0.998,81,1.584,82,0.631,83,1.399,84,1.482,87,0.717,89,1.812,133,0.947,134,1.454,136,1.551,137,0.676,143,0.644,144,2.755,145,2.162,146,0.789,147,0.221,154,0.153,155,0.247,161,1.426,163,2.446,164,0.676,165,0.523,176,0.676,189,0.247,192,1.025,284,0.591,285,2.156,286,1.28,287,0.377,288,1.62,289,0.591,290,0.591,291,0.377,292,0.591,293,0.305,294,0.467,295,0.591,296,0.837,297,1.957,298,0.523,299,0.339,300,0.523,301,0.591,302,0.011,303,0.011,318,1.025,319,0.377,334,0.341,337,1.694,340,2.02,343,1.168,345,1.073,347,1.025,348,1.62,352,2.008,353,2.936,354,2.733,361,1.457,364,1.202,365,0.653,366,2.228,369,0.467,385,1.812,392,2.162,398,0.419,399,0.789,402,1.28,411,1.368,412,3.428,414,1.587,426,1.852,443,1.172,448,0.81,454,2.641,471,0.676,480,1.812,481,2.162,483,1.368,498,1.812,504,2.446,511,1.617,515,2.371,516,1.797,518,2.274,519,0.908,521,2.14,523,0.908,527,0.591,528,0.865,530,0.467,532,1.434,533,2.186,537,1.62,540,0.961,541,0.676,542,1.667,543,1.667,544,1.667,545,2.207,546,3.887,547,4.041,548,3.428,549,2.207,550,2.207,551,3.428,552,2.207,553,2.207,554,2.634,555,2.98,556,3.162,557,2.634,558,3.191,559,1.667,560,2.207,561,2.207,562,2.207,563,4.036,564,1.667,565,1.667,566,1.434,567,0.961,568,1.172,569,2.681,570,2.497,571,0.961,572,0.961,573,1.667,574,2.707,575,2.207,576,2.634,577,3.191,578,1.812,579,2.608,580,2.333,581,2.634,582,2.207,583,2.207,584,1.623,585,1.551,586,1.551,587,2.207,588,2.207,589,2.207,590,2.207,591,2.207,592,2.634,593,1.812,594,2.207,595,2.207,596,2.207,597,0.961,598,1.667,599,2.156,600,1.667,601,0.961,602,1.667,603,2.634,604,1.667,605,1.667,606,1.667,607,1.667,608,0.961,609,2.162,610,0.961,611,2.634,612,1.434,613,1.667,614,0.961,615,1.667,616,0.961,617,2.634,618,0.961,619,0.961,620,2.162,621,1.667,622,0.961,623,1.667,624,0.961,625,1.667,626,1.667,627,1.667,628,1.667,629,0.961,630,3.046,631,1.667,632,1.667,633,1.667,634,2.634,635,0.961,636,0.961,637,0.961,638,1.667,639,3.428,640,0.961,641,1.667,642,1.368,643,0.961,644,0.961,645,0.961,646,1.667,647,0.961,648,2.207,649,0.961,650,1.172,651,0.961,652,1.172,653,0.961,654,2.634,655,1.667,656,1.667,657,0.961,658,1.667,659,2.634,660,0.961,661,0.961,662,1.368,663,0.961,664,0.961,665,0.961,666,0.961,667,0.961,668,0.789,669,1.667,670,0.961,671,0.961,672,0.961,673,0.789,674,0.961,675,0.961,676,1.667,677,1.667,678,0.961,679,0.961,680,0.789,681,0.961,682,0.961,683,0.961,684,0.961,685,0.961,686,0.961,687,0.789,688,0.961,689,0.789,690,0.789,691,0.789,692,0.789,693,0.789,694,1.368,695,0.789,696,0.961,697,0.961,698,0.961,699,0.961,700,0.961,701,0.961,702,0.961,703,0.961,704,0.961,705,0.961,706,0.961,707,0.961,708,0.961,709,0.961,710,0.961,711,0.961,712,0.961,713,0.961,714,0.961,715,0.961,716,0.961,717,0.961,718,1.667,719,0.961,720,1.667,721,0.961,722,1.667,723,1.667,724,0.961,725,1.667,726,0.961,727,0.961,728,0.789,729,1.667,730,0.961,731,1.667,732,0.961,733,0.961,734,0.961,735,0.961,736,0.676,737,0.961,738,0.961,739,0.961,740,1.172,741,0.961,742,0.961,743,0.961,744,0.961,745,0.961,746,0.961,747,0.961,748,0.961,749,0.961,750,1.368,751,0.961,752,0.961,753,2.207,754,1.667,755,0.961,756,2.207,757,0.961,758,2.207,759,0.676,760,0.961,761,0.961,762,0.961,763,1.667,764,0.961,765,0.961,766,0.961,767,1.667,768,1.368,769,0.961,770,0.961,771,0.961,772,0.961,773,1.667,774,1.172,775,0.961,776,1.368,777,1.667,778,1.667,779,0.961,780,0.961,781,2.207,782,0.961,783,0.961,784,0.961,785,2.634,786,0.961,787,0.961,788,1.368,789,0.961,790,0.961,791,0.961,792,0.961,793,0.961,794,0.961,795,0.961,796,0.591,797,0.789,798,0.789,799,1.667,800,0.961,801,1.667,802,0.961,803,0.961,804,0.961,805,1.667,806,0.961,807,0.961,808,0.961,809,0.961,810,0.961,811,1.667,812,0.961,813,0.961,814,0.961,815,0.961,816,0.961,817,1.667,818,0.961,819,0.961,820,0.961,821,0.961,822,0.676,823,0.961,824,2.207,825,0.961,826,0.961,827,0.961,828,0.961,829,0.961,830,0.961,831,0.961,832,2.634,833,0.961,834,0.961,835,0.961,836,0.961,837,0.961,838,0.961,839,0.961,840,0.961,841,0.961,842,1.667,843,1.667,844,0.961,845,0.961,846,0.961,847,0.961,848,0.961,849,0.961,850,0.961,851,0.961,852,1.667,853,0.961,854,0.961,855,0.961,856,0.961,857,0.961]],["title/interfaces/MapDB.html",[330,0.541,858,1.834]],["body/interfaces/MapDB.html",[3,0.332,4,0.332,7,0.289,15,0.174,16,0.641,19,0.817,71,0.817,77,0.042,78,0.332,79,0.492,81,1.226,82,0.895,84,1.494,87,0.713,143,0.818,147,0.479,154,0.332,155,0.535,161,1.326,162,0.908,189,1.072,190,1.465,192,2.752,297,1.721,302,0.021,303,0.021,304,0.995,309,2.2,311,2.936,315,1.282,316,2.2,317,1.465,318,1.282,319,0.817,320,1.135,321,1.704,322,1.282,323,1.013,324,1.013,325,1.465,329,1.465,330,0.378,332,0.908,334,0.427,337,1.326,338,2.559,344,2.568,345,2.03,361,1.327,365,1.637,369,1.826,383,1.282,395,1.282,397,1.521,398,0.908,402,1.013,414,2.03,478,1.924,511,2.048,515,1.82,516,2.107,518,2.046,519,1.135,520,2.31,521,2.641,526,2.369,528,0.817,530,1.013,532,2.274,533,2.369,538,1.282,566,1.135,568,1.465,570,2.988,579,2.2,580,2.578,584,2.046,585,1.465,586,1.465,612,1.704,650,1.465,736,1.465,740,2.641,774,2.2,796,1.282,822,1.465,858,1.924,859,1.282,860,2.641,861,3.779,862,2.569,863,3.084,864,3.859,865,4.176,866,3.428,867,2.569,868,3.084,869,2.569,870,3.428,871,3.084,872,3.084,873,3.146,874,2.569,875,2.569,876,2.569,877,2.569,878,1.711,879,3.084,880,1.282,881,2.568,882,2.936,883,1.282,884,1.465,885,1.282,886,1.135,887,1.924,888,1.711,889,3.084,890,2.569,891,1.711,892,1.711,893,2.569,894,2.569,895,2.569,896,1.711,897,1.711,898,2.569,899,1.711,900,1.711,901,1.711,902,1.711,903,1.711,904,1.711,905,1.711,906,3.428,907,1.465,908,1.711,909,1.711,910,2.569,911,3.084,912,1.711,913,3.084,914,2.569,915,1.711,916,2.569,917,1.711,918,2.569,919,2.569,920,2.569,921,1.711,922,1.711,923,1.711,924,1.711,925,2.569,926,1.711,927,1.711,928,1.711,929,1.711,930,1.711,931,1.711,932,1.711,933,1.711,934,2.569,935,1.711,936,1.465,937,1.282,938,1.711,939,1.711,940,1.711,941,1.711,942,1.711,943,1.711,944,1.711,945,1.711,946,1.711,947,1.711,948,1.711,949,1.711,950,1.711,951,1.711,952,2.569,953,1.711,954,1.711,955,1.711,956,1.711,957,1.711,958,1.711,959,1.711]],["title/injectables/MapService.html",[304,0.948,566,1.625]],["body/injectables/MapService.html",[3,0.315,4,0.315,7,0.274,15,0.165,16,0.616,19,1.426,22,1.179,71,1.426,74,1.285,76,0.86,77,0.042,78,0.58,79,0.367,80,0.772,81,1.594,82,0.86,83,0.629,84,1.39,87,0.763,133,0.629,143,0.806,147,0.454,154,0.315,155,0.508,161,1.285,162,0.862,189,1.044,190,2.559,192,2.69,297,1.784,302,0.02,303,0.02,304,0.956,305,1.216,308,1.624,309,2.859,311,3.075,315,1.849,316,2.114,317,1.39,318,1.216,319,0.775,320,1.077,321,1.638,322,1.216,323,0.961,324,0.961,325,1.39,329,1.39,330,0.359,334,0.745,337,1.285,338,1.982,344,2.5,345,1.462,361,0.956,365,1.594,369,1.462,383,1.849,395,1.216,397,1.976,398,1.311,402,1.769,414,2.126,478,1.216,511,1.906,515,1.586,516,2.181,518,2.509,519,1.077,520,2.238,521,2.547,526,2.126,528,0.775,530,0.961,532,1.982,533,2.126,538,1.216,566,1.638,568,2.114,570,3.009,579,3.239,580,2.582,584,1.982,585,1.39,586,2.114,612,1.638,650,1.39,736,2.114,740,2.559,774,2.559,796,1.216,822,1.39,858,1.216,859,1.216,860,2.114,861,3.624,862,1.624,863,2.469,864,2.469,866,3.338,867,1.624,868,2.988,869,1.624,870,2.469,871,2.988,872,2.988,873,3.075,874,1.624,875,1.624,876,2.469,877,2.469,878,1.624,879,3.591,880,1.216,881,2.833,882,3.239,883,1.216,884,1.39,885,1.216,886,1.077,887,1.849,888,1.624,889,3.782,890,3.338,891,2.469,892,2.469,893,3.338,894,3.338,895,2.469,896,1.624,897,1.624,898,2.469,899,1.624,900,1.624,901,1.624,902,1.624,903,2.469,904,2.469,905,2.469,906,3.782,907,2.114,908,2.988,909,1.624,910,2.469,911,2.988,912,1.624,913,2.988,914,2.469,915,1.624,916,2.469,917,1.624,918,2.469,919,2.469,920,2.469,921,1.624,922,1.624,923,1.624,924,1.624,925,2.469,926,1.624,927,1.624,928,1.624,929,1.624,930,1.624,931,1.624,932,1.624,933,1.624,934,2.469,935,1.624,936,1.39,937,1.216,938,1.624,939,1.624,940,1.624,941,1.624,942,1.624,943,1.624,944,1.624,945,1.624,946,1.624,947,1.624,948,1.624,949,1.624,950,1.624,951,1.624,952,2.469,953,1.624,954,1.624,955,1.624,956,1.624,957,1.624,958,1.624,959,1.624,960,3.008,961,1.978,962,1.978,963,1.624]],["title/interfaces/Marker.html",[330,0.541,599,1.834]],["body/interfaces/Marker.html",[3,0.564,4,0.564,7,0.491,15,0.295,16,0.926,29,3.181,77,0.042,79,0.53,80,1.469,82,1.59,83,1.438,134,1.387,143,0.721,154,0.564,201,2.905,296,1.438,302,0.031,303,0.031,330,0.905,332,1.542,334,0.724,336,3.027,337,1.249,340,2.464,343,1.774,361,1.438,364,2.464,448,2.199,515,2.174,523,3.027,527,2.176,528,1.774,551,3.715,599,3.625,937,3.342,964,2.905,965,4.525,966,3.715,967,5.259,968,5.825,969,4.989,970,4.989,971,4.525,972,4.525,973,4.525,974,4.525]],["title/guards/QueryParameterGuard.html",[975,1.834,976,2.097]],["body/guards/QueryParameterGuard.html",[3,0.729,4,0.472,7,0.411,9,1.821,15,0.247,22,1.577,71,1.792,74,1.42,76,1.402,77,0.042,78,0.642,79,0.406,80,1.259,87,0.817,133,0.941,143,0.729,147,0.681,154,0.472,155,0.76,162,1.291,189,1.033,302,0.027,303,0.027,304,1.279,315,3.015,319,1.161,323,1.439,324,1.439,334,0.936,337,1.81,338,2.191,342,4.004,343,1.577,345,1.956,346,2.475,347,2.475,349,3.015,350,3.605,351,1.613,352,3.153,361,1.559,365,1.922,381,3.304,395,3.385,397,1.439,398,1.291,402,1.956,414,1.439,416,3.304,454,2.475,501,3.304,516,1.577,524,3.447,580,1.956,975,2.475,976,3.447,977,2.431,978,3.752,979,2.431,980,4.024,981,3.924,982,4.024,983,4.024,984,4.024,985,4.024,986,4.904,987,5.506,988,4.024,989,4.024,990,5.128,991,2.962,992,2.962,993,4.024,994,4.024,995,2.962,996,4.342,997,4.904,998,2.962,999,4.026,1000,4.024,1001,3.304,1002,2.962,1003,2.962,1004,2.962,1005,2.962,1006,2.962,1007,2.962]],["title/interfaces/ShapeData.html",[330,0.541,526,1.45]],["body/interfaces/ShapeData.html",[3,0.569,4,0.569,7,0.495,11,1.983,15,0.297,16,0.932,77,0.042,78,0.888,79,0.571,82,1.639,83,1.134,87,0.923,143,0.725,154,0.799,302,0.031,303,0.031,330,0.825,332,1.555,334,0.731,358,2.195,511,1.983,512,2.509,513,2.509,514,4.112,515,1.555,516,1.783,517,2.93,518,1.944,519,1.944,520,2.798,521,2.434,522,2.93,523,1.944,524,2.509,525,2.93,526,2.434,527,2.195,528,1.399,529,4.331,530,2.752,531,3.736,532,3.176,533,2.708,534,3.736,535,3.736,536,3.736,537,2.798,538,3.244,539,3.736]],["title/interfaces/WisdomInterface.html",[330,0.541,1008,2.097]],["body/interfaces/WisdomInterface.html",[0,1.594,3,0.57,4,0.57,7,0.496,15,0.298,16,0.933,77,0.041,78,0.726,79,0.506,87,0.799,143,0.57,154,0.57,302,0.031,303,0.031,330,0.989,332,1.558,334,0.732,351,1.947,478,2.801,569,3.74,574,3.083,578,3.74,580,2.565,593,3.74,776,3.74,977,4.334,981,4.102,1008,3.711,1009,2.935,1010,5.279,1011,3.246,1012,3.711,1013,4.556,1014,4.556,1015,3.711,1016,4.556,1017,4.556,1018,4.556,1019,5.574,1020,5.574,1021,4.556,1022,4.556,1023,4.556,1024,4.556,1025,4.556,1026,4.556,1027,4.556,1028,4.556]],["title/modules/WisdomModule.html",[1012,2.097,1029,1.834]],["body/modules/WisdomModule.html",[1,2.309,3,0.561,4,0.561,7,0.489,77,0.041,143,0.92,147,0.809,154,0.561,155,0.904,291,2.309,293,1.873,294,1.711,296,1.873,299,2.079,302,0.031,303,0.031,351,1.917,473,2.475,556,3.171,689,2.89,690,2.89,759,2.475,1011,2.165,1029,3.706,1030,2.773,1031,2.89,1032,2.89,1033,2.89,1034,2.89,1035,3.52,1036,4.51,1037,4.51,1038,4.51,1039,2.89,1040,4.51,1041,4.51,1042,4.51,1043,3.52,1044,3.52,1045,3.52,1046,3.52,1047,3.52,1048,3.52,1049,3.52]],["title/coverage.html",[1050,3.32]],["body/coverage.html",[0,1.443,1,1.245,7,0.441,8,2.608,39,2.234,73,1.954,77,0.041,79,0.32,161,1.121,287,1.245,291,1.245,293,1.01,296,1.01,299,1.121,302,0.029,303,0.029,304,1.505,306,2.608,320,1.73,321,2.86,330,0.979,331,1.73,333,2.966,357,1.73,374,2.608,431,2.608,432,2.608,448,2.677,472,2.608,473,2.234,474,2.608,511,1.385,512,2.966,513,2.966,526,1.544,541,2.234,566,1.73,599,1.954,652,2.234,750,4.984,768,3.463,858,1.954,859,3.229,880,1.954,881,1.954,883,1.954,885,1.954,887,1.954,964,2.608,975,1.954,976,2.234,978,2.608,979,2.608,1008,2.234,1009,2.608,1050,2.608,1051,3.177,1052,3.177,1053,3.177,1054,4.219,1055,3.177,1056,3.177,1057,3.177,1058,5.046,1059,3.177,1060,5.046,1061,4.311,1062,3.463,1063,5.662,1064,5.915,1065,2.608,1066,2.608,1067,2.608,1068,2.608,1069,2.608,1070,2.608,1071,2.608,1072,2.608,1073,2.608,1074,3.177,1075,2.966,1076,2.608,1077,2.608,1078,4.311,1079,2.608,1080,2.608,1081,2.608,1082,2.608,1083,2.608,1084,3.177,1085,3.177]],["title/dependencies.html",[1030,2.202,1086,2.056]],["body/dependencies.html",[77,0.04,147,1.064,302,0.036,303,0.036,1030,3.277,1039,3.802,1087,4.632,1088,4.632,1089,4.632,1090,5.33]],["title/miscellaneous/enumerations.html",[1091,0.982,1092,2.939]],["body/miscellaneous/enumerations.html",[15,0.374,77,0.04,84,1.814,297,1.585,302,0.036,303,0.036,366,2.182,570,2.85,668,4.297,680,4.297,996,4.297,1075,3.156,1091,1.76,1092,3.686,1093,3.686,1094,4.49,1095,5.235]],["title/miscellaneous/functions.html",[1091,0.982,1096,2.939]],["body/miscellaneous/functions.html",[0,0.885,15,0.258,76,1.565,77,0.04,78,0.872,79,0.54,80,1.405,81,1.832,82,1.565,87,0.887,133,1.74,189,0.795,297,1.65,302,0.028,303,0.028,334,1.12,346,2.549,348,2.549,349,2.549,361,0.984,377,2.541,397,2.015,401,2.541,426,3.66,448,2.272,503,2.541,516,1.213,523,1.686,528,1.213,530,1.504,533,2.427,537,2.549,570,2.98,574,2.549,577,3.404,584,1.686,609,3.838,612,1.686,620,2.541,662,2.541,788,2.541,797,2.541,798,4.099,886,1.686,963,2.541,981,3.286,999,2.541,1001,3.404,1015,2.915,1075,2.176,1076,3.404,1077,3.404,1078,2.541,1079,3.404,1080,3.404,1081,3.404,1082,3.404,1083,3.404,1091,1.213,1093,3.404,1096,2.541,1097,5.206,1098,3.096,1099,3.096,1100,3.096,1101,3.096,1102,4.146,1103,3.096,1104,3.096,1105,3.096,1106,3.096,1107,3.096,1108,3.096,1109,3.096,1110,3.096,1111,3.096,1112,3.096,1113,3.096,1114,3.096,1115,3.096,1116,3.096,1117,3.096,1118,3.096,1119,3.096,1120,3.096,1121,3.096,1122,3.096,1123,3.096,1124,3.096,1125,4.146,1126,4.675,1127,4.146,1128,3.096,1129,3.096,1130,3.096,1131,3.096,1132,3.096,1133,3.096,1134,3.096,1135,2.541,1136,3.096,1137,3.096,1138,4.675,1139,2.541,1140,3.096,1141,3.096,1142,3.096,1143,3.096,1144,5.206,1145,3.096,1146,3.096,1147,3.096,1148,3.096,1149,3.096]],["title/index.html",[15,0.249,1150,2.449]],["body/index.html",[1,2.273,2,2.17,77,0.041,287,1.562,291,2.273,293,1.843,296,1.843,299,2.047,302,0.033,303,0.033,305,2.45,332,1.737,369,2.559,556,3.427,759,2.801,975,2.45,1012,2.801,1029,3.733,1030,2.997,1031,3.271,1032,3.271,1033,3.271,1034,3.271,1150,3.271,1151,3.985,1152,3.985,1153,3.985]],["title/modules.html",[1011,2.487]],["body/modules.html",[77,0.037,302,0.037,303,0.037,1011,2.887,1029,2.887,1154,4.695,1155,4.695,1156,4.695,1157,4.695]],["title/properties.html",[16,0.733,1086,2.056]],["body/properties.html",[16,0.966,77,0.038,302,0.037,303,0.037,886,2.568,1158,4.717]],["title/miscellaneous/typealiases.html",[1091,0.982,1159,3.581]],["body/miscellaneous/typealiases.html",[15,0.377,77,0.036,79,0.53,87,0.72,144,2.461,302,0.036,303,0.036,515,2.29,541,3.177,548,4.314,574,2.779,580,2.196,639,4.314,691,3.71,692,3.71,693,3.71,694,3.71,695,3.71,1091,1.771,1160,4.519,1161,5.255]],["title/miscellaneous/variables.html",[1091,0.982,1162,2.939]],["body/miscellaneous/variables.html",[15,0.231,39,3.355,77,0.042,78,0.443,79,0.481,82,0.794,83,1.75,84,1.75,87,0.705,134,1.089,161,1.831,176,3.524,177,2.28,189,0.989,294,1.35,296,0.883,297,1.56,302,0.026,303,0.026,320,2.097,321,2.73,322,1.708,336,2.407,361,1.691,383,1.708,398,2.08,414,2.521,438,2.28,448,1.871,454,1.708,471,1.953,516,1.089,521,1.35,528,1.732,546,3.629,558,3.161,563,2.28,584,1.513,612,2.407,630,4.115,642,2.28,652,3.646,673,2.28,687,2.28,728,2.28,796,1.708,859,1.708,860,1.953,861,3.107,873,2.707,880,2.368,881,2.935,882,1.953,883,2.368,884,1.953,885,2.368,886,1.513,887,2.368,907,1.953,936,1.953,937,2.368,966,2.28,1015,1.953,1061,4.115,1062,3.918,1065,3.629,1066,3.161,1067,3.161,1068,3.161,1069,3.161,1070,3.161,1071,3.161,1072,2.28,1073,3.161,1091,1.089,1135,2.28,1139,2.28,1162,2.28,1163,4.42,1164,2.778,1165,5.013,1166,3.851,1167,3.851,1168,2.778,1169,2.778,1170,4.773,1171,2.778,1172,2.778,1173,2.778,1174,2.778,1175,2.778,1176,2.778,1177,2.778,1178,3.851,1179,2.778,1180,3.851,1181,2.778,1182,2.778,1183,4.42,1184,3.851,1185,2.778,1186,3.851,1187,2.778,1188,3.851,1189,2.778,1190,2.778,1191,2.778,1192,2.778,1193,2.778,1194,2.778,1195,2.778,1196,2.778,1197,2.778,1198,5.574,1199,5.013,1200,2.778,1201,2.778,1202,2.778,1203,2.778,1204,2.778,1205,2.778,1206,2.778,1207,2.778,1208,2.778,1209,2.778,1210,2.778,1211,2.778,1212,2.778,1213,2.778,1214,2.778,1215,2.778,1216,2.778,1217,2.778]]],"invertedIndex":[["",{"_index":77,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":768,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1158,"title":{},"body":{"properties.html":{}}}],["0/3",{"_index":1056,"title":{},"body":{"coverage.html":{}}}],["0/52",{"_index":1055,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":369,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"index.html":{}}}],["1/1",{"_index":1064,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":750,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["14.2.4",{"_index":1090,"title":{},"body":{"dependencies.html":{}}}],["16/9",{"_index":85,"title":{},"body":{"components/BimComponent.html":{}}}],["1f5aec",{"_index":613,"title":{},"body":{"components/MapComponent.html":{}}}],["2",{"_index":796,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["2.4.0",{"_index":1088,"title":{},"body":{"dependencies.html":{}}}],["2022",{"_index":793,"title":{},"body":{"components/MapComponent.html":{}}}],["29/29",{"_index":1074,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":1152,"title":{},"body":{"index.html":{}}}],["3/3",{"_index":1060,"title":{},"body":{"coverage.html":{}}}],["39;01&#39",{"_index":676,"title":{},"body":{"components/MapComponent.html":{}}}],["39;034030000000&#39",{"_index":677,"title":{},"body":{"components/MapComponent.html":{}}}],["39;all",{"_index":667,"title":{},"body":{"components/MapComponent.html":{}}}],["39;only",{"_index":672,"title":{},"body":{"components/MapComponent.html":{}}}],["39;show",{"_index":679,"title":{},"body":{"components/MapComponent.html":{}}}],["4",{"_index":1151,"title":{},"body":{"index.html":{}}}],["4/4",{"_index":1054,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":1058,"title":{},"body":{"coverage.html":{}}}],["500px",{"_index":634,"title":{},"body":{"components/MapComponent.html":{}}}],["53.1434501",{"_index":627,"title":{},"body":{"components/MapComponent.html":{}}}],["6",{"_index":1153,"title":{},"body":{"index.html":{}}}],["6/6",{"_index":1059,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":659,"title":{},"body":{"components/MapComponent.html":{}}}],["7/7",{"_index":1057,"title":{},"body":{"coverage.html":{}}}],["8.2145521",{"_index":628,"title":{},"body":{"components/MapComponent.html":{}}}],["a0a0a0",{"_index":1196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abc123",{"_index":1123,"title":{},"body":{"miscellaneous/functions.html":{}}}],["accessors",{"_index":443,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["according",{"_index":175,"title":{},"body":{"components/BimComponent.html":{}}}],["activated",{"_index":999,"title":{},"body":{"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["activatedroutesnapshot",{"_index":349,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["active",{"_index":439,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["actual_component",{"_index":301,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["adds",{"_index":482,"title":{},"body":{"components/IonIconComponent.html":{}}}],["administration",{"_index":1095,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["afterviewinit",{"_index":10,"title":{},"body":{"components/BimComponent.html":{},"components/MapComponent.html":{}}}],["alias",{"_index":691,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":1160,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alive",{"_index":389,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["allow",{"_index":480,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["allows",{"_index":399,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{}}}],["already",{"_index":868,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["always",{"_index":605,"title":{},"body":{"components/MapComponent.html":{}}}],["angular",{"_index":491,"title":{},"body":{"components/IonIconComponent.html":{}}}],["angular/common",{"_index":1039,"title":{},"body":{"modules/WisdomModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":317,"title":{},"body":{"injectables/BimService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["angular/core",{"_index":147,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"modules/WisdomModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":351,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["any).options.padding",{"_index":749,"title":{},"body":{"components/MapComponent.html":{}}}],["api",{"_index":881,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["api_url",{"_index":883,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["application/json",{"_index":938,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["arg0",{"_index":1168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args",{"_index":196,"title":{},"body":{"components/BimComponent.html":{}}}],["array",{"_index":345,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["array.from(this.selectedshapes[layerkey",{"_index":856,"title":{},"body":{"components/MapComponent.html":{}}}],["aspect",{"_index":26,"title":{},"body":{"components/BimComponent.html":{}}}],["aspectratio",{"_index":160,"title":{},"body":{"components/BimComponent.html":{}}}],["async",{"_index":190,"title":{},"body":{"components/BimComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["asynchronously",{"_index":903,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["attention",{"_index":588,"title":{},"body":{"components/MapComponent.html":{}}}],["attribute",{"_index":501,"title":{},"body":{"components/IonIconComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["attribution",{"_index":789,"title":{},"body":{"components/MapComponent.html":{}}}],["automatically",{"_index":1023,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["await",{"_index":192,"title":{},"body":{"components/BimComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["back",{"_index":948,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["base",{"_index":1065,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["behaviorsubject",{"_index":353,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{}}}],["beware",{"_index":1133,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bim",{"_index":13,"title":{},"body":{"components/BimComponent.html":{}}}],["bim'},{'name",{"_index":290,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["bim.service",{"_index":153,"title":{},"body":{"components/BimComponent.html":{}}}],["bim/bim.component",{"_index":1048,"title":{},"body":{"modules/WisdomModule.html":{}}}],["bimcomponent",{"_index":1,"title":{"components/BimComponent.html":{}},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["bimservice",{"_index":73,"title":{"injectables/BimService.html":{}},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"coverage.html":{}}}],["bkg",{"_index":792,"title":{},"body":{"components/MapComponent.html":{}}}],["blob",{"_index":191,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{}}}],["boolean",{"_index":402,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["box",{"_index":520,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["breadcrumb",{"_index":331,"title":{"interfaces/Breadcrumb.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"coverage.html":{}}}],["breadcrumbs",{"_index":356,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{}}}],["breadcrumbs'},{'name",{"_index":292,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["breadcrumbs.component.html",{"_index":388,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["breadcrumbs.service",{"_index":418,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["breadcrumbs/breadcrumbs.component",{"_index":1043,"title":{},"body":{"modules/WisdomModule.html":{}}}],["breadcrumbscomponent",{"_index":291,"title":{"components/BreadcrumbsComponent.html":{}},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["breadcrumbsservice",{"_index":357,"title":{"injectables/BreadcrumbsService.html":{}},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"coverage.html":{}}}],["breadcrumb}s",{"_index":360,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["browse",{"_index":1157,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1154,"title":{},"body":{"modules.html":{}}}],["bulma",{"_index":435,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["bulma/bulma",{"_index":1044,"title":{},"body":{"modules/WisdomModule.html":{}}}],["bulmaistoggleabledirective",{"_index":299,"title":{"directives/BulmaIsToggleableDirective.html":{}},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["button",{"_index":1186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["button.style.backgroundimage",{"_index":1187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cache",{"_index":907,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["cache.ts",{"_index":1067,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cached",{"_index":866,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedkeys",{"_index":927,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedquery",{"_index":914,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedquery.box",{"_index":926,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedquery.shapes",{"_index":921,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["callback",{"_index":1167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":990,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["canactivate(route",{"_index":995,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["canvas",{"_index":174,"title":{},"body":{"components/BimComponent.html":{}}}],["canvaselement",{"_index":169,"title":{},"body":{"components/BimComponent.html":{}}}],["canvaselement.height",{"_index":182,"title":{},"body":{"components/BimComponent.html":{}}}],["canvaselement.width",{"_index":180,"title":{},"body":{"components/BimComponent.html":{}}}],["canvasref",{"_index":17,"title":{},"body":{"components/BimComponent.html":{}}}],["causing",{"_index":1131,"title":{},"body":{"miscellaneous/functions.html":{}}}],["center",{"_index":546,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["centercontent",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["certain",{"_index":980,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["check",{"_index":395,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["class",{"_index":155,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"modules/WisdomModule.html":{}}}],["classes",{"_index":440,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["classes.trim().split(/\\s",{"_index":465,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["clear",{"_index":755,"title":{},"body":{"components/MapComponent.html":{}}}],["click",{"_index":29,"title":{},"body":{"components/BimComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"interfaces/Marker.html":{}}}],["clickable",{"_index":384,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["clicked",{"_index":450,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["clicking",{"_index":436,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["client",{"_index":893,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cluster_wisdommodule",{"_index":1031,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["cluster_wisdommodule_declarations",{"_index":1033,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["cluster_wisdommodule_exports",{"_index":1032,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["code",{"_index":537,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{}}}],["collected",{"_index":375,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["collecting",{"_index":355,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["color",{"_index":798,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["common.bim.loading",{"_index":327,"title":{},"body":{"injectables/BimService.html":{}}}],["commonmodule",{"_index":1038,"title":{},"body":{"modules/WisdomModule.html":{}}}],["complaining",{"_index":496,"title":{},"body":{"components/IonIconComponent.html":{}}}],["component",{"_index":0,"title":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["component_template",{"_index":289,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"index.html":{}}}],["config",{"_index":694,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["considered",{"_index":380,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["console.error(e",{"_index":198,"title":{},"body":{"components/BimComponent.html":{}}}],["console.log(viewer.check",{"_index":166,"title":{},"body":{"components/BimComponent.html":{}}}],["const",{"_index":740,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["constructor",{"_index":71,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["constructor(elref",{"_index":485,"title":{},"body":{"components/IonIconComponent.html":{}}}],["constructor(http",{"_index":308,"title":{},"body":{"injectables/BimService.html":{},"injectables/MapService.html":{}}}],["constructor(private",{"_index":162,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["constructor(router",{"_index":991,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["constructor(service",{"_index":72,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{}}}],["container",{"_index":176,"title":{},"body":{"components/BimComponent.html":{},"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["container.addeventlistener(\"click",{"_index":1185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["containerelement",{"_index":167,"title":{},"body":{"components/BimComponent.html":{}}}],["containerelement.style.height",{"_index":184,"title":{},"body":{"components/BimComponent.html":{}}}],["containerref",{"_index":18,"title":{},"body":{"components/BimComponent.html":{}}}],["containing",{"_index":524,"title":{},"body":{"interfaces/LayerData.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{}}}],["content",{"_index":937,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":325,"title":{},"body":{"injectables/BimService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["context.set(use_loader",{"_index":326,"title":{},"body":{"injectables/BimService.html":{}}}],["context/use",{"_index":321,"title":{},"body":{"injectables/BimService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["contextmenu",{"_index":30,"title":{},"body":{"components/BimComponent.html":{}}}],["control",{"_index":652,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["coordinates",{"_index":523,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{}}}],["corner",{"_index":522,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["correct",{"_index":493,"title":{},"body":{"components/IonIconComponent.html":{}}}],["coverage",{"_index":1050,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covering",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creating",{"_index":965,"title":{},"body":{"interfaces/Marker.html":{}}}],["current",{"_index":381,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["currently",{"_index":454,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/variables.html":{}}}],["curtain",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["curtain.ts",{"_index":1069,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":966,"title":{},"body":{"interfaces/Marker.html":{},"miscellaneous/variables.html":{}}}],["d35a0c",{"_index":607,"title":{},"body":{"components/MapComponent.html":{}}}],["data",{"_index":516,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["data.box[0",{"_index":826,"title":{},"body":{"components/MapComponent.html":{}}}],["data.box[2",{"_index":827,"title":{},"body":{"components/MapComponent.html":{}}}],["data.shapes",{"_index":819,"title":{},"body":{"components/MapComponent.html":{}}}],["data.ts",{"_index":513,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{},"coverage.html":{}}}],["db",{"_index":861,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["db.createobjectstore(\"queries",{"_index":901,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db.createobjectstore(\"shapes",{"_index":902,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db.deleteobjectstore(\"queries",{"_index":899,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db.deleteobjectstore(\"shapes",{"_index":900,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db_name",{"_index":885,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dblclick",{"_index":31,"title":{},"body":{"components/BimComponent.html":{}}}],["dbschema",{"_index":863,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["de",{"_index":791,"title":{},"body":{"components/MapComponent.html":{}}}],["de/by",{"_index":795,"title":{},"body":{"components/MapComponent.html":{}}}],["declarations",{"_index":1036,"title":{},"body":{"modules/WisdomModule.html":{}}}],["decorators",{"_index":137,"title":{},"body":{"components/BimComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{}}}],["default",{"_index":83,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":630,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":74,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["dependencies",{"_index":1030,"title":{"dependencies.html":{}},"body":{"modules/WisdomModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":334,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{}}}],["destroy",{"_index":404,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["determine",{"_index":1199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deterministically",{"_index":1117,"title":{},"body":{"miscellaneous/functions.html":{}}}],["digit",{"_index":1106,"title":{},"body":{"miscellaneous/functions.html":{}}}],["direct",{"_index":984,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["direction",{"_index":804,"title":{},"body":{"components/MapComponent.html":{}}}],["directive",{"_index":287,"title":{"directives/BulmaIsToggleableDirective.html":{}},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"coverage.html":{},"index.html":{}}}],["directives",{"_index":298,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["directly",{"_index":498,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["disable",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["display",{"_index":366,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"miscellaneous/enumerations.html":{}}}],["displayed",{"_index":340,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{}}}],["displaying",{"_index":542,"title":{},"body":{"components/MapComponent.html":{}}}],["displaylayer",{"_index":758,"title":{},"body":{"components/MapComponent.html":{}}}],["displayname",{"_index":729,"title":{},"body":{"components/MapComponent.html":{}}}],["displays",{"_index":525,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["district",{"_index":680,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/enumerations.html":{}}}],["div",{"_index":177,"title":{},"body":{"components/BimComponent.html":{},"miscellaneous/variables.html":{}}}],["dl",{"_index":794,"title":{},"body":{"components/MapComponent.html":{}}}],["docs",{"_index":592,"title":{},"body":{"components/MapComponent.html":{}}}],["documentation",{"_index":1051,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["dot",{"_index":1108,"title":{},"body":{"miscellaneous/functions.html":{}}}],["drag",{"_index":32,"title":{},"body":{"components/BimComponent.html":{}}}],["dragend",{"_index":33,"title":{},"body":{"components/BimComponent.html":{}}}],["dragenter",{"_index":34,"title":{},"body":{"components/BimComponent.html":{}}}],["dragleave",{"_index":35,"title":{},"body":{"components/BimComponent.html":{}}}],["dragover",{"_index":36,"title":{},"body":{"components/BimComponent.html":{}}}],["dragstart",{"_index":37,"title":{},"body":{"components/BimComponent.html":{}}}],["drop",{"_index":38,"title":{},"body":{"components/BimComponent.html":{}}}],["e.g",{"_index":1141,"title":{},"body":{"miscellaneous/functions.html":{}}}],["element",{"_index":286,"title":{},"body":{"components/BimComponent.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["elementclasses",{"_index":444,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["elementclasses(classes",{"_index":463,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["elementref",{"_index":136,"title":{},"body":{"components/BimComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["elements",{"_index":655,"title":{},"body":{"components/MapComponent.html":{}}}],["elref",{"_index":487,"title":{},"body":{"components/IonIconComponent.html":{}}}],["emit",{"_index":621,"title":{},"body":{"components/MapComponent.html":{}}}],["emitselection",{"_index":557,"title":{},"body":{"components/MapComponent.html":{}}}],["emitted",{"_index":575,"title":{},"body":{"components/MapComponent.html":{}}}],["empty",{"_index":585,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["end",{"_index":1107,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enforce",{"_index":692,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["ensuring",{"_index":400,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["entries",{"_index":994,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["entries[0].contentrect.width",{"_index":181,"title":{},"body":{"components/BimComponent.html":{}}}],["entry",{"_index":1027,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["enumerations",{"_index":1092,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":39,"title":{},"body":{"components/BimComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["event",{"_index":971,"title":{},"body":{"interfaces/Marker.html":{}}}],["eventemitter",{"_index":89,"title":{},"body":{"components/BimComponent.html":{},"components/MapComponent.html":{}}}],["everything",{"_index":586,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["evt",{"_index":201,"title":{},"body":{"components/BimComponent.html":{},"interfaces/Marker.html":{}}}],["exactly",{"_index":674,"title":{},"body":{"components/MapComponent.html":{}}}],["example",{"_index":662,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["executed",{"_index":449,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["expects",{"_index":982,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["export",{"_index":154,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["exported",{"_index":1017,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["exports",{"_index":1037,"title":{},"body":{"modules/WisdomModule.html":{}}}],["extends",{"_index":862,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["extension",{"_index":1191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fails",{"_index":988,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["false",{"_index":398,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/variables.html":{}}}],["feature",{"_index":801,"title":{},"body":{"components/MapComponent.html":{}}}],["feature.properties.key",{"_index":808,"title":{},"body":{"components/MapComponent.html":{}}}],["fetch",{"_index":889,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetched",{"_index":736,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetched[layerkey",{"_index":738,"title":{},"body":{"components/MapComponent.html":{}}}],["fetchlayerdata",{"_index":908,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetchlayerdata(resolution",{"_index":961,"title":{},"body":{"injectables/MapService.html":{}}}],["fetchmodel",{"_index":307,"title":{},"body":{"injectables/BimService.html":{}}}],["fetchmodel(filelink",{"_index":312,"title":{},"body":{"injectables/BimService.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{}}}],["filelink",{"_index":314,"title":{},"body":{"injectables/BimService.html":{}}}],["find",{"_index":503,"title":{},"body":{"components/IonIconComponent.html":{},"miscellaneous/functions.html":{}}}],["firstvaluefrom",{"_index":318,"title":{},"body":{"injectables/BimService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["firstvaluefrom(this.http.get(`${api_url",{"_index":935,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["firstvaluefrom(this.http.get(filelink",{"_index":328,"title":{},"body":{"injectables/BimService.html":{}}}],["fixed",{"_index":777,"title":{},"body":{"components/MapComponent.html":{}}}],["flat",{"_index":1006,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["flex",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["following",{"_index":578,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["force",{"_index":906,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["found",{"_index":1145,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fps",{"_index":40,"title":{},"body":{"components/BimComponent.html":{}}}],["fragment",{"_index":335,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["fragments",{"_index":359,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{}}}],["full_res",{"_index":666,"title":{},"body":{"components/MapComponent.html":{}}}],["fully",{"_index":401,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"miscellaneous/functions.html":{}}}],["function",{"_index":448,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1096,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":1121,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generates",{"_index":1116,"title":{},"body":{"miscellaneous/functions.html":{}}}],["geo",{"_index":518,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["geobasis",{"_index":790,"title":{},"body":{"components/MapComponent.html":{}}}],["geodata",{"_index":884,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["geojson",{"_index":530,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{}}}],["geojsonlayer",{"_index":785,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonlayer.adddata(object.assign(shape.geojson",{"_index":820,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonlayer.addto(map",{"_index":823,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonobject",{"_index":529,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["getelementclasses",{"_index":455,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["getresolvedurl",{"_index":1079,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getresolvedurl(route",{"_index":1098,"title":{},"body":{"miscellaneous/functions.html":{}}}],["give",{"_index":587,"title":{},"body":{"components/MapComponent.html":{}}}],["given",{"_index":584,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["gotpointercapture",{"_index":41,"title":{},"body":{"components/BimComponent.html":{}}}],["gt",{"_index":1113,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gt;&lt;/map&gt",{"_index":683,"title":{},"body":{"components/MapComponent.html":{}}}],["guard",{"_index":975,"title":{"guards/QueryParameterGuard.html":{}},"body":{"guards/QueryParameterGuard.html":{},"coverage.html":{},"index.html":{}}}],["guards",{"_index":977,"title":{},"body":{"guards/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{}}}],["handle",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handler",{"_index":972,"title":{},"body":{"interfaces/Marker.html":{}}}],["having",{"_index":764,"title":{},"body":{"components/MapComponent.html":{}}}],["headers",{"_index":936,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["height",{"_index":547,"title":{},"body":{"components/MapComponent.html":{}}}],["height=&quot;70vh&quot",{"_index":664,"title":{},"body":{"components/MapComponent.html":{}}}],["here",{"_index":481,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["hex",{"_index":609,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["higher",{"_index":363,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["holds",{"_index":654,"title":{},"body":{"components/MapComponent.html":{}}}],["hookevents",{"_index":23,"title":{},"body":{"components/BimComponent.html":{}}}],["host",{"_index":446,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostbinding",{"_index":458,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostbinding(\"class",{"_index":461,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener",{"_index":459,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener(\"click",{"_index":466,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener('click",{"_index":451,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlisteners",{"_index":442,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hovering",{"_index":973,"title":{},"body":{"interfaces/Marker.html":{}}}],["hoverpick",{"_index":42,"title":{},"body":{"components/BimComponent.html":{}}}],["html",{"_index":285,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["http",{"_index":311,"title":{},"body":{"injectables/BimService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpclient",{"_index":309,"title":{},"body":{"injectables/BimService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpcontext",{"_index":316,"title":{},"body":{"injectables/BimService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpcontexttoken",{"_index":1198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpheaders",{"_index":876,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpparams",{"_index":877,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["https://ionic.io/ionicons",{"_index":507,"title":{},"body":{"components/IonIconComponent.html":{}}}],["https://tile.openstreetmap.org/{z}/{x}/{y}.png",{"_index":656,"title":{},"body":{"components/MapComponent.html":{}}}],["https://wisdom04.vlba.uni",{"_index":594,"title":{},"body":{"components/MapComponent.html":{}}}],["icon",{"_index":336,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"interfaces/Marker.html":{},"miscellaneous/variables.html":{}}}],["icon'},{'name",{"_index":295,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["icon.component",{"_index":1046,"title":{},"body":{"modules/WisdomModule.html":{}}}],["icon.component.ts",{"_index":474,"title":{},"body":{"components/IonIconComponent.html":{},"coverage.html":{}}}],["icon.component.ts:12",{"_index":486,"title":{},"body":{"components/IonIconComponent.html":{}}}],["icon.component.ts:31",{"_index":490,"title":{},"body":{"components/IonIconComponent.html":{}}}],["icon.setattribute(\"name",{"_index":1190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon.setattribute(\"size",{"_index":1193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon.style.color",{"_index":1195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon.style.pointerevents",{"_index":1189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon/ion",{"_index":473,"title":{},"body":{"components/IonIconComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{}}}],["icons",{"_index":476,"title":{},"body":{"components/IonIconComponent.html":{}}}],["idb",{"_index":879,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["idb.get(\"queries",{"_index":915,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["idb.transaction(\"shapes",{"_index":917,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["idb.transaction([\"queries",{"_index":949,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["identifier",{"_index":1052,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":867,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["ignore",{"_index":774,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["implementing",{"_index":1016,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["implements",{"_index":9,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["import",{"_index":143,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["imports",{"_index":1049,"title":{},"body":{"modules/WisdomModule.html":{}}}],["include",{"_index":1022,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexed",{"_index":873,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["indexeddb",{"_index":890,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["init",{"_index":411,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{}}}],["initialize",{"_index":1175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":475,"title":{},"body":{"components/IonIconComponent.html":{}}}],["injectable",{"_index":304,"title":{"injectables/BimService.html":{},"injectables/BreadcrumbsService.html":{},"injectables/MapService.html":{}},"body":{"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":305,"title":{},"body":{"injectables/BimService.html":{},"injectables/BreadcrumbsService.html":{},"injectables/MapService.html":{},"index.html":{}}}],["injected",{"_index":776,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["inner",{"_index":626,"title":{},"body":{"components/MapComponent.html":{}}}],["input",{"_index":144,"title":{},"body":{"components/BimComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["input(\"aspect",{"_index":159,"title":{},"body":{"components/BimComponent.html":{}}}],["input(\"center",{"_index":701,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"class",{"_index":460,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["input(\"file",{"_index":158,"title":{},"body":{"components/BimComponent.html":{}}}],["input(\"height",{"_index":697,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"layers",{"_index":709,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"layerselectable",{"_index":712,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"markers",{"_index":714,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"scrollwheelzoom",{"_index":705,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"selectedcolor",{"_index":708,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"tileurl",{"_index":699,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"unselectedcolor",{"_index":707,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"zoom",{"_index":703,"title":{},"body":{"components/MapComponent.html":{}}}],["inputcenter",{"_index":702,"title":{},"body":{"components/MapComponent.html":{}}}],["inputheight",{"_index":698,"title":{},"body":{"components/MapComponent.html":{}}}],["inputlayers",{"_index":564,"title":{},"body":{"components/MapComponent.html":{}}}],["inputlayers(layerconfig",{"_index":710,"title":{},"body":{"components/MapComponent.html":{}}}],["inputlayerselectable",{"_index":713,"title":{},"body":{"components/MapComponent.html":{}}}],["inputmarkers",{"_index":565,"title":{},"body":{"components/MapComponent.html":{}}}],["inputmarkers(markers",{"_index":715,"title":{},"body":{"components/MapComponent.html":{}}}],["inputs",{"_index":25,"title":{},"body":{"components/BimComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["inputscrollwheelzoom",{"_index":706,"title":{},"body":{"components/MapComponent.html":{}}}],["inputtileurl",{"_index":700,"title":{},"body":{"components/MapComponent.html":{}}}],["inputzoom",{"_index":704,"title":{},"body":{"components/MapComponent.html":{}}}],["insert",{"_index":787,"title":{},"body":{"components/MapComponent.html":{}}}],["instant",{"_index":1129,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interact",{"_index":568,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["interface",{"_index":330,"title":{"interfaces/Breadcrumb.html":{},"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{}},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":332,"title":{},"body":{"interfaces/Breadcrumb.html":{},"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"index.html":{}}}],["internally",{"_index":620,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["intersection",{"_index":582,"title":{},"body":{"components/MapComponent.html":{}}}],["invert",{"_index":687,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["invertselection",{"_index":1166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invertselection(options",{"_index":1197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invertselectioncontrol",{"_index":756,"title":{},"body":{"components/MapComponent.html":{}}}],["invertselectioncontrol.addto(map",{"_index":841,"title":{},"body":{"components/MapComponent.html":{}}}],["ion",{"_index":294,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"miscellaneous/variables.html":{}}}],["ioniconcomponent",{"_index":293,"title":{"components/IonIconComponent.html":{}},"body":{"components/BimComponent.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["ionicons",{"_index":477,"title":{},"body":{"components/IonIconComponent.html":{}}}],["isactive",{"_index":441,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["isallset",{"_index":390,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["items",{"_index":1181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iterate",{"_index":1134,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iterated",{"_index":989,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["itself",{"_index":489,"title":{},"body":{"components/IonIconComponent.html":{}}}],["join",{"_index":471,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["js",{"_index":484,"title":{},"body":{"components/IonIconComponent.html":{}}}],["json",{"_index":650,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["justify",{"_index":1182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["k",{"_index":933,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["k.split",{"_index":735,"title":{},"body":{"components/MapComponent.html":{}}}],["k.substring(0",{"_index":932,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["key",{"_index":533,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{}}}],["key[0",{"_index":869,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keys",{"_index":580,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/typealiases.html":{}}}],["keys.length",{"_index":929,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keys.map(k",{"_index":931,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keys?.map(k",{"_index":734,"title":{},"body":{"components/MapComponent.html":{}}}],["l",{"_index":527,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{}}}],["l.control.extend",{"_index":1172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.control.layers",{"_index":754,"title":{},"body":{"components/MapComponent.html":{}}}],["l.controloptions",{"_index":1171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.divicon",{"_index":970,"title":{},"body":{"interfaces/Marker.html":{}}}],["l.domutil.create",{"_index":1183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.geojson(undefined",{"_index":786,"title":{},"body":{"components/MapComponent.html":{}}}],["l.icon",{"_index":969,"title":{},"body":{"interfaces/Marker.html":{}}}],["l.layer",{"_index":648,"title":{},"body":{"components/MapComponent.html":{}}}],["l.map",{"_index":642,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["l.map(nativemapelement",{"_index":743,"title":{},"body":{"components/MapComponent.html":{}}}],["l.marker(marker.coordinates",{"_index":847,"title":{},"body":{"components/MapComponent.html":{}}}],["l.markerclustergroup",{"_index":843,"title":{},"body":{"components/MapComponent.html":{}}}],["l.path",{"_index":809,"title":{},"body":{"components/MapComponent.html":{}}}],["l.tilelayer(this.tileurl).addto(map",{"_index":751,"title":{},"body":{"components/MapComponent.html":{}}}],["l.util.setoptions(this",{"_index":1176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["large",{"_index":1194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["later",{"_index":802,"title":{},"body":{"components/MapComponent.html":{}}}],["latitude",{"_index":632,"title":{},"body":{"components/MapComponent.html":{}}}],["layer",{"_index":515,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/typealiases.html":{}}}],["layer.bindtooltip(feature.properties.name",{"_index":803,"title":{},"body":{"components/MapComponent.html":{}}}],["layer.fire(\"click",{"_index":840,"title":{},"body":{"components/MapComponent.html":{}}}],["layer.on(\"click",{"_index":806,"title":{},"body":{"components/MapComponent.html":{}}}],["layera",{"_index":771,"title":{},"body":{"components/MapComponent.html":{}}}],["layera.options.order",{"_index":779,"title":{},"body":{"components/MapComponent.html":{}}}],["layerb",{"_index":772,"title":{},"body":{"components/MapComponent.html":{}}}],["layerb.options.order",{"_index":780,"title":{},"body":{"components/MapComponent.html":{}}}],["layerconfig",{"_index":548,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["layerdata",{"_index":511,"title":{"interfaces/LayerData.html":{}},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"coverage.html":{}}}],["layerdata.box",{"_index":959,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["layerdata.shapes",{"_index":953,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["layerdata[\"box",{"_index":888,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["layerindex",{"_index":767,"title":{},"body":{"components/MapComponent.html":{}}}],["layerkey",{"_index":639,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["layername",{"_index":832,"title":{},"body":{"components/MapComponent.html":{}}}],["layernames",{"_index":549,"title":{},"body":{"components/MapComponent.html":{}}}],["layers",{"_index":558,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["layers.push(layer",{"_index":818,"title":{},"body":{"components/MapComponent.html":{}}}],["layers]=&quot",{"_index":665,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol",{"_index":753,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.addbaselayer",{"_index":830,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.addbaselayer(geojsonlayer",{"_index":834,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.addto(map",{"_index":837,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.options.sortfunction",{"_index":770,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.options.sortlayers",{"_index":769,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.removelayer(geojsonlayer",{"_index":829,"title":{},"body":{"components/MapComponent.html":{}}}],["layerselectable",{"_index":559,"title":{},"body":{"components/MapComponent.html":{}}}],["lazily",{"_index":892,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["leads",{"_index":1021,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["leaflet",{"_index":528,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["leaflet.markercluster",{"_index":688,"title":{},"body":{"components/MapComponent.html":{}}}],["leafletmouseevent",{"_index":974,"title":{},"body":{"interfaces/Marker.html":{}}}],["left",{"_index":341,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["legend",{"_index":284,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["length",{"_index":1144,"title":{},"body":{"miscellaneous/functions.html":{}}}],["level",{"_index":617,"title":{},"body":{"components/MapComponent.html":{}}}],["link",{"_index":337,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{}}}],["list",{"_index":358,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["literal",{"_index":865,"title":{},"body":{"interfaces/MapDB.html":{}}}],["live",{"_index":407,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["lmarker",{"_index":846,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.addto(markerlayer",{"_index":854,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.bindtooltip(marker.tooltip",{"_index":851,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.on(\"click",{"_index":853,"title":{},"body":{"components/MapComponent.html":{}}}],["lmarker.seticon(marker.icon",{"_index":849,"title":{},"body":{"components/MapComponent.html":{}}}],["loaded",{"_index":43,"title":{},"body":{"components/BimComponent.html":{}}}],["loader",{"_index":322,"title":{},"body":{"injectables/BimService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["loader.ts",{"_index":1071,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["loading",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["long",{"_index":408,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["longer",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["longitude",{"_index":631,"title":{},"body":{"components/MapComponent.html":{}}}],["look",{"_index":905,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["lostpointercapture",{"_index":44,"title":{},"body":{"components/BimComponent.html":{}}}],["lt;map",{"_index":663,"title":{},"body":{"components/MapComponent.html":{}}}],["lx",{"_index":686,"title":{},"body":{"components/MapComponent.html":{}}}],["lx.control.invertselection",{"_index":839,"title":{},"body":{"components/MapComponent.html":{}}}],["main",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["make",{"_index":164,"title":{},"body":{"components/BimComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["makes",{"_index":405,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["making",{"_index":433,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["map",{"_index":297,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["map(str",{"_index":746,"title":{},"body":{"components/MapComponent.html":{}}}],["map.component.css",{"_index":545,"title":{},"body":{"components/MapComponent.html":{}}}],["map.fitbounds",{"_index":825,"title":{},"body":{"components/MapComponent.html":{}}}],["map.getrenderer(map",{"_index":748,"title":{},"body":{"components/MapComponent.html":{}}}],["map.on(\"baselayerchange",{"_index":835,"title":{},"body":{"components/MapComponent.html":{}}}],["map.removecontrol(invertselectioncontrol",{"_index":838,"title":{},"body":{"components/MapComponent.html":{}}}],["map.removecontrol(layerscontrol",{"_index":761,"title":{},"body":{"components/MapComponent.html":{}}}],["map.removelayer(this.selectedgeojsonlayer",{"_index":782,"title":{},"body":{"components/MapComponent.html":{}}}],["map.service",{"_index":685,"title":{},"body":{"components/MapComponent.html":{}}}],["map/map.component",{"_index":1047,"title":{},"body":{"modules/WisdomModule.html":{}}}],["mapcomponent",{"_index":296,"title":{"components/MapComponent.html":{}},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mapcomponent.inputlayers",{"_index":695,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["mapdb",{"_index":858,"title":{"interfaces/MapDB.html":{}},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{}}}],["mapelement",{"_index":550,"title":{},"body":{"components/MapComponent.html":{}}}],["mapped",{"_index":641,"title":{},"body":{"components/MapComponent.html":{}}}],["maps",{"_index":543,"title":{},"body":{"components/MapComponent.html":{}}}],["mapservice",{"_index":566,"title":{"injectables/MapService.html":{}},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{}}}],["marker",{"_index":599,"title":{"interfaces/Marker.html":{}},"body":{"components/MapComponent.html":{},"interfaces/Marker.html":{},"coverage.html":{}}}],["marker.icon",{"_index":848,"title":{},"body":{"components/MapComponent.html":{}}}],["marker.onclick",{"_index":852,"title":{},"body":{"components/MapComponent.html":{}}}],["marker.tooltip",{"_index":850,"title":{},"body":{"components/MapComponent.html":{}}}],["markerlayer",{"_index":842,"title":{},"body":{"components/MapComponent.html":{}}}],["markerlayer.addto(map",{"_index":855,"title":{},"body":{"components/MapComponent.html":{}}}],["markerlayer.removefrom(map",{"_index":845,"title":{},"body":{"components/MapComponent.html":{}}}],["markers",{"_index":551,"title":{},"body":{"components/MapComponent.html":{},"interfaces/Marker.html":{}}}],["marker}s",{"_index":717,"title":{},"body":{"components/MapComponent.html":{}}}],["matching",{"_index":303,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["meaning",{"_index":693,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["message",{"_index":1201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":11,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/ShapeData.html":{}}}],["method",{"_index":1130,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methods",{"_index":22,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["miscellaneous",{"_index":1091,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mixed",{"_index":678,"title":{},"body":{"components/MapComponent.html":{}}}],["modernized",{"_index":1118,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modifies",{"_index":499,"title":{},"body":{"components/IonIconComponent.html":{}}}],["module",{"_index":1012,"title":{"modules/WisdomModule.html":{}},"body":{"interfaces/WisdomInterface.html":{},"index.html":{}}}],["modules",{"_index":1011,"title":{"modules.html":{}},"body":{"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"modules.html":{}}}],["more",{"_index":1000,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["mouse",{"_index":604,"title":{},"body":{"components/MapComponent.html":{}}}],["mousedown",{"_index":45,"title":{},"body":{"components/BimComponent.html":{}}}],["mouseenter",{"_index":46,"title":{},"body":{"components/BimComponent.html":{}}}],["mouseevent",{"_index":1169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mouseleave",{"_index":47,"title":{},"body":{"components/BimComponent.html":{}}}],["mousemove",{"_index":48,"title":{},"body":{"components/BimComponent.html":{}}}],["mouseout",{"_index":49,"title":{},"body":{"components/BimComponent.html":{}}}],["mouseover",{"_index":50,"title":{},"body":{"components/BimComponent.html":{}}}],["mouseup",{"_index":51,"title":{},"body":{"components/BimComponent.html":{}}}],["mousewheel",{"_index":52,"title":{},"body":{"components/BimComponent.html":{}}}],["municipal",{"_index":668,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/enumerations.html":{}}}],["name",{"_index":78,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name(name",{"_index":509,"title":{},"body":{"components/IonIconComponent.html":{}}}],["names",{"_index":504,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["namespace",{"_index":1028,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["native",{"_index":500,"title":{},"body":{"components/IonIconComponent.html":{}}}],["nativemapelement",{"_index":741,"title":{},"body":{"components/MapComponent.html":{}}}],["navigationend",{"_index":53,"title":{},"body":{"components/BimComponent.html":{}}}],["necessary",{"_index":494,"title":{},"body":{"components/IonIconComponent.html":{}}}],["needed",{"_index":413,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{}}}],["needs",{"_index":589,"title":{},"body":{"components/MapComponent.html":{}}}],["new",{"_index":161,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":424,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["ngafterviewinit",{"_index":24,"title":{},"body":{"components/BimComponent.html":{},"components/MapComponent.html":{}}}],["ngmodule",{"_index":1040,"title":{},"body":{"modules/WisdomModule.html":{}}}],["ngondestroy",{"_index":391,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["ngoninit",{"_index":392,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{}}}],["ngx",{"_index":689,"title":{},"body":{"components/MapComponent.html":{},"modules/WisdomModule.html":{}}}],["node",{"_index":437,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["nomenclature",{"_index":534,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["none",{"_index":1188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["null",{"_index":579,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["num",{"_index":1109,"title":{},"body":{"miscellaneous/functions.html":{}}}],["number",{"_index":82,"title":{},"body":{"components/BimComponent.html":{},"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nutskey",{"_index":538,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["obj",{"_index":1125,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":1015,"title":{},"body":{"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.entries(config",{"_index":730,"title":{},"body":{"components/MapComponent.html":{}}}],["object.entries(layerdata",{"_index":783,"title":{},"body":{"components/MapComponent.html":{}}}],["object.entries(requests",{"_index":737,"title":{},"body":{"components/MapComponent.html":{}}}],["object.keys(layerdata).length",{"_index":836,"title":{},"body":{"components/MapComponent.html":{}}}],["observable",{"_index":352,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["observe",{"_index":372,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{}}}],["official",{"_index":505,"title":{},"body":{"components/IonIconComponent.html":{}}}],["oldenburg",{"_index":633,"title":{},"body":{"components/MapComponent.html":{}}}],["oldenburg.de/repos/service",{"_index":595,"title":{},"body":{"components/MapComponent.html":{}}}],["oldv",{"_index":898,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["onadd",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onclick",{"_index":967,"title":{},"body":{"interfaces/Marker.html":{}}}],["ondestroy",{"_index":386,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["one",{"_index":364,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{}}}],["oneachfeature",{"_index":800,"title":{},"body":{"components/MapComponent.html":{}}}],["oninit",{"_index":385,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{}}}],["only_keys",{"_index":671,"title":{},"body":{"components/MapComponent.html":{}}}],["onto",{"_index":606,"title":{},"body":{"components/MapComponent.html":{}}}],["opendb",{"_index":878,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["opendb(db_name",{"_index":896,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations",{"_index":920,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(querystore.put",{"_index":958,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(shapestore.put(shape",{"_index":954,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(store.get(key).then(shape",{"_index":922,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(tx.done",{"_index":924,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["option",{"_index":602,"title":{},"body":{"components/MapComponent.html":{}}}],["optional",{"_index":80,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":1170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["order",{"_index":788,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["ordering",{"_index":778,"title":{},"body":{"components/MapComponent.html":{}}}],["orders",{"_index":775,"title":{},"body":{"components/MapComponent.html":{}}}],["osm",{"_index":658,"title":{},"body":{"components/MapComponent.html":{}}}],["otherwise",{"_index":1146,"title":{},"body":{"miscellaneous/functions.html":{}}}],["out",{"_index":1034,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["output",{"_index":145,"title":{},"body":{"components/BimComponent.html":{},"components/MapComponent.html":{}}}],["outputs",{"_index":28,"title":{},"body":{"components/BimComponent.html":{},"components/MapComponent.html":{}}}],["overview",{"_index":1150,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":1086,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":382,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["pairs",{"_index":638,"title":{},"body":{"components/MapComponent.html":{}}}],["param",{"_index":365,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["parameter.guard.ts",{"_index":979,"title":{},"body":{"guards/QueryParameterGuard.html":{},"coverage.html":{}}}],["parameter.guard.ts:25",{"_index":992,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["parameter.guard.ts:41",{"_index":998,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["parameters",{"_index":76,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":344,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["params.appendall({key",{"_index":930,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["params.set(\"resolution",{"_index":928,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["parse",{"_index":993,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["parsefloat(str",{"_index":747,"title":{},"body":{"components/MapComponent.html":{}}}],["parseint(this.inputzoom",{"_index":726,"title":{},"body":{"components/MapComponent.html":{}}}],["passed",{"_index":347,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["path",{"_index":807,"title":{},"body":{"components/MapComponent.html":{}}}],["path.bringtoback",{"_index":812,"title":{},"body":{"components/MapComponent.html":{}}}],["path.bringtofront",{"_index":815,"title":{},"body":{"components/MapComponent.html":{}}}],["path.setstyle({color",{"_index":811,"title":{},"body":{"components/MapComponent.html":{}}}],["peer",{"_index":1089,"title":{},"body":{"dependencies.html":{}}}],["pick",{"_index":54,"title":{},"body":{"components/BimComponent.html":{}}}],["pipe(takewhile",{"_index":420,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["pointercancel",{"_index":55,"title":{},"body":{"components/BimComponent.html":{}}}],["pointerdown",{"_index":56,"title":{},"body":{"components/BimComponent.html":{}}}],["pointerenter",{"_index":57,"title":{},"body":{"components/BimComponent.html":{}}}],["pointerleave",{"_index":58,"title":{},"body":{"components/BimComponent.html":{}}}],["pointerlockchange",{"_index":59,"title":{},"body":{"components/BimComponent.html":{}}}],["pointerlockerror",{"_index":60,"title":{},"body":{"components/BimComponent.html":{}}}],["pointermove",{"_index":61,"title":{},"body":{"components/BimComponent.html":{}}}],["pointerout",{"_index":62,"title":{},"body":{"components/BimComponent.html":{}}}],["pointerover",{"_index":63,"title":{},"body":{"components/BimComponent.html":{}}}],["pointerup",{"_index":64,"title":{},"body":{"components/BimComponent.html":{}}}],["position",{"_index":1173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["predefined",{"_index":1122,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prepare",{"_index":909,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["presentation",{"_index":1104,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pretty",{"_index":1110,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prettyprintnum",{"_index":1080,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["prettyprintnum(12345678",{"_index":1112,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prettyprintnum(num",{"_index":1103,"title":{},"body":{"miscellaneous/functions.html":{}}}],["print",{"_index":1111,"title":{},"body":{"miscellaneous/functions.html":{}}}],["private",{"_index":19,"title":{},"body":{"components/BimComponent.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["promise",{"_index":315,"title":{},"body":{"injectables/BimService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["promise.all(operations",{"_index":925,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["properly",{"_index":590,"title":{},"body":{"components/MapComponent.html":{}}}],["properties",{"_index":16,"title":{"properties.html":{}},"body":{"components/BimComponent.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"properties.html":{}}}],["provide",{"_index":1013,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["providedin",{"_index":323,"title":{},"body":{"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["provides",{"_index":1025,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["puzzle",{"_index":1192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["px",{"_index":185,"title":{},"body":{"components/BimComponent.html":{}}}],["queries",{"_index":864,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["query",{"_index":338,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["querykey",{"_index":913,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["queryparameterguard",{"_index":976,"title":{"guards/QueryParameterGuard.html":{}},"body":{"guards/QueryParameterGuard.html":{},"coverage.html":{}}}],["queryparams",{"_index":986,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["querystore",{"_index":956,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["quot",{"_index":682,"title":{},"body":{"components/MapComponent.html":{}}}],["quot;12.345.678&quot",{"_index":1114,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ratio",{"_index":27,"title":{},"body":{"components/BimComponent.html":{}}}],["rawlayerdata",{"_index":934,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawlayerdata.shapes",{"_index":941,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawlayerdata.shapes.map(rawshape",{"_index":942,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawshape",{"_index":945,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawshape.geojson",{"_index":944,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawshape.nuts_key",{"_index":943,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["readonly",{"_index":894,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["readwrite",{"_index":950,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["received",{"_index":517,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["reconstruct",{"_index":875,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["record",{"_index":574,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["recreated",{"_index":1100,"title":{},"body":{"miscellaneous/functions.html":{}}}],["redirect",{"_index":987,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["redirectto",{"_index":983,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["ref",{"_index":646,"title":{},"body":{"components/MapComponent.html":{}}}],["reference",{"_index":488,"title":{},"body":{"components/IonIconComponent.html":{}}}],["removes",{"_index":362,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["render",{"_index":492,"title":{},"body":{"components/IonIconComponent.html":{}}}],["renders",{"_index":623,"title":{},"body":{"components/MapComponent.html":{}}}],["reply",{"_index":1119,"title":{},"body":{"miscellaneous/functions.html":{}}}],["represent",{"_index":514,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["representing",{"_index":539,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["represents",{"_index":870,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["request",{"_index":882,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["requested",{"_index":947,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["requests",{"_index":728,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["requests[layerkey",{"_index":732,"title":{},"body":{"components/MapComponent.html":{}}}],["required",{"_index":1024,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["res",{"_index":1149,"title":{},"body":{"miscellaneous/functions.html":{}}}],["reset",{"_index":759,"title":{},"body":{"components/MapComponent.html":{},"modules/WisdomModule.html":{},"index.html":{}}}],["resize",{"_index":173,"title":{},"body":{"components/BimComponent.html":{}}}],["resizeobserver",{"_index":20,"title":{},"body":{"components/BimComponent.html":{}}}],["resizeobserver(entries",{"_index":179,"title":{},"body":{"components/BimComponent.html":{}}}],["resolution",{"_index":570,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["resolution&#39",{"_index":669,"title":{},"body":{"components/MapComponent.html":{}}}],["resolution.district",{"_index":681,"title":{},"body":{"components/MapComponent.html":{}}}],["resolution.municipal",{"_index":670,"title":{},"body":{"components/MapComponent.html":{}}}],["resolution.tokeylength(resolution",{"_index":912,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["resolutionnum",{"_index":911,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["resolutions",{"_index":1094,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["resolved",{"_index":1099,"title":{},"body":{"miscellaneous/functions.html":{}}}],["resolving",{"_index":583,"title":{},"body":{"components/MapComponent.html":{}}}],["respond",{"_index":591,"title":{},"body":{"components/MapComponent.html":{}}}],["responsetype",{"_index":329,"title":{},"body":{"injectables/BimService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rest",{"_index":871,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rest/main/api/get",{"_index":596,"title":{},"body":{"components/MapComponent.html":{}}}],["results",{"_index":302,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":891,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["return",{"_index":189,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":872,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["returns",{"_index":133,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["right",{"_index":379,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["root",{"_index":324,"title":{},"body":{"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["route",{"_index":981,"title":{},"body":{"guards/QueryParameterGuard.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{}}}],["route.data[\"queryparams",{"_index":1005,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["route.data[\"redirect",{"_index":1002,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["route.queryparams[param",{"_index":1007,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["router",{"_index":342,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"guards/QueryParameterGuard.html":{}}}],["router#parseurl",{"_index":985,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["routermodule",{"_index":1041,"title":{},"body":{"modules/WisdomModule.html":{}}}],["routerstatesnapshot",{"_index":997,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["row",{"_index":378,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["run",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":319,"title":{},"body":{"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{}}}],["schema",{"_index":860,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["schema_v",{"_index":887,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["scopes",{"_index":1019,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["scroll",{"_index":603,"title":{},"body":{"components/MapComponent.html":{}}}],["scrollwheelzoom",{"_index":560,"title":{},"body":{"components/MapComponent.html":{}}}],["see",{"_index":593,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["select",{"_index":1184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["selectable",{"_index":598,"title":{},"body":{"components/MapComponent.html":{}}}],["selected",{"_index":563,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["selectedcolor",{"_index":561,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedgeojsonlayer",{"_index":552,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedlayer",{"_index":553,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes",{"_index":554,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes.add(key",{"_index":816,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes.delete(key",{"_index":813,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes.has(key",{"_index":810,"title":{},"body":{"components/MapComponent.html":{}}}],["selection",{"_index":576,"title":{},"body":{"components/MapComponent.html":{}}}],["selection.ts",{"_index":1073,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selector",{"_index":12,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["sent",{"_index":1200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["separated",{"_index":377,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"miscellaneous/functions.html":{}}}],["server",{"_index":519,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["service",{"_index":81,"title":{},"body":{"components/BimComponent.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":343,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{}}}],["set(index",{"_index":367,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["set(use_api_url",{"_index":939,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["set(use_loader",{"_index":940,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["setelementclasses(classes",{"_index":456,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["setinputlayers(layerconfig",{"_index":661,"title":{},"body":{"components/MapComponent.html":{}}}],["setinputmarkers(markers",{"_index":684,"title":{},"body":{"components/MapComponent.html":{}}}],["setname(name",{"_index":508,"title":{},"body":{"components/IonIconComponent.html":{}}}],["sets",{"_index":625,"title":{},"body":{"components/MapComponent.html":{}}}],["setter",{"_index":497,"title":{},"body":{"components/IonIconComponent.html":{}}}],["shape",{"_index":532,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["shape.key",{"_index":822,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shape.name",{"_index":821,"title":{},"body":{"components/MapComponent.html":{}}}],["shapedata",{"_index":526,"title":{"interfaces/ShapeData.html":{}},"body":{"interfaces/LayerData.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"coverage.html":{}}}],["shapekeys",{"_index":952,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapekeys.push(shape.key",{"_index":955,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapes",{"_index":521,"title":{},"body":{"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/variables.html":{}}}],["shapes.push(shape",{"_index":923,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapestore",{"_index":951,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["show",{"_index":673,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["shown",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shuffling",{"_index":766,"title":{},"body":{"components/MapComponent.html":{}}}],["simply",{"_index":874,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["single",{"_index":531,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["slash",{"_index":376,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["snapshot",{"_index":1001,"title":{},"body":{"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["solution",{"_index":1101,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sorting",{"_index":762,"title":{},"body":{"components/MapComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["split",{"_index":745,"title":{},"body":{"components/MapComponent.html":{}}}],["split(\"is",{"_index":470,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["src/.../invert",{"_index":1164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../map.component.ts",{"_index":1161,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../map.service.ts",{"_index":1163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../resolution.ts",{"_index":1093,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../use",{"_index":1165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../util.ts",{"_index":1097,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/bim/bim.component.ts",{"_index":8,"title":{},"body":{"components/BimComponent.html":{},"coverage.html":{}}}],["src/lib/bim/bim.component.ts:108",{"_index":132,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:26",{"_index":141,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:27",{"_index":139,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:28",{"_index":142,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:30",{"_index":88,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:31",{"_index":86,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:33",{"_index":90,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:34",{"_index":91,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:35",{"_index":92,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:36",{"_index":93,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:37",{"_index":94,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:38",{"_index":95,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:39",{"_index":96,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:40",{"_index":97,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:41",{"_index":98,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:42",{"_index":99,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:43",{"_index":100,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:44",{"_index":101,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:45",{"_index":102,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:46",{"_index":103,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:47",{"_index":104,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:48",{"_index":105,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:49",{"_index":106,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:50",{"_index":107,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:51",{"_index":108,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:52",{"_index":109,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:53",{"_index":110,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:54",{"_index":111,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:55",{"_index":112,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:56",{"_index":113,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:57",{"_index":114,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:58",{"_index":115,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:59",{"_index":116,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:60",{"_index":117,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:61",{"_index":118,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:62",{"_index":119,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:63",{"_index":120,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:64",{"_index":121,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:65",{"_index":122,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:66",{"_index":123,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:67",{"_index":124,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:68",{"_index":125,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:69",{"_index":126,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:70",{"_index":127,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:71",{"_index":128,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:72",{"_index":129,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:73",{"_index":130,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:74",{"_index":131,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:76",{"_index":75,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.component.ts:80",{"_index":135,"title":{},"body":{"components/BimComponent.html":{}}}],["src/lib/bim/bim.service.ts",{"_index":306,"title":{},"body":{"injectables/BimService.html":{},"coverage.html":{}}}],["src/lib/bim/bim.service.ts:13",{"_index":313,"title":{},"body":{"injectables/BimService.html":{}}}],["src/lib/bim/bim.service.ts:9",{"_index":310,"title":{},"body":{"injectables/BimService.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts",{"_index":374,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"coverage.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:19",{"_index":415,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:21",{"_index":393,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:33",{"_index":409,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:48",{"_index":394,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.component.ts:57",{"_index":403,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts",{"_index":333,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"coverage.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:29",{"_index":429,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:34",{"_index":430,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:44",{"_index":428,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/breadcrumbs/breadcrumbs.service.ts:51",{"_index":427,"title":{},"body":{"injectables/BreadcrumbsService.html":{}}}],["src/lib/bulma/bulma",{"_index":431,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"coverage.html":{}}}],["src/lib/guards/query",{"_index":978,"title":{},"body":{"guards/QueryParameterGuard.html":{},"coverage.html":{}}}],["src/lib/http",{"_index":1061,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/ion",{"_index":472,"title":{},"body":{"components/IonIconComponent.html":{},"coverage.html":{}}}],["src/lib/map/invert",{"_index":1072,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/map/layer",{"_index":512,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{},"coverage.html":{}}}],["src/lib/map/map.component.ts",{"_index":541,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/map/map.component.ts:125",{"_index":573,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:133",{"_index":636,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:139",{"_index":637,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:144",{"_index":640,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:147",{"_index":597,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:150",{"_index":600,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:154",{"_index":647,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:157",{"_index":643,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:164",{"_index":653,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:170",{"_index":651,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:172",{"_index":649,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:175",{"_index":618,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:179",{"_index":567,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:194",{"_index":624,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:224",{"_index":622,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:372",{"_index":619,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:48",{"_index":645,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:51",{"_index":572,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:53",{"_index":635,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:56",{"_index":610,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:58",{"_index":657,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:61",{"_index":571,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:63",{"_index":629,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:66",{"_index":616,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:68",{"_index":660,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:74",{"_index":601,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:77",{"_index":614,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:79",{"_index":608,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.service.ts",{"_index":859,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/map/map.service.ts:70",{"_index":960,"title":{},"body":{"injectables/MapService.html":{}}}],["src/lib/map/map.service.ts:97",{"_index":962,"title":{},"body":{"injectables/MapService.html":{}}}],["src/lib/map/marker.ts",{"_index":964,"title":{},"body":{"interfaces/Marker.html":{},"coverage.html":{}}}],["src/lib/map/resolution.ts",{"_index":1075,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/lib/util.ts",{"_index":1078,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/wisdom.module.ts",{"_index":1035,"title":{},"body":{"modules/WisdomModule.html":{}}}],["src/wisdominterface.ts",{"_index":1009,"title":{},"body":{"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["stackoverflow",{"_index":1102,"title":{},"body":{"miscellaneous/functions.html":{}}}],["state",{"_index":996,"title":{},"body":{"guards/QueryParameterGuard.html":{},"miscellaneous/enumerations.html":{}}}],["statements",{"_index":1053,"title":{},"body":{"coverage.html":{}}}],["stops",{"_index":495,"title":{},"body":{"components/IonIconComponent.html":{}}}],["store",{"_index":918,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["stored",{"_index":904,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["str",{"_index":1120,"title":{},"body":{"miscellaneous/functions.html":{}}}],["string",{"_index":87,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":346,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["stringtocolor",{"_index":1081,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stringtocolor(str",{"_index":1115,"title":{},"body":{"miscellaneous/functions.html":{}}}],["style",{"_index":797,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["styles",{"_index":540,"title":{},"body":{"components/MapComponent.html":{}}}],["styleurls",{"_index":544,"title":{},"body":{"components/MapComponent.html":{}}}],["subject",{"_index":354,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{}}}],["subscribe(next",{"_index":422,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["such",{"_index":1014,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["support",{"_index":1155,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":406,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["svg",{"_index":1156,"title":{},"body":{"modules.html":{}}}],["swap",{"_index":1137,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sync",{"_index":1132,"title":{},"body":{"miscellaneous/functions.html":{}}}],["t",{"_index":1126,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":1085,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1084,"title":{},"body":{"coverage.html":{}}}],["takewhile",{"_index":417,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["template",{"_index":14,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["templateurl",{"_index":387,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["territorial",{"_index":535,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["text",{"_index":339,"title":{},"body":{"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{}}}],["therefore",{"_index":383,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["these&#39",{"_index":675,"title":{},"body":{"components/MapComponent.html":{}}}],["things",{"_index":434,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["third",{"_index":1105,"title":{},"body":{"miscellaneous/functions.html":{}}}],["this.alive",{"_index":421,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.aspectratio",{"_index":183,"title":{},"body":{"components/BimComponent.html":{}}}],["this.canvasref.nativeelement",{"_index":170,"title":{},"body":{"components/BimComponent.html":{}}}],["this.center",{"_index":723,"title":{},"body":{"components/MapComponent.html":{}}}],["this.classes",{"_index":464,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.classes.join",{"_index":462,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.classes.push(\"is",{"_index":468,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.click.emit(evt",{"_index":202,"title":{},"body":{"components/BimComponent.html":{}}}],["this.containerref.nativeelement",{"_index":168,"title":{},"body":{"components/BimComponent.html":{}}}],["this.contextmenu.emit(evt",{"_index":204,"title":{},"body":{"components/BimComponent.html":{}}}],["this.dblclick.emit(evt",{"_index":206,"title":{},"body":{"components/BimComponent.html":{}}}],["this.drag.emit(evt",{"_index":208,"title":{},"body":{"components/BimComponent.html":{}}}],["this.dragend.emit(evt",{"_index":210,"title":{},"body":{"components/BimComponent.html":{}}}],["this.dragenter.emit(evt",{"_index":212,"title":{},"body":{"components/BimComponent.html":{}}}],["this.dragleave.emit(evt",{"_index":214,"title":{},"body":{"components/BimComponent.html":{}}}],["this.dragover.emit(evt",{"_index":216,"title":{},"body":{"components/BimComponent.html":{}}}],["this.dragstart.emit(evt",{"_index":218,"title":{},"body":{"components/BimComponent.html":{}}}],["this.drop.emit(evt",{"_index":220,"title":{},"body":{"components/BimComponent.html":{}}}],["this.elementclasses",{"_index":469,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.elref.nativeelement?.setattribute(\"name",{"_index":510,"title":{},"body":{"components/IonIconComponent.html":{}}}],["this.emitselection",{"_index":817,"title":{},"body":{"components/MapComponent.html":{}}}],["this.error.emit(evt",{"_index":222,"title":{},"body":{"components/BimComponent.html":{}}}],["this.file",{"_index":188,"title":{},"body":{"components/BimComponent.html":{}}}],["this.fps.emit(evt",{"_index":224,"title":{},"body":{"components/BimComponent.html":{}}}],["this.fragments",{"_index":423,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.fragments.includes(undefined",{"_index":425,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.fragments.length",{"_index":368,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.fragments[index",{"_index":370,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.gotpointercapture.emit(evt",{"_index":226,"title":{},"body":{"components/BimComponent.html":{}}}],["this.height",{"_index":719,"title":{},"body":{"components/MapComponent.html":{}}}],["this.hookevents",{"_index":199,"title":{},"body":{"components/BimComponent.html":{}}}],["this.hoverpick.emit(evt",{"_index":228,"title":{},"body":{"components/BimComponent.html":{}}}],["this.idb",{"_index":895,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["this.inputcenter",{"_index":722,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputheight",{"_index":718,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputlayerselectable",{"_index":805,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputscrollwheelzoom",{"_index":744,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputtileurl",{"_index":720,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputzoom",{"_index":724,"title":{},"body":{"components/MapComponent.html":{}}}],["this.isactive",{"_index":467,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.layerconfig.next(layerconfig",{"_index":711,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerconfig.subscribe(async",{"_index":727,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerdata.next(fetched",{"_index":739,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerdata.subscribe(async",{"_index":757,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layernames[layerkey",{"_index":731,"title":{},"body":{"components/MapComponent.html":{}}}],["this.loaded.emit(evt",{"_index":229,"title":{},"body":{"components/BimComponent.html":{}}}],["this.lostpointercapture.emit(evt",{"_index":231,"title":{},"body":{"components/BimComponent.html":{}}}],["this.map",{"_index":752,"title":{},"body":{"components/MapComponent.html":{}}}],["this.mapelement.nativeelement",{"_index":742,"title":{},"body":{"components/MapComponent.html":{}}}],["this.markers.next(markers",{"_index":716,"title":{},"body":{"components/MapComponent.html":{}}}],["this.markers.subscribe(markers",{"_index":844,"title":{},"body":{"components/MapComponent.html":{}}}],["this.mousedown.emit(evt",{"_index":233,"title":{},"body":{"components/BimComponent.html":{}}}],["this.mouseenter.emit(evt",{"_index":235,"title":{},"body":{"components/BimComponent.html":{}}}],["this.mouseleave.emit(evt",{"_index":237,"title":{},"body":{"components/BimComponent.html":{}}}],["this.mousemove.emit(evt",{"_index":239,"title":{},"body":{"components/BimComponent.html":{}}}],["this.mouseout.emit(evt",{"_index":241,"title":{},"body":{"components/BimComponent.html":{}}}],["this.mouseover.emit(evt",{"_index":243,"title":{},"body":{"components/BimComponent.html":{}}}],["this.mouseup.emit(evt",{"_index":245,"title":{},"body":{"components/BimComponent.html":{}}}],["this.mousewheel.emit(evt",{"_index":247,"title":{},"body":{"components/BimComponent.html":{}}}],["this.navigationend.emit(evt",{"_index":249,"title":{},"body":{"components/BimComponent.html":{}}}],["this.pick.emit(evt",{"_index":251,"title":{},"body":{"components/BimComponent.html":{}}}],["this.pointercancel.emit(evt",{"_index":253,"title":{},"body":{"components/BimComponent.html":{}}}],["this.pointerdown.emit(evt",{"_index":255,"title":{},"body":{"components/BimComponent.html":{}}}],["this.pointerenter.emit(evt",{"_index":257,"title":{},"body":{"components/BimComponent.html":{}}}],["this.pointerleave.emit(evt",{"_index":259,"title":{},"body":{"components/BimComponent.html":{}}}],["this.pointerlockchange.emit(evt",{"_index":261,"title":{},"body":{"components/BimComponent.html":{}}}],["this.pointerlockerror.emit(evt",{"_index":263,"title":{},"body":{"components/BimComponent.html":{}}}],["this.pointermove.emit(evt",{"_index":265,"title":{},"body":{"components/BimComponent.html":{}}}],["this.pointerout.emit(evt",{"_index":267,"title":{},"body":{"components/BimComponent.html":{}}}],["this.pointerover.emit(evt",{"_index":269,"title":{},"body":{"components/BimComponent.html":{}}}],["this.pointerup.emit(evt",{"_index":271,"title":{},"body":{"components/BimComponent.html":{}}}],["this.resizeobserver",{"_index":178,"title":{},"body":{"components/BimComponent.html":{}}}],["this.resizeobserver.observe(containerelement",{"_index":186,"title":{},"body":{"components/BimComponent.html":{}}}],["this.router.parseurl(redirect",{"_index":1004,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["this.selected.emit",{"_index":857,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedcolor",{"_index":814,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedgeojsonlayer",{"_index":781,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedlayer",{"_index":824,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedshapes",{"_index":760,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedshapes[key",{"_index":784,"title":{},"body":{"components/MapComponent.html":{}}}],["this.service.fetchlayerdata",{"_index":733,"title":{},"body":{"components/MapComponent.html":{}}}],["this.service.fetchmodel(this.file",{"_index":193,"title":{},"body":{"components/BimComponent.html":{}}}],["this.service.observe",{"_index":419,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["this.subject.asobservable",{"_index":373,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.subject.next(this.fragments",{"_index":371,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{}}}],["this.tileurl",{"_index":721,"title":{},"body":{"components/MapComponent.html":{}}}],["this.touchcancel.emit(evt",{"_index":273,"title":{},"body":{"components/BimComponent.html":{}}}],["this.touchend.emit(evt",{"_index":275,"title":{},"body":{"components/BimComponent.html":{}}}],["this.touchmove.emit(evt",{"_index":277,"title":{},"body":{"components/BimComponent.html":{}}}],["this.touchstart.emit(evt",{"_index":279,"title":{},"body":{"components/BimComponent.html":{}}}],["this.translate.get(this.layernames[key",{"_index":833,"title":{},"body":{"components/MapComponent.html":{}}}],["this.translate.instant(this.layernames[key",{"_index":831,"title":{},"body":{"components/MapComponent.html":{}}}],["this.translate.onlangchange.subscribe",{"_index":828,"title":{},"body":{"components/MapComponent.html":{}}}],["this.unloaded.emit(evt",{"_index":281,"title":{},"body":{"components/BimComponent.html":{}}}],["this.unselectedcolor",{"_index":799,"title":{},"body":{"components/MapComponent.html":{}}}],["this.viewer",{"_index":171,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.load(blob",{"_index":194,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"click",{"_index":200,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"contextmenu",{"_index":203,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"dblclick",{"_index":205,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"drag",{"_index":207,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"dragend",{"_index":209,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"dragenter",{"_index":211,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"dragleave",{"_index":213,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"dragover",{"_index":215,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"dragstart",{"_index":217,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"drop",{"_index":219,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"error",{"_index":221,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"fps",{"_index":223,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"gotpointercapture",{"_index":225,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"hoverpick",{"_index":227,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"loaded",{"_index":195,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"lostpointercapture",{"_index":230,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"mousedown",{"_index":232,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"mouseenter",{"_index":234,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"mouseleave",{"_index":236,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"mousemove",{"_index":238,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"mouseout",{"_index":240,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"mouseover",{"_index":242,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"mouseup",{"_index":244,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"mousewheel",{"_index":246,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"navigationend",{"_index":248,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"pick",{"_index":250,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"pointercancel",{"_index":252,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"pointerdown",{"_index":254,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"pointerenter",{"_index":256,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"pointerleave",{"_index":258,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"pointerlockchange",{"_index":260,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"pointerlockerror",{"_index":262,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"pointermove",{"_index":264,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"pointerout",{"_index":266,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"pointerover",{"_index":268,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"pointerup",{"_index":270,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"touchcancel",{"_index":272,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"touchend",{"_index":274,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"touchmove",{"_index":276,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"touchstart",{"_index":278,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"unloaded",{"_index":280,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.on(\"wheel",{"_index":282,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.show(viewtype.default).catch(e",{"_index":197,"title":{},"body":{"components/BimComponent.html":{}}}],["this.viewer.start",{"_index":187,"title":{},"body":{"components/BimComponent.html":{}}}],["this.wheel.emit(evt",{"_index":283,"title":{},"body":{"components/BimComponent.html":{}}}],["this.zoom",{"_index":725,"title":{},"body":{"components/MapComponent.html":{}}}],["through",{"_index":1135,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["tile",{"_index":611,"title":{},"body":{"components/MapComponent.html":{}}}],["tileurl",{"_index":555,"title":{},"body":{"components/MapComponent.html":{}}}],["times",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todo",{"_index":163,"title":{},"body":{"components/BimComponent.html":{},"components/MapComponent.html":{}}}],["toenum",{"_index":1076,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["toenum(length",{"_index":1143,"title":{},"body":{"miscellaneous/functions.html":{}}}],["toggle",{"_index":438,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"miscellaneous/variables.html":{}}}],["toggleable",{"_index":300,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["toggleable.directive",{"_index":1045,"title":{},"body":{"modules/WisdomModule.html":{}}}],["toggleable.directive.ts",{"_index":432,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"coverage.html":{}}}],["toggleable.directive.ts:15",{"_index":453,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:17",{"_index":452,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:22",{"_index":445,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:26",{"_index":457,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:36",{"_index":447,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["tokeylength",{"_index":1077,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tokeylength(res",{"_index":1147,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tooltip",{"_index":968,"title":{},"body":{"interfaces/Marker.html":{}}}],["top",{"_index":1026,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["topright",{"_index":1174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["touchcancel",{"_index":65,"title":{},"body":{"components/BimComponent.html":{}}}],["touchend",{"_index":66,"title":{},"body":{"components/BimComponent.html":{}}}],["touchmove",{"_index":67,"title":{},"body":{"components/BimComponent.html":{}}}],["touchstart",{"_index":68,"title":{},"body":{"components/BimComponent.html":{}}}],["transforms",{"_index":1148,"title":{},"body":{"miscellaneous/functions.html":{}}}],["translate",{"_index":426,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["translate/core",{"_index":690,"title":{},"body":{"components/MapComponent.html":{},"modules/WisdomModule.html":{}}}],["translated",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["translatemodule",{"_index":1042,"title":{},"body":{"modules/WisdomModule.html":{}}}],["translateobject",{"_index":1082,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["translateobject(service",{"_index":1124,"title":{},"body":{"miscellaneous/functions.html":{}}}],["translateservice",{"_index":348,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["translation",{"_index":569,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["translations",{"_index":1020,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["translator",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["trimmedkeys",{"_index":910,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["true",{"_index":414,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/variables.html":{}}}],["ts",{"_index":773,"title":{},"body":{"components/MapComponent.html":{}}}],["tslib",{"_index":1087,"title":{},"body":{"dependencies.html":{}}}],["tuple",{"_index":1138,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tupleswap",{"_index":1083,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tupleswap(tuple",{"_index":1136,"title":{},"body":{"miscellaneous/functions.html":{}}}],["two",{"_index":1142,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tx",{"_index":916,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["tx.objectstore(\"queries",{"_index":957,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["tx.objectstore(\"shapes",{"_index":919,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["type",{"_index":79,"title":{},"body":{"components/BimComponent.html":{},"injectables/BimService.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"interfaces/LayerData.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1159,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1003,"title":{},"body":{"guards/QueryParameterGuard.html":{}}}],["undefined",{"_index":397,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{}}}],["under",{"_index":1018,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["units",{"_index":536,"title":{},"body":{"interfaces/LayerData.html":{},"interfaces/ShapeData.html":{}}}],["unknown",{"_index":946,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["unloaded",{"_index":69,"title":{},"body":{"components/BimComponent.html":{}}}],["unselected",{"_index":615,"title":{},"body":{"components/MapComponent.html":{}}}],["unselectedcolor",{"_index":562,"title":{},"body":{"components/MapComponent.html":{}}}],["up",{"_index":396,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["update",{"_index":412,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"components/MapComponent.html":{}}}],["updating",{"_index":763,"title":{},"body":{"components/MapComponent.html":{}}}],["upgrade(db",{"_index":897,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["upon",{"_index":410,"title":{},"body":{"components/BreadcrumbsComponent.html":{}}}],["url",{"_index":612,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["url.ts",{"_index":1062,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["urltree",{"_index":350,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"guards/QueryParameterGuard.html":{}}}],["use",{"_index":165,"title":{},"body":{"components/BimComponent.html":{},"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["use_api_url",{"_index":880,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_base_url",{"_index":1066,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_cache",{"_index":1068,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_error_curtain",{"_index":1070,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_loader",{"_index":320,"title":{},"body":{"injectables/BimService.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":361,"title":{},"body":{"interfaces/Breadcrumb.html":{},"injectables/BreadcrumbsService.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/Marker.html":{},"guards/QueryParameterGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1139,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["uses",{"_index":478,"title":{},"body":{"components/IonIconComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{}}}],["using",{"_index":1128,"title":{},"body":{"miscellaneous/functions.html":{}}}],["utility",{"_index":1127,"title":{},"body":{"miscellaneous/functions.html":{}}}],["value",{"_index":84,"title":{},"body":{"components/BimComponent.html":{},"interfaces/Breadcrumb.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":577,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["var",{"_index":288,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["variable",{"_index":1063,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1162,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":886,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":483,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["viewchild",{"_index":146,"title":{},"body":{"components/BimComponent.html":{},"components/MapComponent.html":{}}}],["viewchild(\"bim",{"_index":157,"title":{},"body":{"components/BimComponent.html":{}}}],["viewchild(\"container",{"_index":156,"title":{},"body":{"components/BimComponent.html":{}}}],["viewchild(\"map",{"_index":696,"title":{},"body":{"components/MapComponent.html":{}}}],["viewchild('bim",{"_index":138,"title":{},"body":{"components/BimComponent.html":{}}}],["viewchild('container",{"_index":140,"title":{},"body":{"components/BimComponent.html":{}}}],["viewchild('map",{"_index":644,"title":{},"body":{"components/MapComponent.html":{}}}],["viewer",{"_index":21,"title":{},"body":{"components/BimComponent.html":{}}}],["viewer(canvaselement",{"_index":172,"title":{},"body":{"components/BimComponent.html":{}}}],["viewerinteractionevent",{"_index":148,"title":{},"body":{"components/BimComponent.html":{}}}],["viewerloadedevent",{"_index":149,"title":{},"body":{"components/BimComponent.html":{}}}],["viewerpointerlockchangedevent",{"_index":150,"title":{},"body":{"components/BimComponent.html":{}}}],["viewtype",{"_index":151,"title":{},"body":{"components/BimComponent.html":{}}}],["void",{"_index":134,"title":{},"body":{"components/BimComponent.html":{},"components/BreadcrumbsComponent.html":{},"injectables/BreadcrumbsService.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/Marker.html":{},"miscellaneous/variables.html":{}}}],["want",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webcomponents",{"_index":479,"title":{},"body":{"components/IonIconComponent.html":{}}}],["website",{"_index":506,"title":{},"body":{"components/IonIconComponent.html":{}}}],["wheel",{"_index":70,"title":{},"body":{"components/BimComponent.html":{}}}],["whether",{"_index":416,"title":{},"body":{"components/BreadcrumbsComponent.html":{},"guards/QueryParameterGuard.html":{}}}],["whole",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wisdom",{"_index":1010,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["wisdominterface",{"_index":1008,"title":{"interfaces/WisdomInterface.html":{}},"body":{"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["wisdommodule",{"_index":1029,"title":{"modules/WisdomModule.html":{}},"body":{"modules/WisdomModule.html":{},"index.html":{},"modules.html":{}}}],["without",{"_index":581,"title":{},"body":{"components/MapComponent.html":{}}}],["work",{"_index":502,"title":{},"body":{"components/IonIconComponent.html":{}}}],["worry",{"_index":765,"title":{},"body":{"components/MapComponent.html":{}}}],["wrong",{"_index":1140,"title":{},"body":{"miscellaneous/functions.html":{}}}],["xbim/viewer",{"_index":152,"title":{},"body":{"components/BimComponent.html":{}}}],["yes",{"_index":963,"title":{},"body":{"injectables/MapService.html":{},"miscellaneous/functions.html":{}}}],["yourself",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":556,"title":{},"body":{"components/MapComponent.html":{},"modules/WisdomModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/BimComponent.html":{"url":"components/BimComponent.html","title":"component - BimComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BimComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/bim/bim.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                bim\n            \n\n\n\n            \n                template\n                \n  \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                canvasRef\n                            \n                            \n                                containerRef\n                            \n                            \n                                    Private\n                                resizeObserver\n                            \n                            \n                                viewer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                hookEvents\n                            \n                            \n                                ngAfterViewInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                aspect-ratio\n                            \n                            \n                                file\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                contextmenu\n                            \n                            \n                                dblclick\n                            \n                            \n                                drag\n                            \n                            \n                                dragend\n                            \n                            \n                                dragenter\n                            \n                            \n                                dragleave\n                            \n                            \n                                dragover\n                            \n                            \n                                dragstart\n                            \n                            \n                                drop\n                            \n                            \n                                error\n                            \n                            \n                                fps\n                            \n                            \n                                gotpointercapture\n                            \n                            \n                                hoverpick\n                            \n                            \n                                loaded\n                            \n                            \n                                lostpointercapture\n                            \n                            \n                                mousedown\n                            \n                            \n                                mouseenter\n                            \n                            \n                                mouseleave\n                            \n                            \n                                mousemove\n                            \n                            \n                                mouseout\n                            \n                            \n                                mouseover\n                            \n                            \n                                mouseup\n                            \n                            \n                                mousewheel\n                            \n                            \n                                navigationEnd\n                            \n                            \n                                pick\n                            \n                            \n                                pointercancel\n                            \n                            \n                                pointerdown\n                            \n                            \n                                pointerenter\n                            \n                            \n                                pointerleave\n                            \n                            \n                                pointerlockchange\n                            \n                            \n                                pointerlockerror\n                            \n                            \n                                pointermove\n                            \n                            \n                                pointerout\n                            \n                            \n                                pointerover\n                            \n                            \n                                pointerup\n                            \n                            \n                                touchcancel\n                            \n                            \n                                touchend\n                            \n                            \n                                touchmove\n                            \n                            \n                                touchstart\n                            \n                            \n                                unloaded\n                            \n                            \n                                wheel\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: BimService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/bim/bim.component.ts:76\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        BimService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        aspect-ratio\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 16/9\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:31\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        file\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:30\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        click\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:33\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        contextmenu\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:34\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dblclick\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:35\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        drag\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:36\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragend\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragenter\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragleave\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragover\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:40\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragstart\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:41\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        drop\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:42\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        error\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:43\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        fps\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:44\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        gotpointercapture\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:45\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        hoverpick\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:46\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        loaded\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:47\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        lostpointercapture\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:48\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        mousedown\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:49\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        mouseenter\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:50\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        mouseleave\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:51\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        mousemove\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:52\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        mouseout\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:53\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        mouseover\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:54\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        mouseup\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:55\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        mousewheel\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:56\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        navigationEnd\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:57\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pick\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:58\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pointercancel\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:59\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pointerdown\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:60\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pointerenter\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:61\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pointerleave\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:62\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pointerlockchange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:63\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pointerlockerror\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:64\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pointermove\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:65\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pointerout\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:66\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pointerover\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:67\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pointerup\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:68\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        touchcancel\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:69\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        touchend\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:70\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        touchmove\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:71\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        touchstart\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:72\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        unloaded\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:73\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        wheel\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bim/bim.component.ts:74\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        hookEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    hookEvents()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/bim/bim.component.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/bim/bim.component.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        canvasRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('bim')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/bim/bim.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        containerRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('container')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/bim/bim.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        resizeObserver\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ResizeObserver\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/bim/bim.component.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        viewer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Viewer\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/bim/bim.component.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {\n  AfterViewInit,\n  Component,\n  ElementRef, EventEmitter,\n  Input, Output,\n  ViewChild\n} from '@angular/core';\nimport {\n  Viewer,\n  ViewerInteractionEvent,\n  ViewerLoadedEvent, ViewerPointerLockChangedEvent,\n  ViewType\n} from \"@xbim/viewer\";\nimport {BimService} from \"./bim.service\";\n\n@Component({\n  selector: 'bim',\n  template: `\n    \n      \n    \n  `\n})\nexport class BimComponent implements AfterViewInit {\n\n  @ViewChild(\"container\") containerRef!: ElementRef;\n  @ViewChild(\"bim\") canvasRef!: ElementRef;\n  viewer!: Viewer;\n\n  @Input(\"file\") file?: string;\n  @Input(\"aspect-ratio\") aspectRatio: number = 16/9;\n\n  @Output() click = new EventEmitter();\n  @Output() contextmenu = new EventEmitter();\n  @Output() dblclick = new EventEmitter();\n  @Output() drag = new EventEmitter();\n  @Output() dragend = new EventEmitter();\n  @Output() dragenter = new EventEmitter();\n  @Output() dragleave = new EventEmitter();\n  @Output() dragover = new EventEmitter();\n  @Output() dragstart = new EventEmitter();\n  @Output() drop = new EventEmitter();\n  @Output() error = new EventEmitter();\n  @Output() fps = new EventEmitter();\n  @Output() gotpointercapture = new EventEmitter();\n  @Output() hoverpick = new EventEmitter();\n  @Output() loaded = new EventEmitter();\n  @Output() lostpointercapture = new EventEmitter();\n  @Output() mousedown = new EventEmitter();\n  @Output() mouseenter = new EventEmitter();\n  @Output() mouseleave = new EventEmitter();\n  @Output() mousemove = new EventEmitter();\n  @Output() mouseout = new EventEmitter();\n  @Output() mouseover = new EventEmitter();\n  @Output() mouseup = new EventEmitter();\n  @Output() mousewheel = new EventEmitter();\n  @Output() navigationEnd = new EventEmitter();\n  @Output() pick = new EventEmitter();\n  @Output() pointercancel = new EventEmitter();\n  @Output() pointerdown = new EventEmitter();\n  @Output() pointerenter = new EventEmitter();\n  @Output() pointerleave = new EventEmitter();\n  @Output() pointerlockchange = new EventEmitter();\n  @Output() pointerlockerror = new EventEmitter();\n  @Output() pointermove = new EventEmitter();\n  @Output() pointerout = new EventEmitter();\n  @Output() pointerover = new EventEmitter();\n  @Output() pointerup = new EventEmitter();\n  @Output() touchcancel = new EventEmitter();\n  @Output() touchend = new EventEmitter();\n  @Output() touchmove = new EventEmitter();\n  @Output() touchstart = new EventEmitter();\n  @Output() unloaded = new EventEmitter();\n  @Output() wheel = new EventEmitter();\n\n  private resizeObserver!: ResizeObserver;\n\n  constructor(private service: BimService) {}\n\n  ngAfterViewInit(): void {\n    // TODO: make use of this\n    console.log(Viewer.check());\n    let containerElement = this.containerRef.nativeElement;\n    let canvasElement = this.canvasRef.nativeElement;\n    this.viewer = new Viewer(canvasElement);\n\n    // resize canvas according to container div\n    this.resizeObserver = new ResizeObserver(entries => {\n      canvasElement.width = entries[0].contentRect.width;\n      canvasElement.height = canvasElement.width / this.aspectRatio;\n      containerElement.style.height = canvasElement.height + \"px\";\n    });\n    this.resizeObserver.observe(containerElement);\n\n    this.viewer.start();\n    if (!this.file) return;\n    (async () => {\n      let blob = await this.service.fetchModel(this.file!);\n      this.viewer.load(blob);\n    })();\n    this.viewer.on(\"loaded\", args => {\n      this.viewer.show(ViewType.DEFAULT).catch(e => console.error(e));\n    });\n\n    this.hookEvents();\n  }\n\n  private hookEvents() {\n    this.viewer.on(\"click\", evt => this.click.emit(evt));\n    this.viewer.on(\"contextmenu\", evt => this.contextmenu.emit(evt));\n    this.viewer.on(\"dblclick\", evt => this.dblclick.emit(evt));\n    this.viewer.on(\"drag\", evt => this.drag.emit(evt));\n    this.viewer.on(\"dragend\", evt => this.dragend.emit(evt));\n    this.viewer.on(\"dragenter\", evt => this.dragenter.emit(evt));\n    this.viewer.on(\"dragleave\", evt => this.dragleave.emit(evt));\n    this.viewer.on(\"dragover\", evt => this.dragover.emit(evt));\n    this.viewer.on(\"dragstart\", evt => this.dragstart.emit(evt));\n    this.viewer.on(\"drop\", evt => this.drop.emit(evt));\n    this.viewer.on(\"error\", evt => this.error.emit(evt));\n    this.viewer.on(\"fps\", evt => this.fps.emit(evt));\n    this.viewer.on(\"gotpointercapture\", evt => this.gotpointercapture.emit(evt));\n    this.viewer.on(\"hoverpick\", evt => this.hoverpick.emit(evt));\n    this.viewer.on(\"loaded\", evt => this.loaded.emit(evt));\n    this.viewer.on(\"lostpointercapture\", evt => this.lostpointercapture.emit(evt));\n    this.viewer.on(\"mousedown\", evt => this.mousedown.emit(evt));\n    this.viewer.on(\"mouseenter\", evt => this.mouseenter.emit(evt));\n    this.viewer.on(\"mouseleave\", evt => this.mouseleave.emit(evt));\n    this.viewer.on(\"mousemove\", evt => this.mousemove.emit(evt));\n    this.viewer.on(\"mouseout\", evt => this.mouseout.emit(evt));\n    this.viewer.on(\"mouseover\", evt => this.mouseover.emit(evt));\n    this.viewer.on(\"mouseup\", evt => this.mouseup.emit(evt));\n    this.viewer.on(\"mousewheel\", evt => this.mousewheel.emit(evt));\n    this.viewer.on(\"navigationEnd\", evt => this.navigationEnd.emit(evt));\n    this.viewer.on(\"pick\", evt => this.pick.emit(evt));\n    this.viewer.on(\"pointercancel\", evt => this.pointercancel.emit(evt));\n    this.viewer.on(\"pointerdown\", evt => this.pointerdown.emit(evt));\n    this.viewer.on(\"pointerenter\", evt => this.pointerenter.emit(evt));\n    this.viewer.on(\"pointerleave\", evt => this.pointerleave.emit(evt));\n    this.viewer.on(\"pointerlockchange\", evt => this.pointerlockchange.emit(evt));\n    this.viewer.on(\"pointerlockerror\", evt => this.pointerlockerror.emit(evt));\n    this.viewer.on(\"pointermove\", evt => this.pointermove.emit(evt));\n    this.viewer.on(\"pointerout\", evt => this.pointerout.emit(evt));\n    this.viewer.on(\"pointerover\", evt => this.pointerover.emit(evt));\n    this.viewer.on(\"pointerup\", evt => this.pointerup.emit(evt));\n    this.viewer.on(\"touchcancel\", evt => this.touchcancel.emit(evt));\n    this.viewer.on(\"touchend\", evt => this.touchend.emit(evt));\n    this.viewer.on(\"touchmove\", evt => this.touchmove.emit(evt));\n    this.viewer.on(\"touchstart\", evt => this.touchstart.emit(evt));\n    this.viewer.on(\"unloaded\", evt => this.unloaded.emit(evt));\n    this.viewer.on(\"wheel\", evt => this.wheel.emit(evt));\n  }\n\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'BimComponent', 'selector': 'bim'},{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'BimComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BimService.html":{"url":"injectables/BimService.html","title":"injectable - BimService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BimService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/bim/bim.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fetchModel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/lib/bim/bim.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        fetchModel\n                        \n                    \n                \n            \n            \n                \nfetchModel(fileLink: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/bim/bim.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileLink\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {HttpClient, HttpContext} from \"@angular/common/http\";\nimport {firstValueFrom} from \"rxjs\";\nimport {USE_LOADER} from \"../http-context/use-loader\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BimService {\n\n  constructor(private http: HttpClient) {}\n\n  fetchModel(fileLink: string): Promise {\n    let context = new HttpContext();\n    context.set(USE_LOADER, \"common.bim.loading\");\n    return firstValueFrom(this.http.get(fileLink, {\n      responseType: \"blob\",\n      context\n    }))\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Breadcrumb.html":{"url":"interfaces/Breadcrumb.html","title":"interface - Breadcrumb","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Breadcrumb\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/breadcrumbs/breadcrumbs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Breadcrumb fragment interface.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                        \n                                            link\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            query\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional icon name to be displayed on the left of the fragment name.\nThis will use an IonIconComponent for the icon.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Router link to be set for the fragment.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:         Params\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Params\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional query parameters for the router link.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    String or array of strings to be displayed as fragment.\nEvery element will be passed to the TranslateService.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {Injectable} from \"@angular/core\";\nimport {Params, ActivatedRouteSnapshot, UrlTree} from \"@angular/router\";\nimport {Observable, BehaviorSubject, Subject} from \"rxjs\";\n\n/** Breadcrumb fragment interface. */\nexport interface Breadcrumb {\n  /**\n   * Optional icon name to be displayed on the left of the fragment name.\n   * This will use an {@link IonIconComponent} for the icon.\n   */\n  icon?: string,\n  /**\n   * String or array of strings to be displayed as fragment.\n   * Every element will be passed to the {@link TranslateService}.\n   */\n  text: string | string[],\n  /** Router link to be set for the fragment. */\n  link: string,\n  /** Optional query parameters for the router link. */\n  query?: Params\n}\n\n/** Service collecting the breadcrumbs. */\n@Injectable({\n  providedIn: 'root'\n})\nexport class BreadcrumbsService {\n  /** List of breadcrumbs. */\n  fragments: Breadcrumb[] = [];\n  /**\n   * {@link Subject} for the {@link Breadcrumb}s, to be used as\n   * {@link Observable}.\n   */\n  private subject: BehaviorSubject\n    = new BehaviorSubject([]);\n\n  /**\n   * Set a new breadcrumb fragment.\n   *\n   * This removes all fragments with a higher index than the set one.\n   * @param index Index of the breadcrumb array\n   * @param value Breadcrumb fragment to display\n   */\n  set(index: number, value: Breadcrumb) {\n    this.fragments.length = index + 1;\n    this.fragments[index] = value;\n    this.subject.next(this.fragments);\n  }\n\n  /** Observe the breadcrumb fragments. */\n  observe(): Observable {\n    return this.subject.asObservable();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BreadcrumbsComponent.html":{"url":"components/BreadcrumbsComponent.html","title":"component - BreadcrumbsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BreadcrumbsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/breadcrumbs/breadcrumbs.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component to display breadcrumbs collected by the BreadcrumbsService.\nThis will display a slash separated row with all breadcrumb fragments.\nThe one the most right is considered the current page and is therefore not\nclickable.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                breadcrumbs\n            \n\n\n\n\n            \n                templateUrl\n                ./breadcrumbs.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                alive\n                            \n                            \n                                fragments\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isAllSet\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: BreadcrumbsService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        BreadcrumbsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to get breadcrumb fragments from\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isAllSet\n                        \n                    \n                \n            \n            \n                \nisAllSet()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:48\n                \n            \n\n\n            \n                \n                    Check if all fragments up to the most right are set.\nIf one is undefined this will return false.\nThis allows ensuring that only fully defined breadcrumbs will be displayed.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:57\n                \n            \n\n\n            \n                \n                    On destroy set alive to false.\nThis makes sure that the component does not live as long as the service.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:33\n                \n            \n\n\n            \n                \n                    Upon init this will observe the service and update the breadcrumbs if\nneeded.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        alive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:19\n                        \n                    \n\n            \n                \n                    Whether this component is alive.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fragments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         (Breadcrumb | undefined)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.component.ts:21\n                        \n                    \n\n            \n                \n                    Breadcrumb fragments that will be displayed.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {Component, OnDestroy, OnInit} from \"@angular/core\";\nimport {takeWhile} from \"rxjs\";\n\nimport {Breadcrumb, BreadcrumbsService} from \"./breadcrumbs.service\";\n\n/**\n * Component to display breadcrumbs collected by the {@link BreadcrumbsService}.\n *\n * This will display a slash separated row with all breadcrumb fragments.\n * The one the most right is considered the current page and is therefore not\n * clickable.\n */\n@Component({\n  selector: 'breadcrumbs',\n  templateUrl: './breadcrumbs.component.html'\n})\nexport class BreadcrumbsComponent implements OnInit, OnDestroy {\n  /** Whether this component is alive. */\n  private alive: boolean = true;\n  /** Breadcrumb fragments that will be displayed. */\n  fragments: (Breadcrumb | undefined)[] = [];\n\n  /**\n   * Constructor.\n   * @param service Service to get breadcrumb fragments from\n   */\n  constructor(private service: BreadcrumbsService) { }\n\n  /**\n   * Upon init this will observe the service and update the breadcrumbs if\n   * needed.\n   */\n  ngOnInit(): void {\n    this.service.observe()\n      .pipe(takeWhile(() => this.alive))\n      .subscribe(next => {\n      this.fragments = next\n    });\n  }\n\n  /**\n   * Check if all fragments up to the most right are set.\n   *\n   * If one is undefined this will return `false`.\n   *\n   * This allows ensuring that only fully defined breadcrumbs will be displayed.\n   */\n  isAllSet(): boolean {\n    return !this.fragments.includes(undefined);\n  }\n\n  /**\n   * On destroy set {@link alive} to `false`.\n   *\n   * This makes sure that the component does not live as long as the service.\n   */\n  ngOnDestroy(): void {\n    this.alive = false;\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n          \n            \n          \n          \n            \n              {{text | translate}}\n            \n          \n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                        {{text | translate}}                                          '\n    var COMPONENTS = [{'name': 'BimComponent', 'selector': 'bim'},{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'BreadcrumbsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BreadcrumbsService.html":{"url":"injectables/BreadcrumbsService.html","title":"injectable - BreadcrumbsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BreadcrumbsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/breadcrumbs/breadcrumbs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service collecting the breadcrumbs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fragments\n                            \n                            \n                                    Private\n                                subject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                observe\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        observe\n                        \n                    \n                \n            \n            \n                \nobserve()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:51\n                \n            \n\n\n            \n                \n                    Observe the breadcrumb fragments.\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(index: number, value: Breadcrumb)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:44\n                \n            \n\n\n            \n                \n                    Set a new breadcrumb fragment.\nThis removes all fragments with a higher index than the set one.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of the breadcrumb array\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                                Breadcrumb\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Breadcrumb fragment to display\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fragments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Breadcrumb[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:29\n                        \n                    \n\n            \n                \n                    List of breadcrumbs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/lib/breadcrumbs/breadcrumbs.service.ts:34\n                        \n                    \n\n            \n                \n                    Subject for the Breadcrumbs, to be used as\nObservable.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from \"@angular/core\";\nimport {Params, ActivatedRouteSnapshot, UrlTree} from \"@angular/router\";\nimport {Observable, BehaviorSubject, Subject} from \"rxjs\";\n\n/** Breadcrumb fragment interface. */\nexport interface Breadcrumb {\n  /**\n   * Optional icon name to be displayed on the left of the fragment name.\n   * This will use an {@link IonIconComponent} for the icon.\n   */\n  icon?: string,\n  /**\n   * String or array of strings to be displayed as fragment.\n   * Every element will be passed to the {@link TranslateService}.\n   */\n  text: string | string[],\n  /** Router link to be set for the fragment. */\n  link: string,\n  /** Optional query parameters for the router link. */\n  query?: Params\n}\n\n/** Service collecting the breadcrumbs. */\n@Injectable({\n  providedIn: 'root'\n})\nexport class BreadcrumbsService {\n  /** List of breadcrumbs. */\n  fragments: Breadcrumb[] = [];\n  /**\n   * {@link Subject} for the {@link Breadcrumb}s, to be used as\n   * {@link Observable}.\n   */\n  private subject: BehaviorSubject\n    = new BehaviorSubject([]);\n\n  /**\n   * Set a new breadcrumb fragment.\n   *\n   * This removes all fragments with a higher index than the set one.\n   * @param index Index of the breadcrumb array\n   * @param value Breadcrumb fragment to display\n   */\n  set(index: number, value: Breadcrumb) {\n    this.fragments.length = index + 1;\n    this.fragments[index] = value;\n    this.subject.next(this.fragments);\n  }\n\n  /** Observe the breadcrumb fragments. */\n  observe(): Observable {\n    return this.subject.asObservable();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/BulmaIsToggleableDirective.html":{"url":"directives/BulmaIsToggleableDirective.html","title":"directive - BulmaIsToggleableDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  BulmaIsToggleableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/bulma/bulma-is-toggleable.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Directive for making things toggleable with bulma.\nClicking on the node that has this directive will toggle the \"is-active\"\nclass.\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        .is-toggleable\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                classes\n                            \n                            \n                                    Private\n                                isActive\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toggle\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    elementClasses\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        class\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:22\n                            \n                        \n                \n                    \n                        The classes of the host node.\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:36\n                \n            \n\n\n            \n                \n                    Function to be executed when the host is clicked.\nWill toggle the \"is-active\" class on the host node.\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toggle\n                        \n                    \n                \n            \n            \n                \ntoggle()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click')\n                \n            \n\n            \n                \n                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:36\n                \n            \n\n\n            \n                \n                    Function to be executed when the host is clicked.\nWill toggle the \"is-active\" class on the host node.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        classes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:17\n                        \n                    \n\n            \n                \n                    The classes of the host node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:15\n                        \n                    \n\n            \n                \n                    Is the host currently active.\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        elementClasses\n                    \n                \n\n                \n                    \n                        getelementClasses()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:22\n                                \n                            \n                    \n                        \n                                The classes of the host node.\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        setelementClasses(classes: string)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:26\n                                \n                            \n                    \n                        \n                                Set the classes of the host node.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            classes\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import {HostBinding, Directive, Input, HostListener} from \"@angular/core\";\n\n/**\n * Directive for making things toggleable with bulma.\n *\n * Clicking on the node that has this directive will toggle the \"is-active\"\n * class.\n */\n@Directive({\n  selector: \".is-toggleable\"\n})\nexport class BulmaIsToggleableDirective {\n\n  /** Is the host currently active. */\n  private isActive: boolean = false;\n  /** The classes of the host node. */\n  private classes: string[] = [];\n\n  /** The classes of the host node. */\n  @Input(\"class\")\n  @HostBinding(\"class\")\n  get elementClasses(): string {\n    return this.classes.join(\" \");\n  }\n  /** Set the classes of the host node. */\n  set elementClasses(classes: string) {\n    this.classes = classes.trim().split(/\\s+/);\n  }\n\n  /**\n   * Function to be executed when the host is clicked.\n   *\n   * Will toggle the \"is-active\" class on the host node.\n   */\n  @HostListener(\"click\")\n  toggle() {\n    this.isActive = !this.isActive;\n    if (this.isActive) this.classes.push(\"is-active\")\n    else {\n      this.elementClasses = this.elementClasses\n        .split(\"is-active\")\n        .join(\"\");\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/IonIconComponent.html":{"url":"components/IonIconComponent.html","title":"component - IonIconComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  IonIconComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/ion-icon/ion-icon.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component is used to inject the icons from IonIcons.\nIonIcons uses WebComponents to display the icons.\nTo allow to use them here, this component adds the icons via js.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ion-icon\n            \n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(elRef: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ion-icon/ion-icon.component.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elRef\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Element reference to itself\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ion-icon/ion-icon.component.ts:31\n                            \n                        \n                \n                    \n                        The name of the icon.\nIs not used by angular but needed to render the correct icon and necessary\nso that angular stops complaining.\nThis setter also directly modifies the native element to have the \"name\"\ndirectly as an attribute which is needed to make ion icons work.\nYou can find the names at the official website\nhttps://ionic.io/ionicons.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n\n                \n                    \n                        setname(name: string | undefined)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/ion-icon/ion-icon.component.ts:31\n                                \n                            \n                    \n                        \n                                The name of the icon.\nIs not used by angular but needed to render the correct icon and necessary\nso that angular stops complaining.\nThis setter also directly modifies the native element to have the \"name\"\ndirectly as an attribute which is needed to make ion icons work.\nYou can find the names at the official website\nhttps://ionic.io/ionicons.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            name\n                                                    \n                                                            \n                                                                        string | undefined\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {Component, Input, ElementRef} from \"@angular/core\";\n\n/**\n * This component is used to inject the icons from IonIcons.\n * IonIcons uses WebComponents to display the icons.\n * To allow to use them here, this component adds the icons via js.\n */\n@Component({\n  selector: \"ion-icon\",\n  template: \"\"\n})\nexport class IonIconComponent {\n\n  /**\n   * Constructor.\n   * @param elRef Element reference to itself\n   */\n  constructor(private elRef: ElementRef) {}\n\n  /**\n   * The name of the icon.\n   * Is not used by angular but needed to render the correct icon and necessary\n   * so that angular stops complaining.\n   *\n   * This setter also directly modifies the native element to have the \"name\"\n   * directly as an attribute which is needed to make ion icons work.\n   *\n   * You can find the names at the official website\n   * {@link https://ionic.io/ionicons}.\n   */\n  @Input() set name(name: string | undefined) {\n    this.elRef.nativeElement?.setAttribute(\"name\", name);\n  };\n\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'BimComponent', 'selector': 'bim'},{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'IonIconComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LayerData.html":{"url":"interfaces/LayerData.html","title":"interface - LayerData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LayerData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/layer-data.ts\n        \n\n\n            \n                Description\n            \n            \n                Type to represent layer data received from the geo data server.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            box\n                                        \n                                \n                                \n                                        \n                                            shapes\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        box\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        box:     [, , , ]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [, , , ]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Corner coordinates of a box containing all the shapes this displays.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shapes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shapes:         ShapeData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ShapeData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of shapes.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as L from \"leaflet\";\nimport {GeoJsonObject} from \"geojson\";\n\n/** Type to represent a single shape with all of its metadata. */\nexport interface ShapeData {\n  /** Name of the shape. */\n  name: string,\n  /** Key of the shape. */\n  key: string,\n  /** Nomenclature of Territorial Units code of the shape. */\n  nutsKey: string,\n  /** GeoJson representing the shape. */\n  geoJson: GeoJsonObject\n}\n\n/** Type to represent layer data received from the geo data server. */\nexport interface LayerData {\n  /** Corner coordinates of a box containing all the shapes this displays. */\n  box: [[number, number], [number, number], [number, number], [number, number]],\n  /** List of shapes. */\n  shapes: ShapeData[]\n}\n\nexport default LayerData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MapComponent.html":{"url":"components/MapComponent.html","title":"component - MapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/map/map.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component for displaying maps.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                map\n            \n\n            \n                styleUrls\n                ./map.component.css\n            \n\n\n            \n                template\n                \n  \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                center\n                            \n                            \n                                height\n                            \n                            \n                                    Private\n                                layerConfig\n                            \n                            \n                                    Private\n                                layerData\n                            \n                            \n                                    Private\n                                layerNames\n                            \n                            \n                                    Optional\n                                map\n                            \n                            \n                                    Private\n                                mapElement\n                            \n                            \n                                    Private\n                                markers\n                            \n                            \n                                    Private\n                                    Optional\n                                selectedGeoJsonLayer\n                            \n                            \n                                    Private\n                                    Optional\n                                selectedLayer\n                            \n                            \n                                    Private\n                                selectedShapes\n                            \n                            \n                                tileUrl\n                            \n                            \n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                emitSelection\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                center\n                            \n                            \n                                height\n                            \n                            \n                                layers\n                            \n                            \n                                layerSelectable\n                            \n                            \n                                markers\n                            \n                            \n                                scrollWheelZoom\n                            \n                            \n                                selectedColor\n                            \n                            \n                                tileUrl\n                            \n                            \n                                unselectedColor\n                            \n                            \n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                selected\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    inputLayers\n                                \n                                \n                                    inputMarkers\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: MapService, translate: TranslateService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/map/map.component.ts:179\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        MapService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to interact with the server for geo data\n\n                                                        \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Translation service to update resolution names\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        center\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:61\n                            \n                        \n                \n                    \n                        Input for the center coordinates of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:51\n                            \n                        \n                \n                    \n                        Input for the height of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        layers\n                    \n                \n                \n                    \n                        Type :         LayerConfig\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:125\n                            \n                        \n                \n                    \n                        Input for the layers that should be displayed.\nThe key of the record is layer key and is also emitted on the selection.\nThe value of the record is an array and the values of that should be the\nfollowing:\n\n  \n    The name of the layer, this will be only used to display a name of\n    the layer (may also be a translation key).\n  \n  \n    This should be the resolution to display the layer at, this may also\nbe\n    null to display the keys directly without any shape intersection\n    resolving.\n  \n  \n    These should be the keys used to display the shapes from.\n    If the given keys are empty or null, this will display everything from\n    the give resolution.\n  \n\n\nAttention: The service needs at least one of the resolution or the\nkeys\nto properly respond.\n```html\n// TODO: update link when geo data docs update\nSee https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n```\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        layerSelectable\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:147\n                            \n                        \n                \n                    \n                        Should the layers be selectable.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        markers\n                    \n                \n                \n                    \n                        Type :         Marker[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:150\n                            \n                        \n                \n                    \n                        Markers that should be displayed on the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        scrollWheelZoom\n                    \n                \n                \n                    \n                        Type :     boolean | \"center\"\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:74\n                            \n                        \n                \n                    \n                        Input for the option if the map should scroll zoom on mouse scroll.\nIf \"center\" is passed, the map will always zoom onto the center.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#d35a0c\"\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:79\n                            \n                        \n                \n                    \n                        Input for a hex code selected shapes.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        tileUrl\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:56\n                            \n                        \n                \n                    \n                        Input for the tile url of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        unselectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#1f5aec\"\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:77\n                            \n                        \n                \n                    \n                        Input for a hex code for unselected shapes.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        zoom\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:66\n                            \n                        \n                \n                    \n                        Input for the map zoom level.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        selected\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:175\n                            \n                        \n                \n                    \n                        Outputs the currently selected shapes.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        emitSelection\n                        \n                    \n                \n            \n            \n                \n                    \n                    emitSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:372\n                \n            \n\n\n            \n                \n                    Internally used function to emit the currently selected shapes via the\nselected output.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:224\n                \n            \n\n\n            \n                \n                    Renders the map with the given input values.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:194\n                \n            \n\n\n            \n                \n                    While init this sets the input values to the inner, private values.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        center\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"53.1434501, 8.2145521\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:63\n                        \n                    \n\n            \n                \n                    Center of the map, defaults to longitude and latitude of Oldenburg.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"500px\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:53\n                        \n                    \n\n            \n                \n                    Height of map, defaults to 500px.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        layerConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject({})\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:133\n                        \n                    \n\n            \n                \n                    Subject of the LayerConfig, to be used as\nObservable.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        layerData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject>\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject({})\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:139\n                        \n                    \n\n            \n                \n                    Subject of the pairs of Layerkey and LayerData,\nto be used as Observable.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        layerNames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:144\n                        \n                    \n\n            \n                \n                    Subject of the layer names mapped by the LayerKey.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        map\n                        \n                    \n                \n            \n                \n                    \n                        Type :     L.Map\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:157\n                        \n                    \n\n            \n                \n                    The leaflet map that is displayed here.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mapElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('map')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:48\n                        \n                    \n\n            \n                \n                    The ref to the map html element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        markers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:154\n                        \n                    \n\n            \n                \n                    Markers Subject to be used as Observable.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        selectedGeoJsonLayer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     L.Layer\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:172\n                        \n                    \n\n            \n                \n                    The currently selected geo json layer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        selectedLayer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LayerKey\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:170\n                        \n                    \n\n            \n                \n                    The currently selected layer in the map control.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedShapes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record>\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:164\n                        \n                    \n\n            \n                \n                    Internally holds all elements that are currently selected.\nThe set holds all keys of shapes currently selected.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tileUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:58\n                        \n                    \n\n            \n                \n                    Tile url of the map, defaults to the osm.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 7\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:68\n                        \n                    \n\n            \n                \n                    Zoom level of the map, defaults to 7.\n\n                \n            \n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        inputLayers\n                    \n                \n\n\n                \n                    \n                        setinputLayers(layerConfig: LayerConfig)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/map/map.component.ts:125\n                                \n                            \n                    \n                        \n                                Input for the layers that should be displayed.\nThe key of the record is layer key and is also emitted on the selection.\nThe value of the record is an array and the values of that should be the\nfollowing:\n\n  \n    The name of the layer, this will be only used to display a name of\n    the layer (may also be a translation key).\n  \n  \n    This should be the resolution to display the layer at, this may also\nbe\n    null to display the keys directly without any shape intersection\n    resolving.\n  \n  \n    These should be the keys used to display the shapes from.\n    If the given keys are empty or null, this will display everything from\n    the give resolution.\n  \n\n\nAttention: The service needs at least one of the resolution or the\nkeys\nto properly respond.\n```html\n// TODO: update link when geo data docs update\nSee https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n```\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            layerConfig\n                                                    \n                                                            \n                                                                            LayerConfig\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                        Example :\n                                            \n                                                &lt;map\n  height=&quot;70vh&quot;\n  [layers]=&quot;{\n    full_res: [&#39;All of municipal resolution&#39;, Resolution.MUNICIPAL, null],\n    only_keys: [&#39;Only show exactly these&#39;, null, [&#39;01&#39;, &#39;034030000000&#39;]],\n    mixed: [&#39;Show district resolution&#39;, Resolution.DISTRICT, [&#39;01&#39;,\n  &#39;034030000000&#39;]]\n  }&quot;\n&gt;&lt;/map&gt;\n\n// TODO: update link when geo data docs update\n                                            \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        inputMarkers\n                    \n                \n\n\n                \n                    \n                        setinputMarkers(markers: Marker[])\n                    \n                \n                            \n                                \n                                    Defined in src/lib/map/map.component.ts:150\n                                \n                            \n                    \n                        \n                                Markers that should be displayed on the map.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            markers\n                                                    \n                                                            \n                                                                            Marker[]\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n  ViewChild,\n  Component,\n  EventEmitter,\n  OnInit,\n  AfterViewInit,\n  Input,\n  Output,\n  ElementRef\n} from \"@angular/core\";\nimport {BehaviorSubject, firstValueFrom, Subject} from \"rxjs\";\n\nimport * as L from \"leaflet\";\n\nimport {MapService} from \"./map.service\";\nimport LayerData from \"./layer-data\";\nimport {Resolution} from \"./resolution\";\nimport {Marker} from \"./marker\";\n\nimport * as LX from \"./invert-selection\";\n\nimport \"leaflet.markercluster\";\nimport {TranslateService} from \"@ngx-translate/core\";\n\n/** Type alias to enforce the meaning of the layer keys. */\ntype LayerKey = string;\n\n/** A layer config for the input of {@link MapComponent.inputLayers}. */\ntype LayerConfig = Record;\n\n/**\n * Component for displaying maps.\n */\n@Component({\n  selector: \"map\",\n  template: `\n    \n      \n    \n  `,\n  styleUrls: [\n    \"./map.component.css\"\n  ]\n})\nexport class MapComponent implements OnInit, AfterViewInit {\n\n  /** The ref to the map html element. */\n  @ViewChild(\"map\") private mapElement!: ElementRef;\n\n  /** Input for the height of the map. */\n  @Input(\"height\") inputHeight?: string;\n  /** Height of map, defaults to 500px. */\n  height = \"500px\";\n\n  /** Input for the tile url of the map. */\n  @Input(\"tileUrl\") inputTileUrl?: string;\n  /** Tile url of the map, defaults to the osm. */\n  tileUrl = \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\";\n\n  /** Input for the center coordinates of the map. */\n  @Input(\"center\") inputCenter?: string;\n  /** Center of the map, defaults to longitude and latitude of Oldenburg. */\n  center = \"53.1434501, 8.2145521\";\n\n  /** Input for the map zoom level. */\n  @Input(\"zoom\") inputZoom?: string;\n  /** Zoom level of the map, defaults to 7. */\n  zoom = 7;\n\n  /**\n   * Input for the option if the map should scroll zoom on mouse scroll.\n   * If \"center\" is passed, the map will always zoom onto the center.\n   */\n  @Input(\"scrollWheelZoom\") inputScrollWheelZoom: boolean | \"center\" = true;\n\n  /** Input for a hex code for unselected shapes. */\n  @Input(\"unselectedColor\") unselectedColor = \"#1f5aec\";\n  /** Input for a hex code selected shapes. */\n  @Input(\"selectedColor\") selectedColor = \"#d35a0c\";\n\n  /**\n   * Input for the layers that should be displayed.\n   *\n   * The key of the record is layer key and is also emitted on the selection.\n   * The value of the record is an array and the values of that should be the\n   * following:\n   * \n   *   \n   *     The name of the layer, this will be only used to display a name of\n   *     the layer (may also be a translation key).\n   *   \n   *   \n   *     This should be the resolution to display the layer at, this may also\n   * be\n   *     null to display the keys directly without any shape intersection\n   *     resolving.\n   *   \n   *   \n   *     These should be the keys used to display the shapes from.\n   *     If the given keys are empty or null, this will display everything from\n   *     the give resolution.\n   *   \n   * \n   *\n   * **Attention**: The service needs at least one of the resolution or the\n   * keys\n   * to properly respond.\n   *\n   * @example\n   * ```html\n   * \n   * ```\n   * // TODO: update link when geo data docs update\n   * @see https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n   */\n  @Input(\"layers\")\n  set inputLayers(layerConfig: LayerConfig) {\n    this.layerConfig.next(layerConfig);\n  };\n  /**\n   * {@link Subject} of the {@link LayerConfig}, to be used as\n   * {@link Observable}.\n   * @private\n   */\n  private layerConfig: BehaviorSubject = new BehaviorSubject({});\n  /**\n   * {@link Subject} of the pairs of {@link Layerkey} and {@link LayerData},\n   * to be used as {@link Observable}.\n   * @private\n   */\n  private layerData: BehaviorSubject> = new BehaviorSubject({});\n  /**\n   * {@link Subject} of the layer names mapped by the {@link LayerKey}.\n   * @private\n   */\n  private layerNames: Record = {};\n\n  /** Should the layers be selectable. */\n  @Input(\"layerSelectable\") inputLayerSelectable: boolean = true;\n\n  /** Markers that should be displayed on the map. */\n  @Input(\"markers\") set inputMarkers(markers: Marker[]) {\n    this.markers.next(markers);\n  };\n  /** {@link Marker}s {@link Subject} to be used as {@link Observable}. */\n  private markers = new BehaviorSubject([]);\n\n  /** The leaflet map that is displayed here. */\n  map?: L.Map;\n\n  /**\n   * Internally holds all elements that are currently selected.\n   *\n   * The set holds all keys of shapes currently selected.\n   */\n  private selectedShapes: Record> = {};\n\n  /**\n   * The currently selected layer in the map control.\n   * @private\n   */\n  private selectedLayer?: LayerKey;\n  /** The currently selected geo json layer. */\n  private selectedGeoJsonLayer?: L.Layer;\n\n  /** Outputs the currently selected shapes. */\n  @Output() selected = new EventEmitter();\n\n  /**\n   * Constructor.\n   * @param service Service to interact with the server for geo data\n   * @param translate Translation service to update resolution names\n   */\n  constructor(\n    private service: MapService,\n    private translate: TranslateService\n  ) {}\n\n  /**\n   * While init this sets the input values to the inner, private values.\n   */\n  ngOnInit(): void {\n    if (this.inputHeight) this.height = this.inputHeight;\n    if (this.inputTileUrl) this.tileUrl = this.inputTileUrl;\n    if (this.inputCenter) this.center = this.inputCenter;\n    if (this.inputZoom) this.zoom = parseInt(this.inputZoom);\n\n    this.layerConfig.subscribe(async config => {\n      let layerData = {};\n      let requests: Record> = {};\n      for (\n        let [layerKey, [displayName, resolution, keys]]\n        of Object.entries(config)\n      ) {\n        this.layerNames[layerKey] = displayName;\n        requests[layerKey] = this.service.fetchLayerData(\n          resolution,\n          keys?.map(k => k.split(\" \").join(\"\"))\n        );\n      }\n      let fetched: Record = {};\n      for (let [layerKey, data] of Object.entries(requests)) {\n        fetched[layerKey] = await data;\n      }\n      this.layerData.next(fetched);\n    });\n  }\n\n  /**\n   * Renders the map with the given input values.\n   */\n  ngAfterViewInit(): void {\n    const nativeMapElement = this.mapElement.nativeElement;\n\n    const map = L.map(nativeMapElement, {\n      scrollWheelZoom: this.inputScrollWheelZoom,\n      center: this.center\n        .split(\", \")\n        .map(str => parseFloat(str)) as [number, number],\n      zoom: this.zoom\n    });\n    map.getRenderer(map as any).options.padding = 100;\n\n    L.tileLayer(this.tileUrl).addTo(map);\n\n    this.map = map;\n    let layersControl: L.Control.Layers;\n    // TODO: make a clear type from this\n    let invertSelectionControl: any;\n\n    this.layerData.subscribe(async layerData => {\n      let displayLayer = true;\n\n      // reset selected data\n      this.selectedShapes = {};\n\n      if (layersControl) map.removeControl(layersControl);\n      layersControl = L.control.layers();\n      // layer index to allow sorting by it\n      // this allows updating the names without having to worry about layer\n      // shuffling\n      let layerIndex = 0;\n      layersControl.options.sortLayers = true;\n      layersControl.options.sortFunction = (layerA, layerB) => {\n        // @ts-ignore these orders are injected here to allow fixed ordering\n        return layerA.options.order - layerB.options.order;\n      }\n      let layers: L.Layer[] = [];\n\n      if (this.selectedGeoJsonLayer) map.removeLayer(this.selectedGeoJsonLayer);\n\n      // update map with new layer data\n      for (let [key, data] of Object.entries(layerData)) {\n        let selectedShapes = this.selectedShapes[key] = new Set();\n        // use for every layer a new geoJSON layer\n        let geoJsonLayer = L.geoJSON(undefined, {\n          // @ts-ignore insert order here to allow fixed ordering when updating\n          // translation\n          order: layerIndex++,\n          attribution: `\n            \n              📐 © GeoBasis-DE / BKG 2022\n            \n            |\n            \n              🔖 dl-de/by-2-0\n            \n          `,\n          style: {color: this.unselectedColor},\n          onEachFeature: (feature, layer) => {\n            // used properties are injected later into the feature\n            layer.bindTooltip(feature.properties.name, {direction: \"center\"});\n            if (this.inputLayerSelectable) {\n              layer.on(\"click\", () => {\n                let [key, path] = [feature.properties.key, layer as L.Path];\n                if (selectedShapes.has(key)) {\n                  path.setStyle({color: this.unselectedColor});\n                  path.bringToBack();\n                  selectedShapes.delete(key);\n                }\n                else {\n                  path.setStyle({color: this.selectedColor});\n                  path.bringToFront();\n                  selectedShapes.add(key);\n                }\n                this.emitSelection();\n              });\n            }\n            layers.push(layer);\n          }\n        });\n        for (let shape of data.shapes) {\n          geoJsonLayer.addData(Object.assign(shape.geoJson, {properties: {\n            name: shape.name,\n            key: shape.key\n          }}));\n          if (displayLayer) {\n            geoJsonLayer.addTo(map);\n            displayLayer = false;\n            this.selectedLayer = key;\n            this.selectedGeoJsonLayer = geoJsonLayer;\n            map.fitBounds([\n              data.box[0],\n              data.box[2]\n            ]);\n          }\n        }\n        this.translate.onLangChange.subscribe(() => {\n          layersControl.removeLayer(geoJsonLayer);\n          layersControl.addBaseLayer(\n            geoJsonLayer,\n            this.translate.instant(this.layerNames[key])\n          );\n        });\n        let layerName = await firstValueFrom(\n          this.translate.get(this.layerNames[key])\n        );\n        layersControl.addBaseLayer(geoJsonLayer, layerName);\n        map.on(\"baselayerchange\", ({layer}) => {\n          if (layer == geoJsonLayer) {\n            this.selectedGeoJsonLayer = layer;\n            this.selectedLayer = key;\n            this.emitSelection();\n          }\n        })\n      }\n      if (Object.keys(layerData).length > 1) layersControl.addTo(map);\n\n      if (this.inputLayerSelectable) {\n        if (invertSelectionControl) map.removeControl(invertSelectionControl);\n        invertSelectionControl = LX.control.invertSelection(() => {\n          for (let layer of layers) {\n            layer.fire(\"click\");\n          }\n        });\n        invertSelectionControl.addTo(map);\n      }\n    });\n\n    let markerLayer = L.markerClusterGroup();\n    this.markers.subscribe(markers => {\n      markerLayer.removeFrom(map);\n      markerLayer = L.markerClusterGroup();\n      for (let marker of markers) {\n        let lMarker = L.marker(marker.coordinates);\n        if (marker.icon) lMarker.setIcon(marker.icon);\n        if (marker.tooltip) lMarker.bindTooltip(marker.tooltip);\n        if (marker.onClick) lMarker.on(\"click\", marker.onClick)\n        lMarker.addTo(markerLayer);\n      }\n      markerLayer.addTo(map);\n    });\n  }\n\n  /**\n   * Internally used function to emit the currently selected shapes via the\n   * {@link selected} output.\n   * @private\n   */\n  private emitSelection(): void {\n    let layerKey = this.selectedLayer!;\n    let layerName = this.layerNames[layerKey]!;\n    let keys = Array.from(this.selectedShapes[layerKey]);\n    this.selected.emit({\n      layer: layerKey,\n      name: layerName,\n      keys\n    });\n  }\n}\n\n    \n\n\n    \n                \n                    ./map.component.css\n                \n                .map-container {}\n\n.map {\n  height: 100%;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'BimComponent', 'selector': 'bim'},{'name': 'BreadcrumbsComponent', 'selector': 'breadcrumbs'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'MapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MapDB.html":{"url":"interfaces/MapDB.html","title":"interface - MapDB","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MapDB\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/map.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The schema the map db uses.\n\n            \n\n            \n                Extends\n            \n            \n                    DBSchema\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            queries\n                                        \n                                \n                                \n                                        \n                                            shapes\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        queries\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queries:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    All cached queries, used to identify if a query is already in the db.\nThe key[0] represents the resolution of the query, a -1 represents no\nresolution.\nThe rest are the given keys.\nThe value is an array of all the keys the query returned.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shapes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shapes:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    All shapes in the indexed db.\nThe key is the key of the shape.\nThe value is some ShapeData.\nSince LayerData is simply an array of ShapeData, this may\nbe used to reconstruct some layer data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  HttpClient,\n  HttpContext,\n  HttpHeaders,\n  HttpParams\n} from \"@angular/common/http\";\nimport {Injectable} from \"@angular/core\";\nimport {openDB, DBSchema} from \"idb\";\nimport {Layer} from \"leaflet\";\nimport {firstValueFrom} from \"rxjs\";\n\nimport {Resolution} from \"./resolution\";\nimport {LayerData, ShapeData} from \"./layer-data\";\nimport {USE_API_URL} from \"../http-context/use-api-url\";\nimport {USE_LOADER} from \"../http-context/use-loader\";\n\n/** API url for the map to request data from. */\nconst API_URL = \"geodata\";\n/** Indexed DB name. */\nconst DB_NAME = \"map-db\";\n/** Indexed DB schema version. */\nconst SCHEMA_V = 2;\n\n/** The schema the map db uses. */\ninterface MapDB extends DBSchema {\n  /**\n   * All cached queries, used to identify if a query is already in the db.\n   *\n   * The key[0] represents the resolution of the query, a -1 represents no\n   * resolution.\n   * The rest are the given keys.\n   *\n   * The value is an array of all the keys the query returned.\n   */\n  queries: {\n    key: [number, ...string[]],\n    value: {\n      box: LayerData[\"box\"],\n      shapes: string[]\n    }\n  },\n\n  /**\n   * All shapes in the indexed db.\n   *\n   * The key is the key of the shape.\n   *\n   * The value is some {@link ShapeData}.\n   * Since {@link LayerData} is simply an array of {@link ShapeData}, this may\n   * be used to reconstruct some layer data.\n   */\n  shapes: {\n    key: string,\n    value: ShapeData\n  }\n}\n\n/**\n * Service to interact with the geo data api to fetch map data.\n *\n * Fetched map data is cached in the indexedDB and therefore only retrieved\n * lazily.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n\n  /** Indexed DB client. */\n  private readonly idb;\n\n  /**\n   * Constructor.\n   * @param http Client to request geo data\n   */\n  constructor(private http: HttpClient) {\n    this.idb = openDB(DB_NAME, SCHEMA_V, {\n      upgrade(db, oldV) {\n        if (oldV) {\n          db.deleteObjectStore(\"queries\");\n          db.deleteObjectStore(\"shapes\");\n        }\n        db.createObjectStore(\"queries\");\n        db.createObjectStore(\"shapes\");\n      }\n    });\n  }\n\n  /**\n   * Asynchronously fetch the map from the geo data rest api.\n   *\n   * Will only fetch data if not already stored in the indexedDB.\n   * @param resolution The resolution the of the shapes returned by the service\n   * @param keys The keys given to look for shapes\n   * @param force If true, this will ignore the cache and request everything\n   */\n  async fetchLayerData(\n    resolution: Resolution | null | undefined,\n    keys?: string[] | null,\n    force: boolean = false\n  ): Promise {\n    // prepare db and keys\n    let idb = await this.idb;\n    let trimmedKeys = keys ?? [];\n    let resolutionNum = resolution ? Resolution.toKeyLength(resolution) : -1;\n    let queryKey = [resolutionNum, ...trimmedKeys] as [number, ...string[]];\n\n    // check for cached keys or ignore if is force is true\n    let cachedQuery = force ? undefined : await idb.get(\"queries\", queryKey);\n    if (cachedQuery) {\n      let tx = idb.transaction(\"shapes\", \"readonly\");\n      let store = tx.objectStore(\"shapes\");\n      let shapes: ShapeData[] = [];\n      let operations = [];\n      for (let key of cachedQuery.shapes) {\n        operations.push(store.get(key).then(shape => {\n          if (shape) shapes.push(shape);\n        }));\n      }\n      operations.push(tx.done);\n      await Promise.all(operations);\n      return {\n        box: cachedQuery.box,\n        shapes\n      };\n    }\n\n    // if cachedKeys was empty, request data from the server\n    let params = new HttpParams();\n    if (resolution) params = params.set(\"resolution\", resolution);\n    if (keys && keys.length) params = params.appendAll({key: keys.map(k => {\n      if (resolution) return k.substring(0, resolutionNum);\n      return k;\n    })});\n\n    let rawLayerData = await firstValueFrom(this.http.get(`${API_URL}/`, {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      }),\n      params,\n      responseType: \"json\",\n      context: new HttpContext()\n        .set(USE_API_URL, true)\n        .set(USE_LOADER, true)\n    }));\n\n    rawLayerData.shapes = rawLayerData.shapes.map(rawShape => ({\n      nutsKey: rawShape.nuts_key,\n      geoJson: rawShape.geojson,\n      ...rawShape\n    }));\n\n    let layerData = rawLayerData as unknown as LayerData;\n\n    // store the requested data back into the db\n    let tx = idb.transaction([\"queries\", \"shapes\"], \"readwrite\");\n    let operations = [];\n    let shapeStore = tx.objectStore(\"shapes\");\n    let shapeKeys = [];\n    for (let shape of layerData.shapes) {\n      operations.push(shapeStore.put(shape, shape.key));\n      shapeKeys.push(shape.key);\n    }\n    let queryStore = tx.objectStore(\"queries\");\n    operations.push(queryStore.put({\n      box: layerData.box,\n      shapes: shapeKeys\n    }, queryKey));\n    await Promise.all(operations);\n\n    return layerData;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MapService.html":{"url":"injectables/MapService.html","title":"injectable - MapService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MapService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/map.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to interact with the geo data api to fetch map data.\nFetched map data is cached in the indexedDB and therefore only retrieved\nlazily.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                idb\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                fetchLayerData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/lib/map/map.service.ts:70\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Client to request geo data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchLayerData\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchLayerData(resolution: Resolution | null | undefined, keys?: string[] | null, force: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.service.ts:97\n                \n            \n\n\n            \n                \n                    Asynchronously fetch the map from the geo data rest api.\nWill only fetch data if not already stored in the indexedDB.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    resolution\n                                    \n                                                Resolution | null | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The resolution the of the shapes returned by the service\n\n                                    \n                                \n                                \n                                    keys\n                                    \n                                            string[] | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The keys given to look for shapes\n\n                                    \n                                \n                                \n                                    force\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        If true, this will ignore the cache and request everything\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        idb\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/lib/map/map.service.ts:70\n                        \n                    \n\n            \n                \n                    Indexed DB client.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpClient,\n  HttpContext,\n  HttpHeaders,\n  HttpParams\n} from \"@angular/common/http\";\nimport {Injectable} from \"@angular/core\";\nimport {openDB, DBSchema} from \"idb\";\nimport {Layer} from \"leaflet\";\nimport {firstValueFrom} from \"rxjs\";\n\nimport {Resolution} from \"./resolution\";\nimport {LayerData, ShapeData} from \"./layer-data\";\nimport {USE_API_URL} from \"../http-context/use-api-url\";\nimport {USE_LOADER} from \"../http-context/use-loader\";\n\n/** API url for the map to request data from. */\nconst API_URL = \"geodata\";\n/** Indexed DB name. */\nconst DB_NAME = \"map-db\";\n/** Indexed DB schema version. */\nconst SCHEMA_V = 2;\n\n/** The schema the map db uses. */\ninterface MapDB extends DBSchema {\n  /**\n   * All cached queries, used to identify if a query is already in the db.\n   *\n   * The key[0] represents the resolution of the query, a -1 represents no\n   * resolution.\n   * The rest are the given keys.\n   *\n   * The value is an array of all the keys the query returned.\n   */\n  queries: {\n    key: [number, ...string[]],\n    value: {\n      box: LayerData[\"box\"],\n      shapes: string[]\n    }\n  },\n\n  /**\n   * All shapes in the indexed db.\n   *\n   * The key is the key of the shape.\n   *\n   * The value is some {@link ShapeData}.\n   * Since {@link LayerData} is simply an array of {@link ShapeData}, this may\n   * be used to reconstruct some layer data.\n   */\n  shapes: {\n    key: string,\n    value: ShapeData\n  }\n}\n\n/**\n * Service to interact with the geo data api to fetch map data.\n *\n * Fetched map data is cached in the indexedDB and therefore only retrieved\n * lazily.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n\n  /** Indexed DB client. */\n  private readonly idb;\n\n  /**\n   * Constructor.\n   * @param http Client to request geo data\n   */\n  constructor(private http: HttpClient) {\n    this.idb = openDB(DB_NAME, SCHEMA_V, {\n      upgrade(db, oldV) {\n        if (oldV) {\n          db.deleteObjectStore(\"queries\");\n          db.deleteObjectStore(\"shapes\");\n        }\n        db.createObjectStore(\"queries\");\n        db.createObjectStore(\"shapes\");\n      }\n    });\n  }\n\n  /**\n   * Asynchronously fetch the map from the geo data rest api.\n   *\n   * Will only fetch data if not already stored in the indexedDB.\n   * @param resolution The resolution the of the shapes returned by the service\n   * @param keys The keys given to look for shapes\n   * @param force If true, this will ignore the cache and request everything\n   */\n  async fetchLayerData(\n    resolution: Resolution | null | undefined,\n    keys?: string[] | null,\n    force: boolean = false\n  ): Promise {\n    // prepare db and keys\n    let idb = await this.idb;\n    let trimmedKeys = keys ?? [];\n    let resolutionNum = resolution ? Resolution.toKeyLength(resolution) : -1;\n    let queryKey = [resolutionNum, ...trimmedKeys] as [number, ...string[]];\n\n    // check for cached keys or ignore if is force is true\n    let cachedQuery = force ? undefined : await idb.get(\"queries\", queryKey);\n    if (cachedQuery) {\n      let tx = idb.transaction(\"shapes\", \"readonly\");\n      let store = tx.objectStore(\"shapes\");\n      let shapes: ShapeData[] = [];\n      let operations = [];\n      for (let key of cachedQuery.shapes) {\n        operations.push(store.get(key).then(shape => {\n          if (shape) shapes.push(shape);\n        }));\n      }\n      operations.push(tx.done);\n      await Promise.all(operations);\n      return {\n        box: cachedQuery.box,\n        shapes\n      };\n    }\n\n    // if cachedKeys was empty, request data from the server\n    let params = new HttpParams();\n    if (resolution) params = params.set(\"resolution\", resolution);\n    if (keys && keys.length) params = params.appendAll({key: keys.map(k => {\n      if (resolution) return k.substring(0, resolutionNum);\n      return k;\n    })});\n\n    let rawLayerData = await firstValueFrom(this.http.get(`${API_URL}/`, {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      }),\n      params,\n      responseType: \"json\",\n      context: new HttpContext()\n        .set(USE_API_URL, true)\n        .set(USE_LOADER, true)\n    }));\n\n    rawLayerData.shapes = rawLayerData.shapes.map(rawShape => ({\n      nutsKey: rawShape.nuts_key,\n      geoJson: rawShape.geojson,\n      ...rawShape\n    }));\n\n    let layerData = rawLayerData as unknown as LayerData;\n\n    // store the requested data back into the db\n    let tx = idb.transaction([\"queries\", \"shapes\"], \"readwrite\");\n    let operations = [];\n    let shapeStore = tx.objectStore(\"shapes\");\n    let shapeKeys = [];\n    for (let shape of layerData.shapes) {\n      operations.push(shapeStore.put(shape, shape.key));\n      shapeKeys.push(shape.key);\n    }\n    let queryStore = tx.objectStore(\"queries\");\n    operations.push(queryStore.put({\n      box: layerData.box,\n      shapes: shapeKeys\n    }, queryKey));\n    await Promise.all(operations);\n\n    return layerData;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Marker.html":{"url":"interfaces/Marker.html","title":"interface - Marker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Marker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/marker.ts\n        \n\n\n            \n                Description\n            \n            \n                Marker interface for creating custom markers on a MapComponent.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            coordinates\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onClick\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tooltip\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coordinates\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        coordinates:     [number, number]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [number, number]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Coordinates of the marker.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:     L.Icon | L.DivIcon\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     L.Icon | L.DivIcon\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional icon for the marker, if not set a default one will be used.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onClick\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onClick:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Event handler for a click on the marker.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tooltip\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tooltip:     Content |  | Tooltip\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Content |  | Tooltip\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Displayed tooltip when hovering the marker.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {Content, LeafletMouseEvent, Layer, Tooltip} from \"leaflet\";\n\nimport * as L from \"leaflet\";\n\n/** Marker interface for creating custom markers on a {@link MapComponent}. */\nexport interface Marker {\n  /** Coordinates of the marker. */\n  coordinates: [number, number],\n  /** Displayed tooltip when hovering the marker. */\n  tooltip?: Content | ((layer: Layer) => Content) | Tooltip,\n  /** Event handler for a click on the marker. */\n  onClick?: (evt: LeafletMouseEvent) => void,\n  /** Optional icon for the marker, if not set a default one will be used. */\n  icon?: L.Icon | L.DivIcon\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/QueryParameterGuard.html":{"url":"guards/QueryParameterGuard.html","title":"guard - QueryParameterGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    QueryParameterGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/lib/guards/query-parameter.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard to check if certain query parameters are set.\nIn the data attribute of route it expects an optional redirectTo\ncontaining an Observable, a Promise or a direct\nUrlTree or a string that will be passed to Router#parseUrl\nand queryParams containing a string or an array of strings.\n\nredirect will be used when the check fails.\nqueryParams will be iterated to check for the keys\n\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/lib/guards/query-parameter.guard.ts:25\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Router used to parse redirect entries\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/guards/query-parameter.guard.ts:41\n                \n            \n\n\n            \n                \n                    Whether the route can be activated.\nFor more info check QueryParameterGuard.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently activated route snapshot\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state of the router\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise | boolean | UrlTree\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {Injectable} from \"@angular/core\";\nimport {\n  CanActivate,\n  Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree\n} from \"@angular/router\";\nimport {Observable} from \"rxjs\";\n\n/**\n * Guard to check if certain query parameters are set.\n *\n * In the `data` attribute of route it expects an optional `redirectTo`\n * containing an {@link Observable}, a {@link Promise} or a direct\n * {@link UrlTree} or a string that will be passed to {@link Router#parseUrl}\n * and `queryParams` containing a string or an array of strings.\n *\n * - `redirect` will be used when the check fails.\n * - `queryParams` will be iterated to check for the keys\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class QueryParameterGuard implements CanActivate {\n\n  /**\n   * Constructor.\n   * @param router Router used to parse redirect entries\n   */\n  constructor(private router: Router) {}\n\n  /**\n   * Whether the route can be activated.\n   *\n   * For more info check {@link QueryParameterGuard}.\n   *\n   * @param route Currently activated route snapshot\n   * @param state Current state of the router\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable | Promise | boolean | UrlTree {\n    let redirect  = route.data[\"redirect\"] ?? false;\n    if (typeof redirect === \"string\") redirect = this.router.parseUrl(redirect);\n    for (let param of [route.data[\"queryParams\"] ?? []].flat()) {\n      if (route.queryParams[param] === undefined) return redirect;\n    }\n    return true;\n  }\n\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ShapeData.html":{"url":"interfaces/ShapeData.html","title":"interface - ShapeData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ShapeData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/layer-data.ts\n        \n\n\n            \n                Description\n            \n            \n                Type to represent a single shape with all of its metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            geoJson\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            nutsKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        geoJson\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        geoJson:     GeoJsonObject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     GeoJsonObject\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    GeoJson representing the shape.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Key of the shape.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the shape.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nutsKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nutsKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Nomenclature of Territorial Units code of the shape.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as L from \"leaflet\";\nimport {GeoJsonObject} from \"geojson\";\n\n/** Type to represent a single shape with all of its metadata. */\nexport interface ShapeData {\n  /** Name of the shape. */\n  name: string,\n  /** Key of the shape. */\n  key: string,\n  /** Nomenclature of Territorial Units code of the shape. */\n  nutsKey: string,\n  /** GeoJson representing the shape. */\n  geoJson: GeoJsonObject\n}\n\n/** Type to represent layer data received from the geo data server. */\nexport interface LayerData {\n  /** Corner coordinates of a box containing all the shapes this displays. */\n  box: [[number, number], [number, number], [number, number], [number, number]],\n  /** List of shapes. */\n  shapes: ShapeData[]\n}\n\nexport default LayerData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WisdomInterface.html":{"url":"interfaces/WisdomInterface.html","title":"interface - WisdomInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WisdomInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/WisdomInterface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for the wisdom modules.\nEvery wisdom module must provide such an object implementing this interface.\nThe object must be exported under the name \"wisdomInterface\".\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            route\n                                        \n                                \n                                \n                                        \n                                            scopes\n                                        \n                                \n                                \n                                        \n                                            translations\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        route\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        route:         Route\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Route\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The route that leads to this module.\nThis may also include guards but some guards will be automatically injected.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scopes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scopes:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The scopes required to see the component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translations:     Record>>>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record>>>\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The translations the modules provides and uses.\nThe top most entry should be the namespace, the following the component and\nin the component there should be keys for the translation keys.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {Route} from \"@angular/router\";\n\n/**\n * Interface for the wisdom modules.\n *\n * Every wisdom module must provide such an object implementing this interface.\n * The object must be exported under the name \"wisdomInterface\".\n */\nexport interface WisdomInterface {\n  /**\n   * The route that leads to this module.\n   * This may also include guards but some guards will be automatically injected.\n   */\n  route: Route;\n  /** The scopes required to see the component. */\n  scopes: string[];\n  /**\n   * The translations the modules provides and uses.\n   *\n   * The top most entry should be the namespace, the following the component and\n   * in the component there should be keys for the translation keys.\n   */\n  translations: Record>>>\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WisdomModule.html":{"url":"modules/WisdomModule.html","title":"module - WisdomModule","body":"\n                   \n\n\n\n\n    Modules\n    WisdomModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WisdomModule\n\n\n\ncluster_WisdomModule_exports\n\n\n\ncluster_WisdomModule_declarations\n\n\n\n\nBimComponent\n\nBimComponent\n\n\n\nWisdomModule\n\nWisdomModule\n\nWisdomModule -->\n\nBimComponent->WisdomModule\n\n\n\n\n\nBreadcrumbsComponent\n\nBreadcrumbsComponent\n\nWisdomModule -->\n\nBreadcrumbsComponent->WisdomModule\n\n\n\n\n\nBulmaIsToggleableDirective\n\nBulmaIsToggleableDirective\n\nWisdomModule -->\n\nBulmaIsToggleableDirective->WisdomModule\n\n\n\n\n\nIonIconComponent\n\nIonIconComponent\n\nWisdomModule -->\n\nIonIconComponent->WisdomModule\n\n\n\n\n\nMapComponent\n\nMapComponent\n\nWisdomModule -->\n\nMapComponent->WisdomModule\n\n\n\n\n\nBimComponent \n\nBimComponent \n\nBimComponent  -->\n\nWisdomModule->BimComponent \n\n\n\n\n\nBreadcrumbsComponent \n\nBreadcrumbsComponent \n\nBreadcrumbsComponent  -->\n\nWisdomModule->BreadcrumbsComponent \n\n\n\n\n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective  -->\n\nWisdomModule->BulmaIsToggleableDirective \n\n\n\n\n\nIonIconComponent \n\nIonIconComponent \n\nIonIconComponent  -->\n\nWisdomModule->IonIconComponent \n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nWisdomModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/wisdom.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BimComponent\n                        \n                        \n                            BreadcrumbsComponent\n                        \n                        \n                            BulmaIsToggleableDirective\n                        \n                        \n                            IonIconComponent\n                        \n                        \n                            MapComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BimComponent\n                        \n                        \n                            BreadcrumbsComponent\n                        \n                        \n                            BulmaIsToggleableDirective\n                        \n                        \n                            IonIconComponent\n                        \n                        \n                            MapComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\nimport {RouterModule} from \"@angular/router\";\nimport {TranslateModule} from \"@ngx-translate/core\";\n\nimport {BreadcrumbsComponent} from \"./breadcrumbs/breadcrumbs.component\";\nimport {\n  BulmaIsToggleableDirective\n} from \"./bulma/bulma-is-toggleable.directive\";\nimport {IonIconComponent} from \"./ion-icon/ion-icon.component\";\nimport {MapComponent} from \"./map/map.component\";\nimport { BimComponent } from './bim/bim.component';\n\n@NgModule({\n  declarations: [\n    IonIconComponent,\n    BulmaIsToggleableDirective,\n    MapComponent,\n    BreadcrumbsComponent,\n    BimComponent\n  ],\n  imports: [\n    TranslateModule,\n    CommonModule,\n    RouterModule\n  ],\n  exports: [\n    BimComponent,\n    IonIconComponent,\n    BulmaIsToggleableDirective,\n    MapComponent,\n    BreadcrumbsComponent\n  ]\n})\nexport class WisdomModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/WisdomInterface.ts\n            \n            interface\n            WisdomInterface\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/bim/bim.component.ts\n            \n            component\n            BimComponent\n            \n                0 %\n                (0/52)\n            \n        \n        \n            \n                \n                src/lib/bim/bim.service.ts\n            \n            injectable\n            BimService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/breadcrumbs/breadcrumbs.component.ts\n            \n            component\n            BreadcrumbsComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/lib/breadcrumbs/breadcrumbs.service.ts\n            \n            injectable\n            BreadcrumbsService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/breadcrumbs/breadcrumbs.service.ts\n            \n            interface\n            Breadcrumb\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/bulma/bulma-is-toggleable.directive.ts\n            \n            directive\n            BulmaIsToggleableDirective\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/guards/query-parameter.guard.ts\n            \n            guard\n            QueryParameterGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-api-url.ts\n            \n            variable\n            USE_API_URL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-base-url.ts\n            \n            variable\n            USE_BASE_URL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-cache.ts\n            \n            variable\n            USE_CACHE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-error-curtain.ts\n            \n            variable\n            USE_ERROR_CURTAIN\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-loader.ts\n            \n            variable\n            USE_LOADER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/ion-icon/ion-icon.component.ts\n            \n            component\n            IonIconComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/map/invert-selection.ts\n            \n            variable\n            control\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/layer-data.ts\n            \n            interface\n            LayerData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/map/layer-data.ts\n            \n            interface\n            ShapeData\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/map/map.component.ts\n            \n            component\n            MapComponent\n            \n                100 %\n                (29/29)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            injectable\n            MapService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            interface\n            MapDB\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            API_URL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            DB_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            SCHEMA_V\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/marker.ts\n            \n            interface\n            Marker\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/map/resolution.ts\n            \n            function\n            toEnum\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/map/resolution.ts\n            \n            function\n            toKeyLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            getResolvedUrl\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            prettyPrintNum\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            stringToColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            translateObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            tupleSwap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.4.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^14.2.4\n        \n            @angular/core : ^14.2.4\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Resolution   (src/.../resolution.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/map/resolution.ts\n    \n        \n            \n                \n                    \n                        \n                        Resolution\n                    \n                \n                    \n                        \n                            Resolutions the map may display.\n\n                        \n                    \n                        \n                            \n                                 STATE\n                            \n                        \n                        \n                            \n                                Value : state\n                            \n                        \n                        \n                            \n                                 DISTRICT\n                            \n                        \n                        \n                            \n                                Value : district\n                            \n                        \n                        \n                            \n                                 ADMINISTRATION\n                            \n                        \n                        \n                            \n                                Value : administration\n                            \n                        \n                        \n                            \n                                 MUNICIPAL\n                            \n                        \n                        \n                            \n                                Value : municipal\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getResolvedUrl   (src/.../util.ts)\n                        \n                        \n                            prettyPrintNum   (src/.../util.ts)\n                        \n                        \n                            stringToColor   (src/.../util.ts)\n                        \n                        \n                            toEnum   (src/.../resolution.ts)\n                        \n                        \n                            toKeyLength   (src/.../resolution.ts)\n                        \n                        \n                            translateObject   (src/.../util.ts)\n                        \n                        \n                            tupleSwap   (src/.../util.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getResolvedUrl\n                        \n                    \n                \n            \n            \n                \ngetResolvedUrl(route: ActivatedRouteSnapshot)\n                \n            \n\n\n\n\n            \n                \n                    Function to return a fully resolved url in a string from an activated route\nsnapshot.\nRecreated by this solution on StackOverflow.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Route snapshot of a component.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prettyPrintNum\n                        \n                    \n                \n            \n            \n                \nprettyPrintNum(num: number)\n                \n            \n\n\n\n\n            \n                \n                    Returns a number presentation where every third digit from the end is\nseparated by a dot.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Number to pretty print\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            prettyPrintNum(12345678) =&gt; &quot;12.345.678&quot;\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stringToColor\n                        \n                    \n                \n            \n            \n                \nstringToColor(str: string, map?: Record)\n                \n            \n\n\n\n\n            \n                \n                    Generates deterministically a hex color code from any string.\nThis is a modernized version of this\nStackOverflow reply.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A string to generate a hex color for\n\n                                    \n                                \n                                \n                                    map\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A color map for predefined strings\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A hex color code in the style of '#abc123'\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        translateObject\n                        \n                    \n                \n            \n            \n                \ntranslateObject(service: TranslateService, obj: T)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to translate strings in any data object using the given\ntranslate service.\nInternally the instant() method is used, causing this to be sync, beware.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    service\n                                    \n                                            TranslateService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Translate service to translate with\n\n                                    \n                                \n                                \n                                    obj\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to iterate and translate through\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tupleSwap\n                        \n                    \n                \n            \n            \n                \ntupleSwap(tuple)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to swap the values of a tuple.\nUseful if coordinates are in the wrong order.\n(e.g. geojson to leaflet)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tuple\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Tuple of two values\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/lib/map/resolution.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toEnum\n                        \n                    \n                \n            \n            \n                \ntoEnum(length: number)\n                \n            \n\n\n\n\n            \n                \n                    Get the Resolution from a key length.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key length\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Resolution | undefined\n\n                    \n                    \n                        Resolution if found, otherwise undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toKeyLength\n                        \n                    \n                \n            \n            \n                \ntoKeyLength(res: Resolution)\n                \n            \n\n\n\n\n            \n                \n                    Transforms a Resolution into the key length.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                                Resolution\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Resolution to find key length\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WisdomModule\n\n\n\ncluster_WisdomModule_declarations\n\n\n\ncluster_WisdomModule_exports\n\n\n\n\nBimComponent\n\nBimComponent\n\n\n\nWisdomModule\n\nWisdomModule\n\nWisdomModule -->\n\nBimComponent->WisdomModule\n\n\n\n\n\nBreadcrumbsComponent\n\nBreadcrumbsComponent\n\nWisdomModule -->\n\nBreadcrumbsComponent->WisdomModule\n\n\n\n\n\nBulmaIsToggleableDirective\n\nBulmaIsToggleableDirective\n\nWisdomModule -->\n\nBulmaIsToggleableDirective->WisdomModule\n\n\n\n\n\nIonIconComponent\n\nIonIconComponent\n\nWisdomModule -->\n\nIonIconComponent->WisdomModule\n\n\n\n\n\nMapComponent\n\nMapComponent\n\nWisdomModule -->\n\nMapComponent->WisdomModule\n\n\n\n\n\nBimComponent \n\nBimComponent \n\nBimComponent  -->\n\nWisdomModule->BimComponent \n\n\n\n\n\nBreadcrumbsComponent \n\nBreadcrumbsComponent \n\nBreadcrumbsComponent  -->\n\nWisdomModule->BreadcrumbsComponent \n\n\n\n\n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective  -->\n\nWisdomModule->BulmaIsToggleableDirective \n\n\n\n\n\nIonIconComponent \n\nIonIconComponent \n\nIonIconComponent  -->\n\nWisdomModule->IonIconComponent \n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nWisdomModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        WisdomModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LayerConfig   (src/.../map.component.ts)\n                        \n                        \n                            LayerKey   (src/.../map.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/map/map.component.ts\n    \n    \n        \n            \n                \n                    \n                    LayerConfig\n                \n            \n            \n                \n                    A layer config for the input of MapComponent.inputLayers.\n\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LayerKey\n                \n            \n            \n                \n                    Type alias to enforce the meaning of the layer keys.\n\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            API_URL   (src/.../map.service.ts)\n                        \n                        \n                            control   (src/.../invert-selection.ts)\n                        \n                        \n                            DB_NAME   (src/.../map.service.ts)\n                        \n                        \n                            SCHEMA_V   (src/.../map.service.ts)\n                        \n                        \n                            USE_API_URL   (src/.../use-api-url.ts)\n                        \n                        \n                            USE_BASE_URL   (src/.../use-base-url.ts)\n                        \n                        \n                            USE_CACHE   (src/.../use-cache.ts)\n                        \n                        \n                            USE_ERROR_CURTAIN   (src/.../use-error-curtain.ts)\n                        \n                        \n                            USE_LOADER   (src/.../use-loader.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/map/map.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        API_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"geodata\"\n                    \n                \n\n            \n                \n                    API url for the map to request data from.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DB_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"map-db\"\n                    \n                \n\n            \n                \n                    Indexed DB name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SCHEMA_V\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 2\n                    \n                \n\n            \n                \n                    Indexed DB schema version.\n\n                \n            \n\n        \n    \n\n    src/lib/map/invert-selection.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  invertSelection: (callback: (arg0: MouseEvent) => void, options?: L.ControlOptions) => {\n    let InvertSelection = L.Control.extend({\n      options: {\n        position: \"topright\"\n      },\n      initialize: function (options: any) {\n        L.Util.setOptions(this, options);\n      },\n      onAdd: function (map: L.Map) {\n        let centerContent = [\n          \"is-flex is-align-content-center\",\n          \"is-align-items-center\",\n          \"is-justify-content-center\"\n        ].join(\" \");\n\n        let container = L.DomUtil.create(\n          \"div\",\n          \"select-all-container leaflet-control-layers leaflet-control\"\n        );\n        container.addEventListener(\"click\", callback);\n        let button = L.DomUtil.create(\n          \"a\",\n          \"leaflet-control-layers-toggle \" + centerContent,\n          container\n        );\n        button.style.backgroundImage = \"none\";\n        let icon = L.DomUtil.create(\n          \"ion-icon\",\n          \"select-all-icon\",\n          button\n        );\n        icon.style.pointerEvents = \"none\";\n        icon.setAttribute(\"name\", \"extension-puzzle\");\n        icon.setAttribute(\"size\", \"large\");\n        icon.style.color = \"#a0a0a0\";\n        return container;\n      }\n    });\n    return new InvertSelection(options);\n  }\n}\n                    \n                \n\n            \n                \n                    Custom control to invert the currently selected shapes on a\nMapComponent.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-api-url.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_API_URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => false)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if the api url should be used.\nDefaults to false.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-base-url.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_BASE_URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => true)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if the base url should be used.\nDefaults to true.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-cache.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_CACHE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => true)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if cache headers should be sent.\nDefaults to true.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-error-curtain.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_ERROR_CURTAIN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => true)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if requests that error should show\nthe error message on curtain covering the whole main container.\nDisable this if you want to handle errors yourself.\nDefaults to true.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-loader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_LOADER\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => false)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if loader should be shown.\nA given string will be run through the translator and therefore may get\ntranslated.\nUseful for longer loading times.\nDefaults to false.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
