var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/BarChartComponent.html",[0,0.677,1,0.898]],["body/components/BarChartComponent.html",[0,1.065,1,1.331,2,1.554,3,0.458,4,0.458,5,1.236,6,1.236,7,0.389,8,3.976,9,1.444,10,0.666,11,1.795,12,2.226,13,2.503,14,3.236,15,2.098,16,2.471,17,2.948,18,1.07,19,2.297,20,4.268,21,1.795,22,0.266,23,1.03,24,2,25,1.691,26,2.948,27,2.948,28,1.554,29,2.712,30,2.503,31,1.554,32,1.56,33,3.239,34,1.795,35,1.07,36,1.723,37,2.712,38,2.121,39,2.146,40,1.593,41,0.054,42,1.284,43,0.716,44,2.098,45,2.948,46,2.146,47,1.795,48,3.118,49,2.948,50,2.146,51,2.503,52,2.503,53,2.503,54,2.098,55,1.593,56,2.134,57,2.503,58,3.236,59,2.146,60,2.503,61,2.503,62,2.098,63,3.236,64,2.503,65,2.146,66,2.503,67,2.471,68,1.236,69,1.723,70,2.146,71,2.098,72,2.321,73,3.7,74,2.146,75,1.723,76,2.146,77,1.723,78,2.503,79,1.003,80,1.444,81,0.931,82,0.534,83,1.723,84,1.444,85,1.444,86,1.236,87,1.723,88,0.458,89,0.617,90,1.07,91,1.723,92,1.723,93,1.723,94,1.236,95,1.723,96,2.948,97,1.593,98,1.723,99,1.07,100,1.723,101,1.723,102,2.503,103,0.813,104,1.723,105,2.948,106,1.723,107,2.948,108,1.723,109,1.723,110,2.503,111,1.07,112,1.723,113,1.723,114,1.444,115,1.236,116,1.795,117,0.709,118,2.321,119,1.236,120,1.795,121,0.709,122,0.931,123,1.236,124,0.709,125,1.07,126,0.709,127,0.709,128,1.07,129,0.617,130,1.07,131,1.236,132,0.03,133,0.03]],["title/directives/BulmaIsToggleableDirective.html",[117,0.898,129,0.782]],["body/directives/BulmaIsToggleableDirective.html",[3,0.548,4,0.548,7,0.465,10,0.548,18,1.278,19,1.763,22,0.318,23,1.168,24,1.113,25,1.793,28,1.763,31,1.763,34,2.037,38,2.105,40,1.113,41,0.054,42,0.737,43,0.662,55,1.757,56,1.763,68,1.477,71,3.546,79,0.638,81,1.113,82,0.638,88,0.548,89,1.421,94,2.332,97,1.113,117,1.564,128,1.278,129,1.017,130,2.175,132,0.035,133,0.035,134,3.968,135,2.059,136,3.537,137,3.537,138,3.537,139,3.537,140,5.172,141,4.028,142,5.017,143,5.129,144,4.049,145,3.537,146,3.537,147,4.049,148,1.23,149,3.537,150,3.537,151,2.018,152,4.049,153,4.049,154,2.564,155,1.763,156,1.535,157,2.564,158,2.38,159,1.763,160,2.564,161,2.839,162,2.564,163,2.564,164,2.564,165,2.564,166,2.564,167,2.564,168,2.564,169,2.564,170,2.564,171,2.564,172,2.564,173,2.564,174,4.049,175,2.564,176,3.537,177,2.564,178,1.726]],["title/modules/ChartModule.html",[179,1.566,180,1.355]],["body/modules/ChartModule.html",[1,1.788,3,0.744,4,0.744,7,0.632,10,0.744,12,1.737,13,3.472,41,0.054,79,1.223,82,0.867,88,0.744,89,1.001,124,1.788,125,1.737,132,0.042,133,0.042,179,2.49,180,2.67,181,1.512,182,2.155,183,2.797,184,2.797,185,2.797,186,2.49,187,2.007,188,2.345,189,3.485,190,4.325,191,3.472,192,3.472,193,4.325,194,2.797,195,3.472,196,4.325,197,2.797]],["title/components/IonIconComponent.html",[0,0.677,121,0.898]],["body/components/IonIconComponent.html",[0,1.25,1,0.972,2,1.935,3,0.629,4,0.629,5,1.695,6,1.695,7,0.534,10,0.629,12,1.467,18,1.467,19,2.505,21,1.695,22,0.365,31,1.935,38,1.277,41,0.054,42,1.466,43,0.447,47,2.236,54,2.612,72,2.236,79,0.732,81,1.684,82,0.732,88,0.629,89,0.846,115,1.695,116,2.236,117,0.972,118,2.659,119,1.695,120,2.236,121,1.526,122,1.885,123,1.695,124,0.972,125,1.467,126,0.972,127,0.972,128,1.467,129,0.846,130,1.467,131,1.695,132,0.038,133,0.038,148,0.966,198,3.117,199,2.612,200,2.363,201,1.526,202,3.882,203,4.93,204,4.618,205,2.236,206,3.882,207,3.882,208,3.117,209,3.117,210,3.882,211,3.117,212,3.882,213,3.958,214,2.236,215,2.944,216,4.618,217,3.882,218,3.882,219,3.882,220,3.882,221,3.882,222,3.882,223,3.882,224,3.882,225,3.882,226,3.882,227,1.695]],["title/components/LineChartComponent.html",[0,0.677,124,0.898]],["body/components/LineChartComponent.html",[0,1.064,1,0.708,2,1.552,3,0.458,4,0.458,5,1.234,6,1.234,7,0.389,9,1.442,10,0.665,11,1.794,12,1.829,14,3.234,15,2.096,16,2.469,17,2.946,18,1.068,19,2.296,20,4.267,21,1.794,22,0.266,23,1.029,24,1.999,25,1.69,26,2.946,27,2.946,28,1.552,29,2.71,30,2.501,31,1.552,32,1.559,33,3.238,34,1.794,35,1.068,36,1.721,37,2.71,38,2.121,40,1.592,41,0.054,42,1.283,43,0.716,44,2.096,45,2.946,47,1.794,49,2.946,51,2.501,52,2.501,53,2.501,54,2.096,55,1.592,56,2.133,57,2.501,58,3.234,60,2.501,61,2.501,62,2.096,63,3.234,64,2.501,66,2.501,67,2.469,68,1.234,69,1.721,71,2.096,72,2.32,73,3.698,75,1.721,77,1.721,78,2.501,79,1.002,80,1.442,81,0.93,82,0.533,83,1.721,84,1.442,85,1.442,86,1.234,87,1.721,88,0.458,89,0.616,90,1.068,91,1.721,92,1.721,93,1.721,94,1.234,95,1.721,96,2.946,97,1.592,98,1.721,99,1.068,100,1.721,101,1.721,102,2.501,103,0.812,104,1.721,105,2.946,106,1.721,107,2.946,108,1.721,109,1.721,110,2.501,111,1.068,112,1.721,113,1.721,114,1.442,115,1.234,116,1.794,117,0.708,118,2.32,119,1.234,120,1.794,121,0.708,122,0.93,123,1.234,124,1.331,125,2.225,126,0.708,127,0.708,128,1.068,129,0.616,130,1.068,131,1.234,132,0.03,133,0.03,228,3.975,229,2.143,230,2.143,231,3.115,232,2.143,233,2.143,234,2.143,235,2.143,236,2.143,237,2.143,238,1.721]],["title/components/MapComponent.html",[0,0.677,126,0.898]],["body/components/MapComponent.html",[0,0.703,1,0.309,2,0.801,3,0.2,4,0.2,5,0.539,6,0.539,7,0.17,10,0.343,11,0.926,12,0.466,15,1.082,16,1.422,18,0.466,19,1.645,21,0.926,22,0.116,23,0.828,24,1.338,25,1.805,28,0.801,29,1.687,31,0.801,32,1.449,34,0.926,35,1.053,38,2.054,40,0.698,41,0.055,42,1.177,43,0.723,47,2.45,55,1.088,56,1.645,62,2.449,67,1.422,68,0.539,72,1.444,79,0.821,80,0.63,81,1.99,82,0.233,88,0.2,89,0.269,90,0.466,94,1.444,99,0.801,103,1.319,111,0.466,115,0.539,116,1.626,117,0.309,118,1.444,119,0.539,120,0.926,121,0.309,122,0.406,123,0.539,124,0.309,125,0.466,126,0.828,127,1.643,128,0.466,129,0.269,130,0.466,131,0.539,132,0.016,133,0.016,148,1.04,151,0.801,155,1.942,156,1.813,159,0.466,161,3.032,178,0.63,186,2.175,187,0.539,201,1.248,208,0.751,209,2.267,211,1.291,227,1.9,238,2.013,239,0.936,240,0.63,241,1.608,242,2.113,243,1.608,244,2.113,245,3.128,246,3.777,247,2.796,248,1.407,249,2.113,250,2.113,251,2.113,252,2.264,253,2.113,254,2.508,255,2.824,256,2.508,257,2.508,258,2.649,259,2.113,260,2.113,261,2.508,262,4.442,263,1.608,264,0.936,265,1.25,266,0.936,267,2.006,268,1.082,269,0.926,270,2.096,271,0.936,272,1.608,273,0.936,274,1.608,275,2.267,276,2.407,277,2.358,278,2.416,279,2.113,280,2.508,281,1.422,282,3.64,283,1.697,284,2.475,285,3.483,286,2.113,287,2.113,288,2.344,289,2.214,290,2.113,291,2.113,292,1.687,293,2.113,294,2.113,295,2.756,296,1.407,297,1.422,298,1.422,299,2.113,300,2.113,301,2.113,302,2.113,303,2.113,304,2.113,305,2.508,306,1.697,307,2.113,308,2.113,309,2.113,310,1.608,311,0.936,312,2.508,313,2.508,314,0.936,315,2.508,316,1.444,317,1.608,318,0.936,319,1.608,320,0.936,321,2.508,322,2.113,323,0.936,324,0.936,325,2.013,326,1.608,327,0.936,328,1.608,329,0.936,330,1.608,331,1.608,332,1.608,333,1.608,334,1.608,335,0.936,336,2.796,337,1.608,338,1.608,339,1.608,340,2.508,341,0.936,342,3.64,343,0.936,344,0.936,345,0.936,346,1.291,347,0.936,348,1.444,349,0.936,350,0.936,351,1.608,352,0.936,353,1.608,354,1.608,355,2.649,356,0.936,357,1.082,358,0.936,359,2.508,360,1.608,361,1.608,362,0.936,363,1.608,364,1.053,365,2.508,366,0.936,367,0.936,368,1.291,369,0.936,370,0.936,371,0.936,372,0.936,373,0.936,374,0.751,375,1.608,376,0.936,377,0.936,378,0.936,379,0.936,380,0.936,381,0.936,382,1.608,383,1.608,384,0.936,385,0.936,386,0.751,387,0.936,388,0.936,389,0.936,390,0.63,391,0.751,392,0.936,393,0.936,394,0.936,395,0.801,396,0.466,397,0.751,398,0.751,399,0.751,400,0.751,401,1.291,402,0.751,403,0.936,404,0.936,405,0.936,406,0.936,407,0.936,408,0.936,409,0.936,410,0.936,411,0.936,412,0.936,413,0.936,414,0.936,415,0.936,416,0.936,417,1.608,418,0.936,419,1.608,420,0.936,421,1.608,422,1.608,423,0.936,424,1.608,425,0.936,426,0.936,427,0.936,428,1.608,429,0.936,430,1.608,431,0.936,432,0.936,433,0.936,434,0.936,435,0.63,436,0.936,437,0.936,438,0.63,439,0.936,440,0.936,441,0.936,442,0.936,443,0.936,444,0.936,445,0.936,446,0.936,447,0.936,448,1.291,449,0.936,450,0.936,451,2.113,452,1.608,453,0.936,454,0.936,455,2.113,456,0.936,457,2.113,458,0.539,459,0.936,460,0.936,461,0.936,462,0.936,463,0.936,464,1.608,465,0.936,466,0.936,467,0.936,468,1.608,469,0.936,470,1.608,471,0.936,472,0.936,473,0.936,474,0.936,475,0.936,476,0.751,477,0.936,478,0.936,479,0.936,480,1.608,481,0.936,482,0.936,483,0.936,484,0.936,485,0.936,486,1.608,487,0.936,488,0.936,489,0.936,490,0.63,491,0.936,492,2.113,493,0.936,494,0.936,495,0.936,496,0.936,497,0.466,498,0.936,499,0.936,500,0.936,501,0.936,502,0.936,503,1.608,504,0.936,505,0.936,506,0.751]],["title/interfaces/MapDB.html",[507,0.898,508,1.566]],["body/interfaces/MapDB.html",[3,0.394,4,0.394,7,0.335,10,0.394,22,0.229,23,0.921,25,0.699,32,1.603,35,0.92,41,0.055,43,0.666,79,1.124,82,0.459,88,0.394,89,0.53,90,0.92,97,1.624,99,1.674,103,1.272,111,1.866,127,1.45,132,0.027,133,0.027,148,1,156,1.834,158,1.242,159,0.92,201,1.237,205,1.605,214,1.605,227,1.935,248,2.187,252,2.471,265,0.92,267,1.605,268,1.242,269,1.063,270,1.935,276,2.528,278,1.674,281,2.519,288,1.876,289,2.387,292,2.519,295,3.223,296,1.674,297,1.242,298,1.242,316,1.063,364,1.389,390,1.242,395,0.92,396,0.92,435,1.242,438,2.705,458,1.935,490,1.242,497,1.866,507,0.609,508,1.605,509,1.063,510,1.063,511,2.238,512,3.112,513,2.238,514,2.697,515,3.393,516,3.744,517,3.005,518,2.238,519,3.393,520,2.697,521,2.238,522,3.005,523,2.697,524,2.697,525,2.238,526,1.904,527,2.238,528,2.238,529,2.238,530,2.238,531,2.238,532,2.238,533,1.481,534,1.389,535,1.481,536,2.697,537,1.481,538,1.063,539,3.005,540,1.605,541,1.935,542,1.063,543,1.242,544,1.063,545,1.242,546,1.063,547,1.605,548,2.697,549,2.238,550,1.242,551,1.481,552,1.481,553,1.481,554,1.481,555,2.238,556,1.481,557,2.697,558,2.238,559,1.481,560,1.481,561,1.481,562,1.481,563,1.481,564,1.481,565,1.481,566,3.005,567,2.238,568,1.242,569,1.481,570,1.481,571,1.481,572,1.481,573,2.238,574,2.697,575,1.481,576,2.697,577,1.481,578,3.005,579,1.481,580,2.238,581,1.481,582,2.238,583,2.238,584,2.238,585,1.481,586,1.481,587,1.481,588,2.238,589,3.005,590,1.481,591,1.481,592,1.481,593,1.481,594,1.481,595,1.481,596,1.481,597,1.242,598,1.242,599,1.481,600,1.481,601,1.481,602,1.481,603,1.481,604,1.481,605,1.481,606,1.481,607,1.242,608,1.481,609,1.481,610,1.481,611,1.481,612,1.481,613,1.481,614,1.481,615,1.481,616,1.481,617,1.481,618,1.481,619,1.481,620,1.481,621,1.481]],["title/injectables/MapService.html",[265,1.355,534,1.355]],["body/injectables/MapService.html",[3,0.373,4,0.373,7,0.317,10,0.694,22,0.217,23,0.883,24,1.16,25,1.23,28,1.332,32,1.661,35,1.619,38,1.409,40,1.16,41,0.055,42,0.768,43,0.493,55,0.758,79,1.105,82,0.434,88,0.373,89,0.502,90,0.87,97,1.579,99,1.619,103,1.23,111,1.814,127,1.504,132,0.026,133,0.026,148,1.071,155,0.87,156,1.702,158,2.186,159,1.332,201,0.883,205,1.006,214,2.096,227,1.87,248,2.062,252,2.488,265,1.332,267,2.096,268,1.799,269,1.006,270,2.383,276,2.259,278,1.332,281,1.799,288,2.784,289,2.389,292,2.186,295,3.064,296,1.619,297,1.175,298,1.799,316,1.006,364,1.332,390,1.175,395,0.87,396,0.87,435,1.799,438,2.64,458,2.096,490,1.175,497,1.619,507,0.577,508,1.006,510,1.006,511,1.402,512,2.784,513,1.402,514,2.146,515,2.146,517,2.922,518,1.402,519,2.608,520,2.608,521,1.402,522,2.146,523,2.608,524,2.608,525,1.402,526,1.702,527,1.402,528,1.402,529,2.922,530,2.146,531,2.146,532,2.146,533,1.402,534,1.332,535,1.402,536,3.149,537,1.402,538,1.006,539,3.149,540,1.539,541,2.259,542,1.006,543,1.175,544,1.006,545,1.175,546,1.006,547,1.539,548,3.322,549,2.922,550,1.799,551,2.146,552,2.146,553,1.402,554,1.402,555,2.922,556,2.146,557,3.149,558,2.146,559,1.402,560,1.402,561,1.402,562,1.402,563,2.146,564,2.146,565,2.146,566,3.322,567,2.608,568,1.799,569,2.608,570,2.608,571,2.146,572,1.402,573,2.146,574,2.608,575,1.402,576,2.608,577,1.402,578,2.922,579,1.402,580,2.146,581,1.402,582,2.146,583,2.146,584,2.146,585,1.402,586,1.402,587,1.402,588,2.146,589,2.922,590,1.402,591,1.402,592,1.402,593,1.402,594,1.402,595,1.402,596,1.402,597,1.175,598,1.175,599,1.402,600,1.402,601,1.402,602,1.402,603,1.402,604,1.402,605,1.402,606,1.402,607,1.175,608,1.402,609,1.402,610,1.402,611,1.402,612,1.402,613,1.402,614,1.402,615,1.402,616,1.402,617,1.402,618,1.402,619,1.402,620,1.402,621,1.402,622,1.746,623,1.746,624,2.673,625,1.746,626,1.746,627,1.402]],["title/interfaces/ShapeData.html",[507,0.898,526,1.18]],["body/interfaces/ShapeData.html",[3,0.733,4,0.733,7,0.623,10,0.733,22,0.426,23,1.415,25,1.3,32,1.663,41,0.054,42,1.406,43,0.806,79,0.854,88,1.045,132,0.042,133,0.042,148,1.321,155,1.711,201,1.134,248,2.136,269,2.468,270,2.468,276,2.817,278,2.136,348,2.468,391,2.756,395,2.509,396,2.438,397,2.756,507,1.134,509,1.977,526,2.027,607,3.292,628,2.31,629,2.31,630,4.285,631,4.285]],["title/interfaces/WisdomInterface.html",[507,0.898,632,1.83]],["body/interfaces/WisdomInterface.html",[0,1.319,3,0.695,4,0.695,7,0.591,10,0.695,11,2.386,22,0.404,23,1.369,41,0.054,42,0.936,43,0.728,88,0.695,132,0.04,133,0.04,148,1.26,179,2.625,181,1.978,205,2.386,275,3.326,277,2.625,283,3.326,284,3.326,289,2.391,306,3.326,476,4.066,507,1.506,509,1.875,632,3.067,633,2.613,634,4.143,635,3.255,636,3.255,637,2.788,638,3.255,639,3.255,640,3.255,641,4.798,642,5.065,643,5.065,644,4.798,645,4.143,646,4.143,647,4.143,648,4.143]],["title/modules/WisdomModule.html",[179,1.566,649,1.566]],["body/modules/WisdomModule.html",[3,0.707,4,0.707,7,0.6,41,0.054,79,1.265,82,0.823,84,2.226,85,2.226,88,0.707,89,0.951,121,1.776,122,1.435,126,1.776,129,1.545,132,0.041,133,0.041,180,2.574,181,1.435,182,2.086,186,2.411,187,1.905,188,2.226,191,3.36,192,3.36,195,3.36,197,2.656,199,2.226,649,3.121,650,2.656,651,2.656,652,2.656,653,3.308,654,3.308,655,3.308,656,3.308,657,3.308,658,3.308,659,4.186]],["title/coverage.html",[660,2.956]],["body/coverage.html",[0,1.164,1,1.005,7,0.552,8,2.443,9,2.669,41,0.054,43,0.462,86,1.752,103,1.152,114,3.409,117,1.005,121,1.005,124,1.005,126,1.005,129,0.874,132,0.039,133,0.039,134,2.443,135,2.443,151,2.418,198,2.443,199,2.047,200,2.443,228,2.443,240,2.047,265,1.516,357,2.047,448,4.207,507,1.458,508,1.752,510,2.794,526,1.32,534,1.516,538,1.752,540,2.694,541,1.752,542,1.752,544,1.752,546,1.752,547,1.752,628,2.047,629,2.047,632,2.047,633,2.443,660,2.443,661,3.043,662,3.043,663,3.043,664,3.043,665,3.043,666,3.967,667,3.967,668,3.755,669,3.185,670,5.138,671,4.975,672,2.443,673,2.443,674,2.443,675,2.443,676,2.443,677,3.043,678,2.443,679,2.443,680,5.067,681,3.043,682,3.043,683,3.043,684,3.043,685,3.043,686,3.043,687,3.043,688,2.669,689,2.443,690,2.443,691,3.544,692,2.443,693,2.443,694,3.043,695,3.043]],["title/dependencies.html",[182,1.626,696,2.286]],["body/dependencies.html",[41,0.052,82,1.04,132,0.047,133,0.047,182,2.404,194,3.357,697,4.181,698,4.181,699,4.181,700,4.823]],["title/miscellaneous/enumerations.html",[701,0.755,702,2.619]],["body/miscellaneous/enumerations.html",[22,0.505,41,0.052,132,0.046,133,0.046,156,2.247,252,2.366,374,3.81,386,3.81,688,2.736,701,1.343,702,3.265,703,3.265,704,4.746,705,4.746]],["title/miscellaneous/functions.html",[701,0.755,706,2.619]],["body/miscellaneous/functions.html",[10,0.874,22,0.396,24,2.137,32,1.054,37,2.753,40,2.137,41,0.053,42,1.415,43,0.747,44,3.314,55,2.186,86,2.356,127,1.352,132,0.04,133,0.04,148,1.185,151,1.591,201,1.054,214,1.838,252,2.251,267,2.601,277,2.356,296,1.591,325,2.562,364,2.554,368,2.562,627,2.562,637,2.753,688,2.148,689,3.285,690,3.285,691,2.562,692,3.285,693,3.285,701,1.054,703,3.285,706,2.562,707,4.516,708,3.191,709,3.191,710,3.191,711,3.191,712,3.191,713,3.191,714,3.191,715,3.191,716,3.191,717,3.191,718,3.191,719,3.191,720,3.191,721,3.191,722,3.191,723,3.191,724,4.091,725,4.516,726,3.191,727,3.191,728,3.191,729,3.191,730,3.191,731,3.191,732,3.191,733,3.191,734,3.191,735,2.562,736,3.191,737,3.191,738,3.191,739,3.191]],["title/index.html",[22,0.338,740,2.183]],["body/index.html",[1,1.723,2,1.726,41,0.053,117,1.144,121,1.723,124,1.723,126,1.723,129,1.499,132,0.042,133,0.042,180,2.695,181,1.502,182,2.147,183,2.78,184,2.78,185,2.78,186,2.481,187,1.994,188,2.33,497,2.147,509,1.994,534,1.726,649,3.114,650,2.78,651,2.78,652,2.78,740,2.78,741,3.462,742,3.462,743,3.462]],["title/modules.html",[181,1.598]],["body/modules.html",[41,0.047,132,0.047,133,0.047,180,2.089,181,1.819,649,2.414,744,4.831,745,4.831,746,4.831,747,4.831]],["title/miscellaneous/typealiases.html",[701,0.755,748,3.263]],["body/miscellaneous/typealiases.html",[22,0.476,32,1.515,41,0.045,43,0.771,81,1.665,132,0.045,133,0.045,148,0.955,201,1.515,240,2.582,247,3.682,248,2.286,277,2.21,278,2.286,289,1.912,348,2.641,355,3.682,395,2.286,396,2.533,398,3.08,399,3.08,400,3.08,401,3.08,402,3.08,526,1.665,628,2.582,629,3.301,701,1.268,749,3.837,750,4.586,751,4.905]],["title/miscellaneous/variables.html",[701,0.755,752,2.619]],["body/miscellaneous/variables.html",[22,0.321,33,2.947,41,0.054,43,0.665,56,1.288,97,1.543,103,1.739,122,1.121,127,1.175,132,0.035,133,0.035,141,2.075,148,1.011,151,1.772,155,2.468,156,2.149,159,2.183,178,1.739,201,1.568,213,3.264,245,3.264,258,2.855,296,1.288,316,2.048,336,3.516,346,2.075,348,2.341,357,3.09,364,1.288,458,2.522,497,1.288,506,3.516,510,1.488,512,1.739,538,2.048,540,2.522,541,2.341,542,2.048,543,1.739,544,2.048,545,1.739,546,2.048,547,2.048,550,1.739,568,1.739,597,1.739,598,2.393,637,1.739,668,3.516,669,3.516,672,3.264,673,2.855,674,2.855,675,2.855,676,2.855,678,2.075,679,2.855,701,0.854,735,2.075,752,2.075,753,4.066,754,2.585,755,4.38,756,3.556,757,3.556,758,2.585,759,2.585,760,2.585,761,2.585,762,2.585,763,2.585,764,2.585,765,2.585,766,2.585,767,3.556,768,2.585,769,3.556,770,2.585,771,2.585,772,4.066,773,2.585,774,3.556,775,2.585,776,3.556,777,2.585,778,3.556,779,2.585,780,2.585,781,2.585,782,2.585,783,2.585,784,2.585,785,2.585,786,2.585,787,2.585,788,4.953,789,4.38,790,2.585,791,2.585,792,2.585,793,2.585,794,2.585,795,2.585,796,2.585,797,2.585,798,2.585]]],"invertedIndex":[["",{"_index":41,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":114,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"coverage.html":{}}}],["0/1",{"_index":680,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":497,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["1/1",{"_index":671,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":682,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":448,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["13.2.0",{"_index":700,"title":{},"body":{"dependencies.html":{}}}],["1f5aec",{"_index":317,"title":{},"body":{"components/MapComponent.html":{}}}],["2",{"_index":741,"title":{},"body":{"index.html":{}}}],["2.3.0",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":677,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":681,"title":{},"body":{"coverage.html":{}}}],["22/25",{"_index":684,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":743,"title":{},"body":{"index.html":{}}}],["3/3",{"_index":687,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":686,"title":{},"body":{"coverage.html":{}}}],["39;01&#39",{"_index":382,"title":{},"body":{"components/MapComponent.html":{}}}],["39;034030000000&#39",{"_index":383,"title":{},"body":{"components/MapComponent.html":{}}}],["39;all",{"_index":373,"title":{},"body":{"components/MapComponent.html":{}}}],["39;only",{"_index":378,"title":{},"body":{"components/MapComponent.html":{}}}],["39;show",{"_index":385,"title":{},"body":{"components/MapComponent.html":{}}}],["4",{"_index":742,"title":{},"body":{"index.html":{}}}],["5/5",{"_index":664,"title":{},"body":{"coverage.html":{}}}],["500px",{"_index":340,"title":{},"body":{"components/MapComponent.html":{}}}],["53.1434501",{"_index":333,"title":{},"body":{"components/MapComponent.html":{}}}],["6/6",{"_index":665,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":365,"title":{},"body":{"components/MapComponent.html":{}}}],["7/9",{"_index":667,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":685,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":666,"title":{},"body":{"coverage.html":{}}}],["8.2145521",{"_index":334,"title":{},"body":{"components/MapComponent.html":{}}}],["88",{"_index":683,"title":{},"body":{"coverage.html":{}}}],["a0a0a0",{"_index":786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accessors",{"_index":34,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["active",{"_index":142,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["actual_component",{"_index":131,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["actually",{"_index":286,"title":{},"body":{"components/MapComponent.html":{}}}],["adds",{"_index":210,"title":{},"body":{"components/IonIconComponent.html":{}}}],["administration",{"_index":705,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["afterviewinit",{"_index":16,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["alias",{"_index":398,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":749,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allow",{"_index":207,"title":{},"body":{"components/IonIconComponent.html":{}}}],["already",{"_index":520,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["angular",{"_index":216,"title":{},"body":{"components/IonIconComponent.html":{}}}],["angular/common",{"_index":194,"title":{},"body":{"modules/ChartModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":533,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["angular/core",{"_index":82,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"modules/WisdomModule.html":{},"dependencies.html":{}}}],["any).options.padding",{"_index":447,"title":{},"body":{"components/MapComponent.html":{}}}],["api",{"_index":541,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["api_url",{"_index":544,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["application/json",{"_index":599,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["arg0",{"_index":758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":281,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["array.from(this.selectedshapes[layerkey",{"_index":504,"title":{},"body":{"components/MapComponent.html":{}}}],["async",{"_index":569,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["asynchronously",{"_index":563,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["attention",{"_index":300,"title":{},"body":{"components/MapComponent.html":{}}}],["await",{"_index":438,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["back",{"_index":612,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["bar",{"_index":12,"title":{},"body":{"components/BarChartComponent.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["barchartcomponent",{"_index":1,"title":{"components/BarChartComponent.html":{}},"body":{"components/BarChartComponent.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"coverage.html":{},"index.html":{}}}],["base",{"_index":672,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["behaviorsubject",{"_index":342,"title":{},"body":{"components/MapComponent.html":{}}}],["beware",{"_index":733,"title":{},"body":{"miscellaneous/functions.html":{}}}],["boolean",{"_index":158,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["browse",{"_index":747,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":744,"title":{},"body":{"modules.html":{}}}],["bulma",{"_index":138,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["bulma/bulma",{"_index":654,"title":{},"body":{"modules/WisdomModule.html":{}}}],["bulmaistoggleabledirective",{"_index":129,"title":{"directives/BulmaIsToggleableDirective.html":{}},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["button",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["button.style.backgroundimage",{"_index":777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cache",{"_index":568,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["cache.ts",{"_index":674,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cached",{"_index":517,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cachedkeys",{"_index":578,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["call",{"_index":61,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["callback",{"_index":757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["causing",{"_index":731,"title":{},"body":{"miscellaneous/functions.html":{}}}],["center",{"_index":245,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["centercontent",{"_index":767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["changed",{"_index":60,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["changes",{"_index":63,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chart",{"_index":20,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chart'},{'name",{"_index":120,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["chart(ctx",{"_index":104,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chart.component",{"_index":196,"title":{},"body":{"modules/ChartModule.html":{}}}],["chart.component.ts",{"_index":9,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"coverage.html":{}}}],["chart.component.ts:19",{"_index":39,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart.component.ts:20",{"_index":229,"title":{},"body":{"components/LineChartComponent.html":{}}}],["chart.component.ts:24",{"_index":70,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart.component.ts:25",{"_index":235,"title":{},"body":{"components/LineChartComponent.html":{}}}],["chart.component.ts:27",{"_index":46,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart.component.ts:28",{"_index":230,"title":{},"body":{"components/LineChartComponent.html":{}}}],["chart.component.ts:30",{"_index":48,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart.component.ts:31",{"_index":231,"title":{},"body":{"components/LineChartComponent.html":{}}}],["chart.component.ts:33",{"_index":76,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart.component.ts:34",{"_index":237,"title":{},"body":{"components/LineChartComponent.html":{}}}],["chart.component.ts:37",{"_index":74,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart.component.ts:38",{"_index":236,"title":{},"body":{"components/LineChartComponent.html":{}}}],["chart.component.ts:40",{"_index":65,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart.component.ts:41",{"_index":234,"title":{},"body":{"components/LineChartComponent.html":{}}}],["chart.component.ts:43",{"_index":50,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart.component.ts:44",{"_index":232,"title":{},"body":{"components/LineChartComponent.html":{}}}],["chart.component.ts:61",{"_index":59,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart.component.ts:62",{"_index":233,"title":{},"body":{"components/LineChartComponent.html":{}}}],["chart.js",{"_index":14,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chart.js/auto",{"_index":83,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chart/chart.module",{"_index":656,"title":{},"body":{"modules/WisdomModule.html":{}}}],["chartdata",{"_index":45,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chartelement",{"_index":26,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["chartmodule",{"_index":180,"title":{"modules/ChartModule.html":{}},"body":{"modules/ChartModule.html":{},"modules/WisdomModule.html":{},"index.html":{},"modules.html":{}}}],["chartoptions",{"_index":73,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["charts",{"_index":13,"title":{},"body":{"components/BarChartComponent.html":{},"modules/ChartModule.html":{}}}],["check",{"_index":577,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["class",{"_index":89,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"modules/WisdomModule.html":{}}}],["classes",{"_index":143,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["classes.trim().split(/\\s",{"_index":172,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["clear",{"_index":454,"title":{},"body":{"components/MapComponent.html":{}}}],["click",{"_index":146,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["clicked",{"_index":153,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["clicking",{"_index":139,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["client",{"_index":556,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["cluster_chartmodule",{"_index":183,"title":{},"body":{"modules/ChartModule.html":{},"index.html":{}}}],["cluster_chartmodule_declarations",{"_index":185,"title":{},"body":{"modules/ChartModule.html":{},"index.html":{}}}],["cluster_chartmodule_exports",{"_index":184,"title":{},"body":{"modules/ChartModule.html":{},"index.html":{}}}],["cluster_wisdommodule",{"_index":650,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["cluster_wisdommodule_declarations",{"_index":651,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["cluster_wisdommodule_exports",{"_index":652,"title":{},"body":{"modules/WisdomModule.html":{},"index.html":{}}}],["code",{"_index":313,"title":{},"body":{"components/MapComponent.html":{}}}],["color",{"_index":467,"title":{},"body":{"components/MapComponent.html":{}}}],["commonmodule",{"_index":193,"title":{},"body":{"modules/ChartModule.html":{}}}],["complaining",{"_index":221,"title":{},"body":{"components/IonIconComponent.html":{}}}],["component",{"_index":0,"title":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["component_template",{"_index":119,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"index.html":{}}}],["config",{"_index":401,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["const",{"_index":99,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["constructor",{"_index":35,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["constructor(http",{"_index":623,"title":{},"body":{"injectables/MapService.html":{}}}],["constructor(private",{"_index":90,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["constructor(service",{"_index":264,"title":{},"body":{"components/MapComponent.html":{}}}],["constructor(translate",{"_index":36,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["container",{"_index":506,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["container.addeventlistener(\"click",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["containing",{"_index":190,"title":{},"body":{"modules/ChartModule.html":{}}}],["content",{"_index":598,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":602,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["context/use",{"_index":540,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["control",{"_index":357,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["coordinates",{"_index":272,"title":{},"body":{"components/MapComponent.html":{}}}],["correct",{"_index":218,"title":{},"body":{"components/IonIconComponent.html":{}}}],["coverage",{"_index":660,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":53,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["ctx",{"_index":100,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["currently",{"_index":161,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{}}}],["d35a0c",{"_index":310,"title":{},"body":{"components/MapComponent.html":{}}}],["data",{"_index":32,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["data.ts",{"_index":629,"title":{},"body":{"interfaces/ShapeData.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["datasets",{"_index":106,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["db",{"_index":512,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["db.createobjectstore(\"queries",{"_index":561,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db.createobjectstore(\"shapes",{"_index":562,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["db_name",{"_index":546,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbschema",{"_index":514,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["declarations",{"_index":191,"title":{},"body":{"modules/ChartModule.html":{},"modules/WisdomModule.html":{}}}],["decorators",{"_index":68,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["default",{"_index":155,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":336,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":38,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["dependencies",{"_index":182,"title":{"dependencies.html":{}},"body":{"modules/ChartModule.html":{},"modules/WisdomModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":10,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{}}}],["determine",{"_index":789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["digit",{"_index":711,"title":{},"body":{"miscellaneous/functions.html":{}}}],["direction",{"_index":474,"title":{},"body":{"components/MapComponent.html":{}}}],["directive",{"_index":117,"title":{"directives/BulmaIsToggleableDirective.html":{}},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"coverage.html":{},"index.html":{}}}],["directives",{"_index":128,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["directly",{"_index":290,"title":{},"body":{"components/MapComponent.html":{}}}],["display",{"_index":47,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["displayed",{"_index":275,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["displaying",{"_index":11,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["displaylayer",{"_index":457,"title":{},"body":{"components/MapComponent.html":{}}}],["displayname",{"_index":428,"title":{},"body":{"components/MapComponent.html":{}}}],["district",{"_index":386,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/enumerations.html":{}}}],["div",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["docs",{"_index":305,"title":{},"body":{"components/MapComponent.html":{}}}],["documentation",{"_index":661,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["dot",{"_index":714,"title":{},"body":{"miscellaneous/functions.html":{}}}],["element",{"_index":72,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["elementclasses",{"_index":147,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["elementclasses(classes",{"_index":170,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["elementref",{"_index":67,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["elements",{"_index":360,"title":{},"body":{"components/MapComponent.html":{}}}],["emit",{"_index":326,"title":{},"body":{"components/MapComponent.html":{}}}],["emitselection",{"_index":256,"title":{},"body":{"components/MapComponent.html":{}}}],["emitted",{"_index":279,"title":{},"body":{"components/MapComponent.html":{}}}],["empty",{"_index":297,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["end",{"_index":712,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enforce",{"_index":399,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["entry",{"_index":644,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["entrycomponent",{"_index":641,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["enum",{"_index":354,"title":{},"body":{"components/MapComponent.html":{}}}],["enumerations",{"_index":702,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["eventemitter",{"_index":322,"title":{},"body":{"components/MapComponent.html":{}}}],["everything",{"_index":298,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["exactly",{"_index":380,"title":{},"body":{"components/MapComponent.html":{}}}],["example",{"_index":368,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["executed",{"_index":152,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["export",{"_index":88,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["exported",{"_index":639,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["exports",{"_index":192,"title":{},"body":{"modules/ChartModule.html":{},"modules/WisdomModule.html":{}}}],["extends",{"_index":513,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["extension",{"_index":781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":159,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["feature",{"_index":470,"title":{},"body":{"components/MapComponent.html":{}}}],["feature.properties.key",{"_index":477,"title":{},"body":{"components/MapComponent.html":{}}}],["fetch",{"_index":548,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetched",{"_index":435,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetched[layerkey",{"_index":437,"title":{},"body":{"components/MapComponent.html":{}}}],["fetching",{"_index":605,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetchlayerdata",{"_index":570,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["fetchlayerdata(resolution",{"_index":625,"title":{},"body":{"injectables/MapService.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{}}}],["find",{"_index":222,"title":{},"body":{"components/IonIconComponent.html":{}}}],["firstvaluefrom",{"_index":537,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["firstvaluefrom(this.http.get(`${api_url",{"_index":596,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["flex",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["following",{"_index":283,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["force",{"_index":566,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["full_res",{"_index":372,"title":{},"body":{"components/MapComponent.html":{}}}],["function",{"_index":151,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":706,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":66,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["geo",{"_index":270,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["geodata",{"_index":545,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["geojson",{"_index":395,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/typealiases.html":{}}}],["geojsonlayer",{"_index":464,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonlayer.adddata(object.assign(shape.geojson",{"_index":488,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonlayer.addto(map",{"_index":491,"title":{},"body":{"components/MapComponent.html":{}}}],["geojsonobject",{"_index":396,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/typealiases.html":{}}}],["getelementclasses",{"_index":162,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["getoptions",{"_index":75,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["give",{"_index":299,"title":{},"body":{"components/MapComponent.html":{}}}],["given",{"_index":296,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["gt",{"_index":719,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gt;&lt;/map&gt",{"_index":389,"title":{},"body":{"components/MapComponent.html":{}}}],["headers",{"_index":597,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["height",{"_index":246,"title":{},"body":{"components/MapComponent.html":{}}}],["height=&quot;70vh&quot",{"_index":370,"title":{},"body":{"components/MapComponent.html":{}}}],["here",{"_index":209,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["hex",{"_index":312,"title":{},"body":{"components/MapComponent.html":{}}}],["holds",{"_index":359,"title":{},"body":{"components/MapComponent.html":{}}}],["host",{"_index":71,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{}}}],["hostbinding",{"_index":165,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostbinding(\"class",{"_index":168,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener",{"_index":166,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener(\"click",{"_index":173,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlistener('click",{"_index":154,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["hostlisteners",{"_index":145,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["html",{"_index":116,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["http",{"_index":539,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpclient",{"_index":529,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpcontext",{"_index":530,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpcontexttoken",{"_index":788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpheaders",{"_index":531,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["httpparams",{"_index":532,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["https://ionic.io/ionicons",{"_index":226,"title":{},"body":{"components/IonIconComponent.html":{}}}],["https://tile.openstreetmap.org/{z}/{x}/{y}.png",{"_index":361,"title":{},"body":{"components/MapComponent.html":{}}}],["https://wisdom04.vlba.uni",{"_index":307,"title":{},"body":{"components/MapComponent.html":{}}}],["icon",{"_index":213,"title":{},"body":{"components/IonIconComponent.html":{},"miscellaneous/variables.html":{}}}],["icon'},{'name",{"_index":123,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["icon.component",{"_index":657,"title":{},"body":{"modules/WisdomModule.html":{}}}],["icon.component.ts",{"_index":200,"title":{},"body":{"components/IonIconComponent.html":{},"coverage.html":{}}}],["icon.component.ts:22",{"_index":215,"title":{},"body":{"components/IonIconComponent.html":{}}}],["icon.setattribute(\"name",{"_index":780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon.setattribute(\"size",{"_index":783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon.style.color",{"_index":785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon.style.pointerevents",{"_index":779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icon/ion",{"_index":199,"title":{},"body":{"components/IonIconComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{}}}],["icons",{"_index":203,"title":{},"body":{"components/IonIconComponent.html":{}}}],["idb",{"_index":536,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["idb.get(\"queries",{"_index":579,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["idb.transaction(\"shapes",{"_index":581,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["idb.transaction([\"queries",{"_index":613,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["identifier",{"_index":662,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":518,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["ignore",{"_index":567,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["implement",{"_index":287,"title":{},"body":{"components/MapComponent.html":{}}}],["implementing",{"_index":638,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["implements",{"_index":15,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["import",{"_index":79,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"modules/WisdomModule.html":{}}}],["imports",{"_index":197,"title":{},"body":{"modules/ChartModule.html":{},"modules/WisdomModule.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexed",{"_index":525,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["indexeddb",{"_index":549,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["init",{"_index":330,"title":{},"body":{"components/MapComponent.html":{}}}],["initialize",{"_index":764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initialized",{"_index":52,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["inject",{"_index":202,"title":{},"body":{"components/IonIconComponent.html":{}}}],["injectable",{"_index":534,"title":{"injectables/MapService.html":{}},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":622,"title":{},"body":{"injectables/MapService.html":{}}}],["injected",{"_index":471,"title":{},"body":{"components/MapComponent.html":{}}}],["inner",{"_index":332,"title":{},"body":{"components/MapComponent.html":{}}}],["input",{"_index":81,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["input(\"center",{"_index":408,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"class",{"_index":167,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["input(\"data",{"_index":92,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["input(\"height",{"_index":404,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"layers",{"_index":414,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"options",{"_index":93,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["input(\"selectedcolor",{"_index":413,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"tileurl",{"_index":406,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"unselectedcolor",{"_index":412,"title":{},"body":{"components/MapComponent.html":{}}}],["input(\"zoom",{"_index":410,"title":{},"body":{"components/MapComponent.html":{}}}],["inputcenter",{"_index":409,"title":{},"body":{"components/MapComponent.html":{}}}],["inputheight",{"_index":405,"title":{},"body":{"components/MapComponent.html":{}}}],["inputlayers",{"_index":263,"title":{},"body":{"components/MapComponent.html":{}}}],["inputlayers(layerconfig",{"_index":415,"title":{},"body":{"components/MapComponent.html":{}}}],["inputs",{"_index":31,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["inputtileurl",{"_index":407,"title":{},"body":{"components/MapComponent.html":{}}}],["inputzoom",{"_index":411,"title":{},"body":{"components/MapComponent.html":{}}}],["instant",{"_index":729,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interact",{"_index":268,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["interface",{"_index":507,"title":{"interfaces/MapDB.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{}},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":509,"title":{},"body":{"interfaces/MapDB.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"index.html":{}}}],["internally",{"_index":325,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["intersection",{"_index":293,"title":{},"body":{"components/MapComponent.html":{}}}],["invert",{"_index":394,"title":{},"body":{"components/MapComponent.html":{}}}],["invertselection",{"_index":756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invertselection(options",{"_index":787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invertselectioncontrol",{"_index":455,"title":{},"body":{"components/MapComponent.html":{}}}],["invertselectioncontrol.addto(map",{"_index":502,"title":{},"body":{"components/MapComponent.html":{}}}],["ion",{"_index":122,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"miscellaneous/variables.html":{}}}],["ioniconcomponent",{"_index":121,"title":{"components/IonIconComponent.html":{}},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["ionicons",{"_index":204,"title":{},"body":{"components/IonIconComponent.html":{}}}],["isactive",{"_index":144,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["items",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iterate",{"_index":734,"title":{},"body":{"miscellaneous/functions.html":{}}}],["join",{"_index":178,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["js",{"_index":212,"title":{},"body":{"components/IonIconComponent.html":{}}}],["json",{"_index":601,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["justify",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["k",{"_index":595,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["k.split",{"_index":434,"title":{},"body":{"components/MapComponent.html":{}}}],["k.substring(0",{"_index":594,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["key",{"_index":276,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["key[0",{"_index":521,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keys",{"_index":289,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/typealiases.html":{}}}],["keys.length",{"_index":591,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keys.map(k",{"_index":593,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["keys?.map(k",{"_index":433,"title":{},"body":{"components/MapComponent.html":{}}}],["l",{"_index":391,"title":{},"body":{"components/MapComponent.html":{},"interfaces/ShapeData.html":{}}}],["l.control.extend",{"_index":761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.control.layers",{"_index":452,"title":{},"body":{"components/MapComponent.html":{}}}],["l.controloptions",{"_index":760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.domutil.create",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.geojson(undefined",{"_index":465,"title":{},"body":{"components/MapComponent.html":{}}}],["l.layer",{"_index":461,"title":{},"body":{"components/MapComponent.html":{}}}],["l.map",{"_index":346,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["l.map(nativemapelement",{"_index":442,"title":{},"body":{"components/MapComponent.html":{}}}],["l.path",{"_index":478,"title":{},"body":{"components/MapComponent.html":{}}}],["l.tilelayer(this.tileurl).addto(map",{"_index":449,"title":{},"body":{"components/MapComponent.html":{}}}],["l.util.setoptions(this",{"_index":765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["large",{"_index":784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["later",{"_index":472,"title":{},"body":{"components/MapComponent.html":{}}}],["latitude",{"_index":338,"title":{},"body":{"components/MapComponent.html":{}}}],["layer",{"_index":278,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/typealiases.html":{}}}],["layer.bindtooltip(feature.properties.name",{"_index":473,"title":{},"body":{"components/MapComponent.html":{}}}],["layer.fire(\"click",{"_index":501,"title":{},"body":{"components/MapComponent.html":{}}}],["layer.on(\"click",{"_index":475,"title":{},"body":{"components/MapComponent.html":{}}}],["layerconfig",{"_index":247,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["layerdata",{"_index":248,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/typealiases.html":{}}}],["layerkey",{"_index":355,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["layername",{"_index":503,"title":{},"body":{"components/MapComponent.html":{}}}],["layernames",{"_index":249,"title":{},"body":{"components/MapComponent.html":{}}}],["layers",{"_index":258,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["layers.push(layer",{"_index":487,"title":{},"body":{"components/MapComponent.html":{}}}],["layers]=&quot",{"_index":371,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol",{"_index":451,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.addbaselayer(geojsonlayer",{"_index":493,"title":{},"body":{"components/MapComponent.html":{}}}],["layerscontrol.addto(map",{"_index":498,"title":{},"body":{"components/MapComponent.html":{}}}],["lazily",{"_index":552,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["leaflet",{"_index":348,"title":{},"body":{"components/MapComponent.html":{},"interfaces/ShapeData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":115,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["length",{"_index":737,"title":{},"body":{"miscellaneous/functions.html":{}}}],["level",{"_index":321,"title":{},"body":{"components/MapComponent.html":{}}}],["line",{"_index":125,"title":{},"body":{"components/BarChartComponent.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["linechartcomponent",{"_index":124,"title":{"components/LineChartComponent.html":{}},"body":{"components/BarChartComponent.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"coverage.html":{},"index.html":{}}}],["link",{"_index":227,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["literal",{"_index":516,"title":{},"body":{"interfaces/MapDB.html":{}}}],["loader",{"_index":543,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["loader.ts",{"_index":676,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["loading",{"_index":797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["longer",{"_index":796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["longitude",{"_index":337,"title":{},"body":{"components/MapComponent.html":{}}}],["look",{"_index":565,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["lt;map",{"_index":369,"title":{},"body":{"components/MapComponent.html":{}}}],["lx",{"_index":393,"title":{},"body":{"components/MapComponent.html":{}}}],["lx.control.invertselection",{"_index":500,"title":{},"body":{"components/MapComponent.html":{}}}],["made",{"_index":64,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["make",{"_index":453,"title":{},"body":{"components/MapComponent.html":{}}}],["making",{"_index":136,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["map",{"_index":127,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["map(rawshape",{"_index":606,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["map(str",{"_index":444,"title":{},"body":{"components/MapComponent.html":{}}}],["map.component.css",{"_index":244,"title":{},"body":{"components/MapComponent.html":{}}}],["map.getrenderer(map",{"_index":446,"title":{},"body":{"components/MapComponent.html":{}}}],["map.on(\"baselayerchange",{"_index":495,"title":{},"body":{"components/MapComponent.html":{}}}],["map.removecontrol(invertselectioncontrol",{"_index":499,"title":{},"body":{"components/MapComponent.html":{}}}],["map.removecontrol(layerscontrol",{"_index":460,"title":{},"body":{"components/MapComponent.html":{}}}],["map.service",{"_index":392,"title":{},"body":{"components/MapComponent.html":{}}}],["map/map.component",{"_index":658,"title":{},"body":{"modules/WisdomModule.html":{}}}],["mapcomponent",{"_index":126,"title":{"components/MapComponent.html":{}},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"index.html":{}}}],["mapcomponent.inputlayers",{"_index":402,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["mapdb",{"_index":508,"title":{"interfaces/MapDB.html":{}},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{}}}],["mapelement",{"_index":250,"title":{},"body":{"components/MapComponent.html":{}}}],["maps",{"_index":241,"title":{},"body":{"components/MapComponent.html":{}}}],["mapservice",{"_index":265,"title":{"injectables/MapService.html":{}},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{}}}],["matching",{"_index":133,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["meaning",{"_index":400,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["metadata",{"_index":18,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["method",{"_index":730,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methods",{"_index":28,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{}}}],["miscellaneous",{"_index":701,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mixed",{"_index":384,"title":{},"body":{"components/MapComponent.html":{}}}],["module",{"_index":179,"title":{"modules/ChartModule.html":{},"modules/WisdomModule.html":{}},"body":{"modules/ChartModule.html":{},"interfaces/WisdomInterface.html":{}}}],["modules",{"_index":181,"title":{"modules.html":{}},"body":{"modules/ChartModule.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"index.html":{},"modules.html":{}}}],["mouseevent",{"_index":759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["municipal",{"_index":374,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/enumerations.html":{}}}],["name",{"_index":42,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{}}}],["names",{"_index":223,"title":{},"body":{"components/IonIconComponent.html":{}}}],["namespace",{"_index":648,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["nativemapelement",{"_index":440,"title":{},"body":{"components/MapComponent.html":{}}}],["necessary",{"_index":219,"title":{},"body":{"components/IonIconComponent.html":{}}}],["needed",{"_index":217,"title":{},"body":{"components/IonIconComponent.html":{}}}],["needs",{"_index":301,"title":{},"body":{"components/MapComponent.html":{}}}],["new",{"_index":103,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ngafterviewinit",{"_index":29,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["ngmodule",{"_index":195,"title":{},"body":{"modules/ChartModule.html":{},"modules/WisdomModule.html":{}}}],["ngonchanges",{"_index":30,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["ngonchanges(changes",{"_index":57,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["ngoninit",{"_index":257,"title":{},"body":{"components/MapComponent.html":{}}}],["ngx",{"_index":84,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"modules/WisdomModule.html":{}}}],["node",{"_index":140,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["none",{"_index":778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["null",{"_index":288,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["num",{"_index":715,"title":{},"body":{"miscellaneous/functions.html":{}}}],["number",{"_index":364,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nutskey",{"_index":607,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["o",{"_index":78,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["obj",{"_index":724,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":637,"title":{},"body":{"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.entries(config",{"_index":429,"title":{},"body":{"components/MapComponent.html":{}}}],["object.entries(layerdata",{"_index":462,"title":{},"body":{"components/MapComponent.html":{}}}],["object.entries(requests",{"_index":436,"title":{},"body":{"components/MapComponent.html":{}}}],["object.keys(layerdata).length",{"_index":496,"title":{},"body":{"components/MapComponent.html":{}}}],["official",{"_index":224,"title":{},"body":{"components/IonIconComponent.html":{}}}],["oldenburg",{"_index":339,"title":{},"body":{"components/MapComponent.html":{}}}],["oldenburg.de/repos/service",{"_index":308,"title":{},"body":{"components/MapComponent.html":{}}}],["onadd",{"_index":766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onchanges",{"_index":17,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["one",{"_index":302,"title":{},"body":{"components/MapComponent.html":{}}}],["oneachfeature",{"_index":469,"title":{},"body":{"components/MapComponent.html":{}}}],["oninit",{"_index":242,"title":{},"body":{"components/MapComponent.html":{}}}],["only_keys",{"_index":377,"title":{},"body":{"components/MapComponent.html":{}}}],["opendb",{"_index":535,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["opendb(db_name",{"_index":559,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations",{"_index":584,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(querystore.put(shapekeys",{"_index":621,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(shapestore.put(shape",{"_index":617,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(store.get(key).then(shape",{"_index":585,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["operations.push(tx.done",{"_index":587,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["optional",{"_index":24,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":33,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"miscellaneous/variables.html":{}}}],["options(o",{"_index":95,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["osm",{"_index":363,"title":{},"body":{"components/MapComponent.html":{}}}],["out",{"_index":188,"title":{},"body":{"modules/ChartModule.html":{},"modules/WisdomModule.html":{},"index.html":{}}}],["output",{"_index":238,"title":{},"body":{"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["outputs",{"_index":261,"title":{},"body":{"components/MapComponent.html":{}}}],["overview",{"_index":740,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":696,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":111,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["parameters",{"_index":40,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{}}}],["parameters[0",{"_index":397,"title":{},"body":{"components/MapComponent.html":{},"interfaces/ShapeData.html":{}}}],["params",{"_index":589,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["params.appendall({key",{"_index":592,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["params.set(\"resolution",{"_index":590,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["parsefloat(str",{"_index":445,"title":{},"body":{"components/MapComponent.html":{}}}],["parseint(this.inputzoom",{"_index":425,"title":{},"body":{"components/MapComponent.html":{}}}],["passed",{"_index":49,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["path",{"_index":476,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["path.bringtoback",{"_index":481,"title":{},"body":{"components/MapComponent.html":{}}}],["path.bringtofront",{"_index":484,"title":{},"body":{"components/MapComponent.html":{}}}],["path.setstyle({color",{"_index":480,"title":{},"body":{"components/MapComponent.html":{}}}],["peer",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["position",{"_index":762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prepare",{"_index":572,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["presentation",{"_index":709,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pretty",{"_index":716,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prettyprintnum",{"_index":692,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["prettyprintnum(12345678",{"_index":718,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prettyprintnum(num",{"_index":708,"title":{},"body":{"miscellaneous/functions.html":{}}}],["print",{"_index":717,"title":{},"body":{"miscellaneous/functions.html":{}}}],["private",{"_index":25,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["promise",{"_index":571,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["promise.all(operations",{"_index":588,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["properly",{"_index":303,"title":{},"body":{"components/MapComponent.html":{}}}],["properties",{"_index":23,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{}}}],["provide",{"_index":635,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["providedin",{"_index":553,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["provides",{"_index":646,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["puzzle",{"_index":782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queries",{"_index":515,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["query",{"_index":519,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["querykey",{"_index":576,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["querystore",{"_index":619,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["quot",{"_index":388,"title":{},"body":{"components/MapComponent.html":{}}}],["quot;12.345.678&quot",{"_index":720,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rawoptions",{"_index":27,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["rawshape",{"_index":610,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawshape.geojson",{"_index":609,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rawshape.nuts_key",{"_index":608,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["readonly",{"_index":555,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["readwrite",{"_index":614,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["received",{"_index":631,"title":{},"body":{"interfaces/ShapeData.html":{}}}],["reconstruct",{"_index":528,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["record",{"_index":277,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["reexport",{"_index":353,"title":{},"body":{"components/MapComponent.html":{}}}],["ref",{"_index":351,"title":{},"body":{"components/MapComponent.html":{}}}],["render",{"_index":54,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{}}}],["renders",{"_index":328,"title":{},"body":{"components/MapComponent.html":{}}}],["represent",{"_index":630,"title":{},"body":{"interfaces/ShapeData.html":{}}}],["represents",{"_index":522,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["request",{"_index":557,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["requested",{"_index":611,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["requests",{"_index":427,"title":{},"body":{"components/MapComponent.html":{}}}],["requests[layerkey",{"_index":431,"title":{},"body":{"components/MapComponent.html":{}}}],["required",{"_index":645,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["res",{"_index":739,"title":{},"body":{"miscellaneous/functions.html":{}}}],["reset",{"_index":187,"title":{},"body":{"modules/ChartModule.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"index.html":{}}}],["resolution",{"_index":252,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["resolution&#39",{"_index":375,"title":{},"body":{"components/MapComponent.html":{}}}],["resolution.district",{"_index":387,"title":{},"body":{"components/MapComponent.html":{}}}],["resolution.municipal",{"_index":376,"title":{},"body":{"components/MapComponent.html":{}}}],["resolution.tokeylength(resolution",{"_index":575,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["resolutionnum",{"_index":574,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["resolving",{"_index":294,"title":{},"body":{"components/MapComponent.html":{}}}],["respond",{"_index":304,"title":{},"body":{"components/MapComponent.html":{}}}],["responsetype",{"_index":600,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rest",{"_index":523,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["rest/main/api/get",{"_index":309,"title":{},"body":{"components/MapComponent.html":{}}}],["results",{"_index":132,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":551,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["return",{"_index":97,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":524,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["returns",{"_index":55,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{}}}],["root",{"_index":554,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["run",{"_index":792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":390,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["schema",{"_index":511,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["schema_v",{"_index":547,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["scopes",{"_index":642,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["see",{"_index":306,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["select",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["selected",{"_index":262,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedcolor",{"_index":259,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedlayer",{"_index":253,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes",{"_index":254,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes.add(key",{"_index":485,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes.delete(key",{"_index":482,"title":{},"body":{"components/MapComponent.html":{}}}],["selectedshapes.has(key",{"_index":479,"title":{},"body":{"components/MapComponent.html":{}}}],["selection",{"_index":280,"title":{},"body":{"components/MapComponent.html":{}}}],["selection.ts",{"_index":679,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selector",{"_index":19,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["sent",{"_index":790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["separated",{"_index":713,"title":{},"body":{"miscellaneous/functions.html":{}}}],["server",{"_index":269,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{}}}],["service",{"_index":267,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":94,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["set(use_api_url",{"_index":603,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["set(use_loader",{"_index":604,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["setelementclasses(classes",{"_index":163,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["setinputlayers(layerconfig",{"_index":367,"title":{},"body":{"components/MapComponent.html":{}}}],["setoptions(o",{"_index":77,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["sets",{"_index":331,"title":{},"body":{"components/MapComponent.html":{}}}],["settimeout",{"_index":113,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["shape",{"_index":292,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shape.key",{"_index":490,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shape.name",{"_index":489,"title":{},"body":{"components/MapComponent.html":{}}}],["shapedata",{"_index":526,"title":{"interfaces/ShapeData.html":{}},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["shapekeys",{"_index":616,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapekeys.push(shape.key",{"_index":618,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapes",{"_index":295,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapes.push(shape",{"_index":586,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["shapestore",{"_index":615,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["show",{"_index":379,"title":{},"body":{"components/MapComponent.html":{}}}],["shown",{"_index":791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["simplechanges",{"_index":58,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["simply",{"_index":527,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"modules/ChartModule.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"modules/WisdomModule.html":{}}}],["split",{"_index":443,"title":{},"body":{"components/MapComponent.html":{}}}],["split(\"is",{"_index":177,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["src/.../invert",{"_index":754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../layer",{"_index":750,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../map.component.ts",{"_index":751,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../map.service.ts",{"_index":753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../resolution.ts",{"_index":703,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../use",{"_index":755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../util.ts",{"_index":707,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/bulma/bulma",{"_index":134,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"coverage.html":{}}}],["src/lib/chart/bar",{"_index":8,"title":{},"body":{"components/BarChartComponent.html":{},"coverage.html":{}}}],["src/lib/chart/chart.module.ts",{"_index":189,"title":{},"body":{"modules/ChartModule.html":{}}}],["src/lib/chart/line",{"_index":228,"title":{},"body":{"components/LineChartComponent.html":{},"coverage.html":{}}}],["src/lib/http",{"_index":668,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/ion",{"_index":198,"title":{},"body":{"components/IonIconComponent.html":{},"coverage.html":{}}}],["src/lib/map/invert",{"_index":678,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/map/layer",{"_index":628,"title":{},"body":{"interfaces/ShapeData.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/map/map.component.ts",{"_index":240,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/map/map.component.ts:125",{"_index":274,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:128",{"_index":343,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:129",{"_index":344,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:130",{"_index":345,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:133",{"_index":347,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:140",{"_index":358,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:146",{"_index":356,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:149",{"_index":323,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:153",{"_index":266,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:164",{"_index":329,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:194",{"_index":327,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:284",{"_index":324,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:50",{"_index":352,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:53",{"_index":350,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:56",{"_index":273,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:58",{"_index":341,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:61",{"_index":314,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:63",{"_index":362,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:66",{"_index":271,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:68",{"_index":335,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:71",{"_index":320,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:73",{"_index":366,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:76",{"_index":318,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.component.ts:78",{"_index":311,"title":{},"body":{"components/MapComponent.html":{}}}],["src/lib/map/map.service.ts",{"_index":510,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/map/map.service.ts:62",{"_index":624,"title":{},"body":{"injectables/MapService.html":{}}}],["src/lib/map/map.service.ts:85",{"_index":626,"title":{},"body":{"injectables/MapService.html":{}}}],["src/lib/map/resolution.ts",{"_index":688,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/lib/util.ts",{"_index":691,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/wisdom.module.ts",{"_index":653,"title":{},"body":{"modules/WisdomModule.html":{}}}],["src/wisdominterface.ts",{"_index":633,"title":{},"body":{"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["state",{"_index":704,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statements",{"_index":663,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":251,"title":{},"body":{"components/MapComponent.html":{}}}],["stops",{"_index":220,"title":{},"body":{"components/IonIconComponent.html":{}}}],["store",{"_index":582,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["stored",{"_index":564,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["str",{"_index":722,"title":{},"body":{"miscellaneous/functions.html":{}}}],["string",{"_index":148,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":727,"title":{},"body":{"miscellaneous/functions.html":{}}}],["stringtocolor",{"_index":693,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stringtocolor(str",{"_index":721,"title":{},"body":{"miscellaneous/functions.html":{}}}],["style",{"_index":466,"title":{},"body":{"components/MapComponent.html":{}}}],["styles",{"_index":239,"title":{},"body":{"components/MapComponent.html":{}}}],["styleurls",{"_index":243,"title":{},"body":{"components/MapComponent.html":{}}}],["such",{"_index":636,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["support",{"_index":745,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":746,"title":{},"body":{"modules.html":{}}}],["sync",{"_index":732,"title":{},"body":{"miscellaneous/functions.html":{}}}],["t",{"_index":725,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":695,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":21,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["therefore",{"_index":550,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["these&#39",{"_index":381,"title":{},"body":{"components/MapComponent.html":{}}}],["things",{"_index":137,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["third",{"_index":710,"title":{},"body":{"miscellaneous/functions.html":{}}}],["this.center",{"_index":422,"title":{},"body":{"components/MapComponent.html":{}}}],["this.chart",{"_index":102,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["this.chart!.options",{"_index":109,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["this.chart!.update",{"_index":110,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["this.chart.data",{"_index":112,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["this.chartelement.nativeelement.getcontext(\"2d",{"_index":101,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["this.classes",{"_index":171,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.classes.join",{"_index":169,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.classes.push(\"is",{"_index":175,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.data",{"_index":105,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["this.elementclasses",{"_index":176,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.emitselection",{"_index":486,"title":{},"body":{"components/MapComponent.html":{}}}],["this.height",{"_index":418,"title":{},"body":{"components/MapComponent.html":{}}}],["this.idb",{"_index":558,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["this.inputcenter",{"_index":421,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputheight",{"_index":417,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputtileurl",{"_index":419,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputzoom",{"_index":423,"title":{},"body":{"components/MapComponent.html":{}}}],["this.isactive",{"_index":174,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["this.layerconfig.next(layerconfig",{"_index":416,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerconfig.subscribe(async",{"_index":426,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerdata.next(fetched",{"_index":439,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layerdata.subscribe(layerdata",{"_index":456,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layernames[key",{"_index":494,"title":{},"body":{"components/MapComponent.html":{}}}],["this.layernames[layerkey",{"_index":430,"title":{},"body":{"components/MapComponent.html":{}}}],["this.map",{"_index":450,"title":{},"body":{"components/MapComponent.html":{}}}],["this.mapelement.nativeelement",{"_index":441,"title":{},"body":{"components/MapComponent.html":{}}}],["this.options",{"_index":107,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["this.rawoptions",{"_index":96,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["this.selected.emit",{"_index":505,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedcolor",{"_index":483,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedlayer",{"_index":492,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedshapes",{"_index":459,"title":{},"body":{"components/MapComponent.html":{}}}],["this.selectedshapes[key",{"_index":463,"title":{},"body":{"components/MapComponent.html":{}}}],["this.service.fetchlayerdata",{"_index":432,"title":{},"body":{"components/MapComponent.html":{}}}],["this.tileurl",{"_index":420,"title":{},"body":{"components/MapComponent.html":{}}}],["this.translate.onlangchange.subscribe",{"_index":108,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["this.unselectedcolor",{"_index":468,"title":{},"body":{"components/MapComponent.html":{}}}],["this.zoom",{"_index":424,"title":{},"body":{"components/MapComponent.html":{}}}],["through",{"_index":735,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["tile",{"_index":315,"title":{},"body":{"components/MapComponent.html":{}}}],["tileurl",{"_index":255,"title":{},"body":{"components/MapComponent.html":{}}}],["times",{"_index":798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todo",{"_index":285,"title":{},"body":{"components/MapComponent.html":{}}}],["toenum",{"_index":689,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["toenum(length",{"_index":736,"title":{},"body":{"miscellaneous/functions.html":{}}}],["toggle",{"_index":141,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"miscellaneous/variables.html":{}}}],["toggleable",{"_index":130,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["toggleable.directive",{"_index":655,"title":{},"body":{"modules/WisdomModule.html":{}}}],["toggleable.directive.ts",{"_index":135,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"coverage.html":{}}}],["toggleable.directive.ts:20",{"_index":160,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:22",{"_index":157,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:27",{"_index":149,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:31",{"_index":164,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["toggleable.directive.ts:41",{"_index":150,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{}}}],["tokeylength",{"_index":690,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tokeylength(res",{"_index":738,"title":{},"body":{"miscellaneous/functions.html":{}}}],["top",{"_index":647,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["topright",{"_index":763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["translate",{"_index":44,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"miscellaneous/functions.html":{}}}],["translate/core",{"_index":85,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"modules/WisdomModule.html":{}}}],["translated",{"_index":794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["translatemodule",{"_index":659,"title":{},"body":{"modules/WisdomModule.html":{}}}],["translateobject",{"_index":86,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["translateobject(service",{"_index":723,"title":{},"body":{"miscellaneous/functions.html":{}}}],["translateobject(this.translate",{"_index":98,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["translateservice",{"_index":37,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"miscellaneous/functions.html":{}}}],["translation",{"_index":284,"title":{},"body":{"components/MapComponent.html":{},"interfaces/WisdomInterface.html":{}}}],["translations",{"_index":643,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["translator",{"_index":793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["trimmedkeys",{"_index":573,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["true",{"_index":458,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":697,"title":{},"body":{"dependencies.html":{}}}],["tx",{"_index":580,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["tx.objectstore(\"queries",{"_index":620,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["tx.objectstore(\"shapes",{"_index":583,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["type",{"_index":43,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"interfaces/WisdomInterface.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":748,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["undefined",{"_index":214,"title":{},"body":{"components/IonIconComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/functions.html":{}}}],["under",{"_index":640,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["unselected",{"_index":319,"title":{},"body":{"components/MapComponent.html":{}}}],["unselectedcolor",{"_index":260,"title":{},"body":{"components/MapComponent.html":{}}}],["update",{"_index":62,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["upgrade(db",{"_index":560,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{}}}],["url",{"_index":316,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/variables.html":{}}}],["url.ts",{"_index":669,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["use",{"_index":208,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["use_api_url",{"_index":538,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_base_url",{"_index":673,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_cache",{"_index":675,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["use_loader",{"_index":542,"title":{},"body":{"interfaces/MapDB.html":{},"injectables/MapService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":201,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/ShapeData.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uses",{"_index":205,"title":{},"body":{"components/IonIconComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"interfaces/WisdomInterface.html":{}}}],["using",{"_index":728,"title":{},"body":{"miscellaneous/functions.html":{}}}],["util",{"_index":87,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["utility",{"_index":726,"title":{},"body":{"miscellaneous/functions.html":{}}}],["value",{"_index":156,"title":{},"body":{"directives/BulmaIsToggleableDirective.html":{},"components/MapComponent.html":{},"interfaces/MapDB.html":{},"injectables/MapService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":282,"title":{},"body":{"components/MapComponent.html":{}}}],["var",{"_index":118,"title":{},"body":{"components/BarChartComponent.html":{},"components/IonIconComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["variable",{"_index":670,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":752,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["via",{"_index":211,"title":{},"body":{"components/IonIconComponent.html":{},"components/MapComponent.html":{}}}],["view",{"_index":51,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["viewchild",{"_index":80,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{}}}],["viewchild(\"chart",{"_index":91,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["viewchild(\"map",{"_index":403,"title":{},"body":{"components/MapComponent.html":{}}}],["viewchild('chart",{"_index":69,"title":{},"body":{"components/BarChartComponent.html":{},"components/LineChartComponent.html":{}}}],["viewchild('map",{"_index":349,"title":{},"body":{"components/MapComponent.html":{}}}],["void",{"_index":56,"title":{},"body":{"components/BarChartComponent.html":{},"directives/BulmaIsToggleableDirective.html":{},"components/LineChartComponent.html":{},"components/MapComponent.html":{},"miscellaneous/variables.html":{}}}],["webcomponents",{"_index":206,"title":{},"body":{"components/IonIconComponent.html":{}}}],["website",{"_index":225,"title":{},"body":{"components/IonIconComponent.html":{}}}],["wisdom",{"_index":634,"title":{},"body":{"interfaces/WisdomInterface.html":{}}}],["wisdominterface",{"_index":632,"title":{"interfaces/WisdomInterface.html":{}},"body":{"interfaces/WisdomInterface.html":{},"coverage.html":{}}}],["wisdommodule",{"_index":649,"title":{"modules/WisdomModule.html":{}},"body":{"modules/WisdomModule.html":{},"index.html":{},"modules.html":{}}}],["without",{"_index":291,"title":{},"body":{"components/MapComponent.html":{}}}],["yes",{"_index":627,"title":{},"body":{"injectables/MapService.html":{},"miscellaneous/functions.html":{}}}],["zoom",{"_index":186,"title":{},"body":{"modules/ChartModule.html":{},"components/MapComponent.html":{},"modules/WisdomModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/BarChartComponent.html":{"url":"components/BarChartComponent.html","title":"component - BarChartComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BarChartComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/chart/bar-chart.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component for displaying bar charts with chart.js\n\n    \n\n\n    \n        Implements\n    \n    \n                    AfterViewInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                bar-chart\n            \n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                chart\n                            \n                            \n                                    Private\n                                chartElement\n                            \n                            \n                                    Private\n                                    Optional\n                                rawOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                options\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    options\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(translate: TranslateService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/chart/bar-chart.component.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :     ChartData\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/chart/bar-chart.component.ts:27\n                            \n                        \n                \n                    \n                        The data to display with the chart.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                        \n                            \n                                    Defined in src/lib/chart/bar-chart.component.ts:30\n                            \n                        \n                \n                    \n                        Options passed to the chart.\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/chart/bar-chart.component.ts:43\n                \n            \n\n\n            \n                \n                    After the view is initialized this will create the chart and render it.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/chart/bar-chart.component.ts:61\n                \n            \n\n\n            \n                \n                    When the data is changed on the chart, it will call an update.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Changes made to the chart\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        chart\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Chart\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/chart/bar-chart.component.ts:40\n                        \n                    \n\n            \n                \n                    The chart generated by chart.js.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        chartElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('chart')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/chart/bar-chart.component.ts:24\n                        \n                    \n\n            \n                \n                    The host element of the chart.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        rawOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChartOptions\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/chart/bar-chart.component.ts:37\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/chart/bar-chart.component.ts:33\n                                \n                            \n\n                \n                    \n                        setoptions(o: ChartOptions)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/chart/bar-chart.component.ts:30\n                                \n                            \n                    \n                        \n                                Options passed to the chart.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            o\n                                                    \n                                                            \n                                                                        ChartOptions\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n  OnChanges,\n  SimpleChanges,\n  ViewChild,\n  Component,\n  AfterViewInit,\n  Input,\n  ElementRef\n} from \"@angular/core\";\nimport Chart, {ChartData, ChartOptions} from \"chart.js/auto\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {translateObject} from \"../util\";\n\n/** Component for displaying bar charts with chart.js */\n@Component({\n  selector: \"bar-chart\",\n  template: \"\"\n})\nexport class BarChartComponent implements AfterViewInit, OnChanges {\n\n  constructor(private translate: TranslateService) {}\n\n  /** The host element of the chart. */\n  @ViewChild(\"chart\") private chartElement!: ElementRef;\n\n  /** The data to display with the chart. */\n  @Input(\"data\") data?: ChartData;\n\n  /** Options passed to the chart. */\n  @Input(\"options\") set options(o: ChartOptions) {\n    this.rawOptions = o;\n  };\n  get options(): ChartOptions {\n    if (!this.rawOptions) return {};\n    return translateObject(this.translate, this.rawOptions);\n  }\n  private rawOptions?: ChartOptions;\n\n  /** The chart generated by chart.js. */\n  chart?: Chart;\n\n  /** After the view is initialized this will create the chart and render it. */\n  ngAfterViewInit(): void {\n    const ctx = this.chartElement.nativeElement.getContext(\"2d\")!;\n    this.chart = new Chart(ctx, {\n      type: \"bar\",\n      data: this.data ?? {datasets: []},\n      options: this.options\n    });\n    this.translate.onLangChange.subscribe(() => {\n      if (!this.options) return;\n      this.chart!.options = this.options;\n      this.chart!.update();\n    });\n  }\n\n  /**\n   * When the data is changed on the chart, it will call an update.\n   * @param changes Changes made to the chart\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.data && this.chart) {\n      this.chart.data = this.data;\n      setTimeout(() => this.chart!.update(), 0);\n    }\n  }\n\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'BarChartComponent', 'selector': 'bar-chart'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'LineChartComponent', 'selector': 'line-chart'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'BarChartComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/BulmaIsToggleableDirective.html":{"url":"directives/BulmaIsToggleableDirective.html","title":"directive - BulmaIsToggleableDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  BulmaIsToggleableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/bulma/bulma-is-toggleable.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Directive for making things toggleable with bulma.\nClicking on the node that has this directive will toggle the \"is-active\"\nclass.\n\n            \n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        .is-toggleable\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                classes\n                            \n                            \n                                    Private\n                                isActive\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toggle\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    elementClasses\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        class\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:27\n                            \n                        \n                \n                    \n                        The classes of the host node.\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:41\n                \n            \n\n\n            \n                \n                    Function to be executed when the host is clicked.\nWill toggle the \"is-active\" class on the host node.\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toggle\n                        \n                    \n                \n            \n            \n                \ntoggle()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click')\n                \n            \n\n            \n                \n                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:41\n                \n            \n\n\n            \n                \n                    Function to be executed when the host is clicked.\nWill toggle the \"is-active\" class on the host node.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        classes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:22\n                        \n                    \n\n            \n                \n                    The classes of the host node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:20\n                        \n                    \n\n            \n                \n                    Is the host currently active.\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        elementClasses\n                    \n                \n\n                \n                    \n                        getelementClasses()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:27\n                                \n                            \n                    \n                        \n                                The classes of the host node.\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        setelementClasses(classes: string)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/bulma/bulma-is-toggleable.directive.ts:31\n                                \n                            \n                    \n                        \n                                Set the classes of the host node.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            classes\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import {\n  HostBinding,\n  Directive,\n  Input,\n  HostListener\n} from \"@angular/core\";\n\n/**\n * Directive for making things toggleable with bulma.\n *\n * Clicking on the node that has this directive will toggle the \"is-active\"\n * class.\n */\n@Directive({\n  selector: \".is-toggleable\"\n})\nexport class BulmaIsToggleableDirective {\n\n  /** Is the host currently active. */\n  private isActive: boolean = false;\n  /** The classes of the host node. */\n  private classes: string[] = [];\n\n  /** The classes of the host node. */\n  @Input(\"class\")\n  @HostBinding(\"class\")\n  get elementClasses(): string {\n    return this.classes.join(\" \");\n  }\n  /** Set the classes of the host node. */\n  set elementClasses(classes: string) {\n    this.classes = classes.trim().split(/\\s+/);\n  }\n\n  /**\n   * Function to be executed when the host is clicked.\n   *\n   * Will toggle the \"is-active\" class on the host node.\n   */\n  @HostListener(\"click\")\n  toggle() {\n    this.isActive = !this.isActive;\n    if (this.isActive) this.classes.push(\"is-active\")\n    else {\n      this.elementClasses = this.elementClasses\n        .split(\"is-active\")\n        .join(\"\");\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChartModule.html":{"url":"modules/ChartModule.html","title":"module - ChartModule","body":"\n                   \n\n\n\n\n    Modules\n    ChartModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ChartModule\n\n\n\ncluster_ChartModule_exports\n\n\n\ncluster_ChartModule_declarations\n\n\n\n\nBarChartComponent\n\nBarChartComponent\n\n\n\nChartModule\n\nChartModule\n\nChartModule -->\n\nBarChartComponent->ChartModule\n\n\n\n\n\nLineChartComponent\n\nLineChartComponent\n\nChartModule -->\n\nLineChartComponent->ChartModule\n\n\n\n\n\nBarChartComponent \n\nBarChartComponent \n\nBarChartComponent  -->\n\nChartModule->BarChartComponent \n\n\n\n\n\nLineChartComponent \n\nLineChartComponent \n\nLineChartComponent  -->\n\nChartModule->LineChartComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/chart/chart.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module containing the charts.\n\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BarChartComponent\n                        \n                        \n                            LineChartComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BarChartComponent\n                        \n                        \n                            LineChartComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\n\nimport {BarChartComponent} from \"./bar-chart.component\";\nimport {LineChartComponent} from \"./line-chart.component\";\n\n/** Module containing the charts. */\n@NgModule({\n  declarations: [\n    BarChartComponent,\n    LineChartComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    BarChartComponent,\n    LineChartComponent\n  ]\n})\nexport class ChartModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/IonIconComponent.html":{"url":"components/IonIconComponent.html","title":"component - IonIconComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  IonIconComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/ion-icon/ion-icon.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component is used to inject the icons from IonIcons.\nIonIcons uses WebComponents to display the icons.\nTo allow to use them here, this component adds the icons via js.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ion-icon\n            \n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ion-icon/ion-icon.component.ts:22\n                            \n                        \n                \n                    \n                        The name of the icon.\nIs not used by angular but needed to render the correct icon and necessary\nso that angular stops complaining.\nYou can find the names at the official website\nhttps://ionic.io/ionicons.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import {Component, Input} from \"@angular/core\";\n\n/**\n * This component is used to inject the icons from IonIcons.\n * IonIcons uses WebComponents to display the icons.\n * To allow to use them here, this component adds the icons via js.\n */\n@Component({\n  selector: \"ion-icon\",\n  template: \"\"\n})\nexport class IonIconComponent {\n\n  /**\n   * The name of the icon.\n   * Is not used by angular but needed to render the correct icon and necessary\n   * so that angular stops complaining.\n   *\n   * You can find the names at the official website\n   * {@link https://ionic.io/ionicons}.\n   */\n  @Input() name: string | undefined;\n\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'BarChartComponent', 'selector': 'bar-chart'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'LineChartComponent', 'selector': 'line-chart'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'IonIconComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LineChartComponent.html":{"url":"components/LineChartComponent.html","title":"component - LineChartComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LineChartComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/chart/line-chart.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component for displaying bar line with chart.js\n\n    \n\n\n    \n        Implements\n    \n    \n                    AfterViewInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                line-chart\n            \n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                chart\n                            \n                            \n                                    Private\n                                chartElement\n                            \n                            \n                                    Private\n                                    Optional\n                                rawOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                options\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    options\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(translate: TranslateService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/chart/line-chart.component.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :     ChartData\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/chart/line-chart.component.ts:28\n                            \n                        \n                \n                    \n                        The data to display with the chart.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                        \n                            \n                                    Defined in src/lib/chart/line-chart.component.ts:31\n                            \n                        \n                \n                    \n                        Options passed to the chart.\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/chart/line-chart.component.ts:44\n                \n            \n\n\n            \n                \n                    After the view is initialized this will create the chart and render it.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/chart/line-chart.component.ts:62\n                \n            \n\n\n            \n                \n                    When the data is changed on the chart, it will call an update.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Changes made to the chart\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        chart\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Chart\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/chart/line-chart.component.ts:41\n                        \n                    \n\n            \n                \n                    The chart generated by chart.js.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        chartElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('chart')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/chart/line-chart.component.ts:25\n                        \n                    \n\n            \n                \n                    The host element of the chart.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        rawOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChartOptions\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/chart/line-chart.component.ts:38\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/chart/line-chart.component.ts:34\n                                \n                            \n\n                \n                    \n                        setoptions(o: ChartOptions)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/chart/line-chart.component.ts:31\n                                \n                            \n                    \n                        \n                                Options passed to the chart.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            o\n                                                    \n                                                            \n                                                                        ChartOptions\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n  OnChanges,\n  SimpleChanges,\n  ViewChild,\n  Component,\n  AfterViewInit,\n  Input,\n  Output,\n  ElementRef\n} from \"@angular/core\";\nimport Chart, {ChartData, ChartOptions} from \"chart.js/auto\";\nimport {translateObject} from \"../util\";\nimport {TranslateService} from \"@ngx-translate/core\";\n\n/** Component for displaying bar line with chart.js */\n@Component({\n  selector: \"line-chart\",\n  template: \"\"\n})\nexport class LineChartComponent implements AfterViewInit, OnChanges {\n\n  constructor(private translate: TranslateService) {}\n\n  /** The host element of the chart. */\n  @ViewChild(\"chart\") private chartElement!: ElementRef;\n\n  /** The data to display with the chart. */\n  @Input(\"data\") data?: ChartData;\n\n  /** Options passed to the chart. */\n  @Input(\"options\") set options(o: ChartOptions) {\n    this.rawOptions = o;\n  };\n  get options(): ChartOptions {\n    if (!this.rawOptions) return {};\n    return translateObject(this.translate, this.rawOptions);\n  }\n  private rawOptions?: ChartOptions;\n\n  /** The chart generated by chart.js. */\n  chart?: Chart;\n\n  /** After the view is initialized this will create the chart and render it. */\n  ngAfterViewInit(): void {\n    const ctx = this.chartElement.nativeElement.getContext(\"2d\")!;\n    this.chart = new Chart(ctx, {\n      type: \"line\",\n      data: this.data ?? {datasets: []},\n      options: this.options\n    });\n    this.translate.onLangChange.subscribe(() => {\n      if (!this.options) return;\n      this.chart!.options = this.options;\n      this.chart!.update();\n    });\n  }\n\n  /**\n   * When the data is changed on the chart, it will call an update.\n   * @param changes Changes made to the chart\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.data && this.chart) {\n      this.chart.data = this.data;\n      setTimeout(() => this.chart!.update(), 0);\n    }\n  }\n\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'BarChartComponent', 'selector': 'bar-chart'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'LineChartComponent', 'selector': 'line-chart'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'LineChartComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MapComponent.html":{"url":"components/MapComponent.html","title":"component - MapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/map/map.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component for displaying maps.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                map\n            \n\n            \n                styleUrls\n                ./map.component.css\n            \n\n\n            \n                template\n                \n  \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                center\n                            \n                            \n                                height\n                            \n                            \n                                    Private\n                                layerConfig\n                            \n                            \n                                    Private\n                                layerData\n                            \n                            \n                                    Private\n                                layerNames\n                            \n                            \n                                    Optional\n                                map\n                            \n                            \n                                    Private\n                                mapElement\n                            \n                            \n                                    Static\n                                Resolution\n                            \n                            \n                                    Private\n                                    Optional\n                                selectedLayer\n                            \n                            \n                                    Private\n                                selectedShapes\n                            \n                            \n                                tileUrl\n                            \n                            \n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                emitSelection\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                center\n                            \n                            \n                                height\n                            \n                            \n                                layers\n                            \n                            \n                                selectedColor\n                            \n                            \n                                tileUrl\n                            \n                            \n                                unselectedColor\n                            \n                            \n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                selected\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    inputLayers\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: MapService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/map/map.component.ts:153\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        MapService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to interact with the server for geo data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        center\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:66\n                            \n                        \n                \n                    \n                        Input for the center coordinates of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:56\n                            \n                        \n                \n                    \n                        Input for the height of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        layers\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:125\n                            \n                        \n                \n                    \n                        Input for the layers that should be displayed.\nThe key of the record is layer key and is also emitted on the selection.\nThe value of the record is an array and the values of that should be the\nfollowing:\n\n  \n    The name of the layer, this will be only used to display a name of\n    the layer (may also be a translation key).\n    // TODO: actually implement translation here\n  \n  \n    This should be the resolution to display the layer at, this may also\nbe\n    null to display the keys directly without any shape intersection\n    resolving.\n  \n  \n    These should be the keys used to display the shapes from.\n    If the given keys are empty or null, this will display everything from\n    the give resolution.\n  \n\n\nAttention: The service needs at least one of the resolution or the\nkeys\nto properly respond.\n// TODO: update link when geo data docs update\nSee https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#d35a0c\"\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:78\n                            \n                        \n                \n                    \n                        Input for a hex code selected shapes.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        tileUrl\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:61\n                            \n                        \n                \n                    \n                        Input for the tile url of the map.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        unselectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#1f5aec\"\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:76\n                            \n                        \n                \n                    \n                        Input for a hex code for unselected shapes.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        zoom\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:71\n                            \n                        \n                \n                    \n                        Input for the map zoom level.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        selected\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/map/map.component.ts:149\n                            \n                        \n                \n                    \n                        Outputs the currently selected shapes.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        emitSelection\n                        \n                    \n                \n            \n            \n                \n                    \n                    emitSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:284\n                \n            \n\n\n            \n                \n                    Internally used function to emit the currently selected shapes via the\nselected output.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:194\n                \n            \n\n\n            \n                \n                    Renders the map with the given input values.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.component.ts:164\n                \n            \n\n\n            \n                \n                    While init this sets the input values to the inner, private values.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        center\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"53.1434501, 8.2145521\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:68\n                        \n                    \n\n            \n                \n                    Center of the map, defaults to longitude and latitude of Oldenburg.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"500px\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:58\n                        \n                    \n\n            \n                \n                    Height of map, defaults to 500px.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        layerConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject({})\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        layerData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject>\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject({})\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        layerNames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:130\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        map\n                        \n                    \n                \n            \n                \n                    \n                        Type :     L.Map\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:133\n                        \n                    \n\n            \n                \n                    The leaflet map that is displayed here.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mapElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('map')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:53\n                        \n                    \n\n            \n                \n                    The ref to the map html element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        Resolution\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Resolution\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:50\n                        \n                    \n\n            \n                \n                    Reexport of the Resolution enum.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        selectedLayer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LayerKey\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:146\n                        \n                    \n\n            \n                \n                    The currently selected layer in the map control.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedShapes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record>\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:140\n                        \n                    \n\n            \n                \n                    Internally holds all elements that are currently selected.\nThe set holds all keys of shapes currently selected.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tileUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:63\n                        \n                    \n\n            \n                \n                    Tile url of the map, defaults to the osm.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 7\n                    \n                \n                    \n                        \n                                Defined in src/lib/map/map.component.ts:73\n                        \n                    \n\n            \n                \n                    Zoom level of the map, defaults to 7.\n\n                \n            \n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        inputLayers\n                    \n                \n\n\n                \n                    \n                        setinputLayers(layerConfig: LayerConfig)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/map/map.component.ts:125\n                                \n                            \n                    \n                        \n                                Input for the layers that should be displayed.\nThe key of the record is layer key and is also emitted on the selection.\nThe value of the record is an array and the values of that should be the\nfollowing:\n\n  \n    The name of the layer, this will be only used to display a name of\n    the layer (may also be a translation key).\n    // TODO: actually implement translation here\n  \n  \n    This should be the resolution to display the layer at, this may also\nbe\n    null to display the keys directly without any shape intersection\n    resolving.\n  \n  \n    These should be the keys used to display the shapes from.\n    If the given keys are empty or null, this will display everything from\n    the give resolution.\n  \n\n\nAttention: The service needs at least one of the resolution or the\nkeys\nto properly respond.\n// TODO: update link when geo data docs update\nSee https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            layerConfig\n                                                    \n                                                            \n                                                                            LayerConfig\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                        Example :\n                                            \n                                                &lt;map\n  height=&quot;70vh&quot;\n  [layers]=&quot;{\n    full_res: [&#39;All of municipal resolution&#39;, Resolution.MUNICIPAL, null],\n    only_keys: [&#39;Only show exactly these&#39;, null, [&#39;01&#39;, &#39;034030000000&#39;]],\n    mixed: [&#39;Show district resolution&#39;, Resolution.DISTRICT, [&#39;01&#39;,\n  &#39;034030000000&#39;]]\n  }&quot;\n&gt;&lt;/map&gt;\n\n// TODO: update link when geo data docs update\n                                            \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n  ViewChild,\n  Component,\n  EventEmitter,\n  OnInit,\n  AfterViewInit,\n  Input,\n  Output,\n  ElementRef\n} from \"@angular/core\";\nimport {BehaviorSubject} from \"rxjs\";\n\nimport * as L from \"leaflet\";\n\nimport {MapService} from \"./map.service\";\nimport LayerData from \"./layer-data\";\nimport {Resolution} from \"./resolution\";\n\nimport * as LX from \"./invert-selection\";\n\n/**\n * GeoJSON data type used by Leaflet.\n * @private\n */\ntype GeoJsonObject = Parameters[0];\n\n/** Type alias to enforce the meaning of the layer keys. */\ntype LayerKey = string;\n\n/** A layer config for the input of {@link MapComponent.inputLayers}. */\ntype LayerConfig = Record;\n\n/**\n * Component for displaying maps.\n */\n@Component({\n  selector: \"map\",\n  template: `\n    \n      \n    \n  `,\n  styleUrls: [\n    \"./map.component.css\"\n  ]\n})\nexport class MapComponent implements OnInit, AfterViewInit {\n\n  /** Reexport of the {@link Resolution} enum. */\n  static Resolution = Resolution;\n\n  /** The ref to the map html element. */\n  @ViewChild(\"map\") private mapElement!: ElementRef;\n\n  /** Input for the height of the map. */\n  @Input(\"height\") inputHeight?: string;\n  /** Height of map, defaults to 500px. */\n  height = \"500px\";\n\n  /** Input for the tile url of the map. */\n  @Input(\"tileUrl\") inputTileUrl?: string;\n  /** Tile url of the map, defaults to the osm. */\n  tileUrl = \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\";\n\n  /** Input for the center coordinates of the map. */\n  @Input(\"center\") inputCenter?: string;\n  /** Center of the map, defaults to longitude and latitude of Oldenburg. */\n  center = \"53.1434501, 8.2145521\";\n\n  /** Input for the map zoom level. */\n  @Input(\"zoom\") inputZoom?: string;\n  /** Zoom level of the map, defaults to 7. */\n  zoom = 7;\n\n  /** Input for a hex code for unselected shapes. */\n  @Input(\"unselectedColor\") unselectedColor = \"#1f5aec\";\n  /** Input for a hex code selected shapes. */\n  @Input(\"selectedColor\") selectedColor = \"#d35a0c\";\n\n  /**\n   * Input for the layers that should be displayed.\n   *\n   * The key of the record is layer key and is also emitted on the selection.\n   * The value of the record is an array and the values of that should be the\n   * following:\n   * \n   *   \n   *     The name of the layer, this will be only used to display a name of\n   *     the layer (may also be a translation key).\n   *     // TODO: actually implement translation here\n   *   \n   *   \n   *     This should be the resolution to display the layer at, this may also\n   * be\n   *     null to display the keys directly without any shape intersection\n   *     resolving.\n   *   \n   *   \n   *     These should be the keys used to display the shapes from.\n   *     If the given keys are empty or null, this will display everything from\n   *     the give resolution.\n   *   \n   * \n   *\n   * **Attention**: The service needs at least one of the resolution or the\n   * keys\n   * to properly respond.\n   *\n   * @example\n   * ```html\n   * \n   * ```\n   * // TODO: update link when geo data docs update\n   * @see https://wisdom04.vlba.uni-oldenburg.de/repos/service-geo-data-rest/main/api/get-layer\n   */\n  @Input(\"layers\")\n  set inputLayers(layerConfig: LayerConfig) {\n    this.layerConfig.next(layerConfig);\n  };\n  private layerConfig: BehaviorSubject = new BehaviorSubject({});\n  private layerData: BehaviorSubject> = new BehaviorSubject({});\n  private layerNames: Record = {};\n\n  /** The leaflet map that is displayed here. */\n  map?: L.Map;\n\n  /**\n   * Internally holds all elements that are currently selected.\n   *\n   * The set holds all keys of shapes currently selected.\n   */\n  private selectedShapes: Record> = {};\n\n  /**\n   * The currently selected layer in the map control.\n   * @private\n   */\n  private selectedLayer?: LayerKey;\n\n  /** Outputs the currently selected shapes. */\n  @Output() selected = new EventEmitter();\n\n  /**\n   * Constructor.\n   * @param service Service to interact with the server for geo data\n   */\n  constructor(private service: MapService) {}\n\n  /**\n   * While init this sets the input values to the inner, private values.\n   */\n  ngOnInit(): void {\n    if (this.inputHeight) this.height = this.inputHeight;\n    if (this.inputTileUrl) this.tileUrl = this.inputTileUrl;\n    if (this.inputCenter) this.center = this.inputCenter;\n    if (this.inputZoom) this.zoom = parseInt(this.inputZoom);\n\n    this.layerConfig.subscribe(async config => {\n      let layerData = {};\n      let requests: Record> = {};\n      for (\n        let [layerKey, [displayName, resolution, keys]]\n        of Object.entries(config)\n      ) {\n        this.layerNames[layerKey] = displayName;\n        requests[layerKey] = this.service.fetchLayerData(\n          resolution,\n          keys?.map(k => k.split(\" \").join(\"\"))\n        );\n      }\n      let fetched: Record = {};\n      for (let [layerKey, data] of Object.entries(requests)) {\n        fetched[layerKey] = await data;\n      }\n      this.layerData.next(fetched);\n    });\n  }\n\n  /**\n   * Renders the map with the given input values.\n   */\n  ngAfterViewInit(): void {\n    const nativeMapElement = this.mapElement.nativeElement;\n\n    const map = L.map(nativeMapElement, {\n      center: this.center\n        .split(\", \")\n        .map(str => parseFloat(str)) as [number, number],\n      zoom: this.zoom\n    });\n    map.getRenderer(map as any).options.padding = 100;\n\n    L.tileLayer(this.tileUrl).addTo(map);\n\n    this.map = map;\n    let layersControl: L.Control.Layers;\n    // TODO: make a clear type from this\n    let invertSelectionControl: any;\n\n    this.layerData.subscribe(layerData => {\n      let displayLayer = true;\n\n      // reset selected data\n      this.selectedShapes = {};\n\n      if (layersControl) map.removeControl(layersControl);\n      layersControl = L.control.layers();\n      let layers: L.Layer[] = [];\n\n      // update map with new layer data\n      for (let [key, data] of Object.entries(layerData)) {\n        let selectedShapes = this.selectedShapes[key] = new Set();\n        // use for every layer a new geoJSON layer\n        let geoJsonLayer = L.geoJSON(undefined, {\n          style: {color: this.unselectedColor},\n          onEachFeature: (feature, layer) => {\n            // used properties are injected later into the feature\n            layer.bindTooltip(feature.properties.name, {direction: \"center\"});\n            layer.on(\"click\", () => {\n              let [key, path] = [feature.properties.key, layer as L.Path];\n              if (selectedShapes.has(key)) {\n                path.setStyle({color: this.unselectedColor});\n                path.bringToBack();\n                selectedShapes.delete(key);\n              }\n              else {\n                path.setStyle({color: this.selectedColor});\n                path.bringToFront();\n                selectedShapes.add(key);\n              }\n              this.emitSelection();\n            });\n            layers.push(layer);\n          }\n        });\n        for (let shape of data) {\n          geoJsonLayer.addData(Object.assign(shape.geoJson, {properties: {\n            name: shape.name,\n            key: shape.key\n          }}));\n          if (displayLayer) {\n            geoJsonLayer.addTo(map);\n            displayLayer = false;\n            this.selectedLayer = key;\n          }\n        }\n        layersControl.addBaseLayer(geoJsonLayer, this.layerNames[key]);\n        map.on(\"baselayerchange\", ({layer}) => {\n          if (layer = geoJsonLayer) {\n            this.selectedLayer = key;\n            this.emitSelection();\n          }\n        })\n      }\n      if (Object.keys(layerData).length > 1) layersControl.addTo(map);\n\n      if (invertSelectionControl) map.removeControl(invertSelectionControl);\n      invertSelectionControl = LX.control.invertSelection(() => {\n        for (let layer of layers) {\n          layer.fire(\"click\");\n        }\n      });\n      invertSelectionControl.addTo(map);\n    });\n  }\n\n  /**\n   * Internally used function to emit the currently selected shapes via the\n   * {@link selected} output.\n   * @private\n   */\n  private emitSelection(): void {\n    let layerKey = this.selectedLayer!;\n    let layerName = this.layerNames[layerKey]!;\n    let keys = Array.from(this.selectedShapes[layerKey]);\n    this.selected.emit({\n      layer: layerKey,\n      name: layerName,\n      keys\n    });\n  }\n}\n\n    \n\n\n    \n                \n                    ./map.component.css\n                \n                .map-container {}\n\n.map {\n  height: 100%;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'BarChartComponent', 'selector': 'bar-chart'},{'name': 'IonIconComponent', 'selector': 'ion-icon'},{'name': 'LineChartComponent', 'selector': 'line-chart'},{'name': 'MapComponent', 'selector': 'map'}];\n    var DIRECTIVES = [{'name': 'BulmaIsToggleableDirective', 'selector': '.is-toggleable'}];\n    var ACTUAL_COMPONENT = {'name': 'MapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MapDB.html":{"url":"interfaces/MapDB.html","title":"interface - MapDB","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MapDB\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/map.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The schema the map db uses.\n\n            \n\n            \n                Extends\n            \n            \n                    DBSchema\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            queries\n                                        \n                                \n                                \n                                        \n                                            shapes\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        queries\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queries:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    All cached queries, used to identify if a query is already in the db.\nThe key[0] represents the resolution of the query, a -1 represents no\nresolution.\nThe rest are the given keys.\nThe value is an array of all the keys the query returned.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shapes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shapes:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    All shapes in the indexed db.\nThe key is the key of the shape.\nThe value is some ShapeData.\nSince LayerData is simply an array of ShapeData, this may\nbe used to reconstruct some layer data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  HttpClient,\n  HttpContext,\n  HttpHeaders,\n  HttpParams\n} from \"@angular/common/http\";\nimport {Injectable} from \"@angular/core\";\nimport {openDB, DBSchema} from \"idb\";\nimport {firstValueFrom} from \"rxjs\";\n\nimport {Resolution} from \"./resolution\";\nimport {LayerData, ShapeData, GeoJsonObject} from \"./layer-data\";\nimport {USE_API_URL} from \"../http-context/use-api-url\";\nimport {USE_LOADER} from \"../http-context/use-loader\";\n\nconst API_URL = \"geodata\";\nconst DB_NAME = \"map-db\";\nconst SCHEMA_V = 1;\n\n/** The schema the map db uses. */\ninterface MapDB extends DBSchema {\n  /**\n   * All cached queries, used to identify if a query is already in the db.\n   *\n   * The key[0] represents the resolution of the query, a -1 represents no\n   * resolution.\n   * The rest are the given keys.\n   *\n   * The value is an array of all the keys the query returned.\n   */\n  queries: {\n    key: [number, ...string[]],\n    value: string[]\n  },\n\n  /**\n   * All shapes in the indexed db.\n   *\n   * The key is the key of the shape.\n   *\n   * The value is some {@link ShapeData}.\n   * Since {@link LayerData} is simply an array of {@link ShapeData}, this may\n   * be used to reconstruct some layer data.\n   */\n  shapes: {\n    key: string,\n    value: ShapeData\n  }\n}\n\n/**\n * Service to interact with the geo data api to fetch map data.\n *\n * Fetched map data is cached in the indexedDB and therefore only retrieved\n * lazily.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n\n  private readonly idb;\n\n  /**\n   * Constructor.\n   * @param http Client to request geo data\n   */\n  constructor(private http: HttpClient) {\n    this.idb = openDB(DB_NAME, SCHEMA_V, {\n      upgrade(db) {\n        db.createObjectStore(\"queries\");\n        db.createObjectStore(\"shapes\");\n      }\n    });\n  }\n\n  /**\n   * Asynchronously fetch the map from the geo data rest api.\n   *\n   * Will only fetch data if not already stored in the indexedDB.\n   * @param resolution The resolution the of the shapes returned by the service\n   * @param keys The keys given to look for shapes\n   * @param force If true, this will ignore the cache and request everything\n   */\n  async fetchLayerData(\n    resolution: Resolution | null | undefined,\n    keys?: string[] | null,\n    force: boolean = false\n  ): Promise {\n    // prepare db and keys\n    let idb = await this.idb;\n    let trimmedKeys = keys ?? [];\n    let resolutionNum = resolution ? Resolution.toKeyLength(resolution) : -1;\n    let queryKey = [resolutionNum, ...trimmedKeys] as [number, ...string[]];\n\n    // check for cached keys or ignore if is force is true\n    let cachedKeys = force ? undefined : await idb.get(\"queries\", queryKey);\n    if (cachedKeys) {\n      let tx = idb.transaction(\"shapes\", \"readonly\");\n      let store = tx.objectStore(\"shapes\");\n      let shapes: ShapeData[] = [];\n      let operations = [];\n      for (let key of cachedKeys) {\n        operations.push(store.get(key).then(shape => {\n          if (shape) shapes.push(shape);\n        }));\n      }\n      operations.push(tx.done);\n      await Promise.all(operations);\n      return shapes;\n    }\n\n    // if cachedKeys was empty, request data from the server\n    let params = new HttpParams();\n    if (resolution) params = params.set(\"resolution\", resolution);\n    if (keys && keys.length) params = params.appendAll({key: keys.map(k => {\n      if (resolution) return k.substring(0, resolutionNum);\n      return k;\n    })});\n\n    let layerData: LayerData = (await firstValueFrom(this.http.get(`${API_URL}/`, {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      }),\n      params,\n      responseType: \"json\",\n      context: new HttpContext()\n        .set(USE_API_URL, true)\n        .set(USE_LOADER, \"fetching map data\")\n    })) ?? []).map(rawShape => ({\n      nutsKey: rawShape.nuts_key,\n      geoJson: rawShape.geojson,\n      ...rawShape\n    }));\n\n    // store the requested data back into the db\n    let tx = idb.transaction([\"queries\", \"shapes\"], \"readwrite\");\n    let operations = [];\n    let shapeStore = tx.objectStore(\"shapes\");\n    let shapeKeys = [];\n    for (let shape of layerData) {\n      operations.push(shapeStore.put(shape, shape.key));\n      shapeKeys.push(shape.key);\n    }\n    let queryStore = tx.objectStore(\"queries\");\n    operations.push(queryStore.put(shapeKeys, queryKey));\n    await Promise.all(operations);\n\n    return layerData;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MapService.html":{"url":"injectables/MapService.html","title":"injectable - MapService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MapService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/map.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to interact with the geo data api to fetch map data.\nFetched map data is cached in the indexedDB and therefore only retrieved\nlazily.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                idb\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                fetchLayerData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/lib/map/map.service.ts:62\n                            \n                        \n\n                \n                    \n                            Constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Client to request geo data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchLayerData\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchLayerData(resolution: Resolution | null | undefined, keys?: string[] | null, force: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/map/map.service.ts:85\n                \n            \n\n\n            \n                \n                    Asynchronously fetch the map from the geo data rest api.\nWill only fetch data if not already stored in the indexedDB.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    resolution\n                                    \n                                                Resolution | null | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The resolution the of the shapes returned by the service\n\n                                    \n                                \n                                \n                                    keys\n                                    \n                                            string[] | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The keys given to look for shapes\n\n                                    \n                                \n                                \n                                    force\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        If true, this will ignore the cache and request everything\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        idb\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/lib/map/map.service.ts:62\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpClient,\n  HttpContext,\n  HttpHeaders,\n  HttpParams\n} from \"@angular/common/http\";\nimport {Injectable} from \"@angular/core\";\nimport {openDB, DBSchema} from \"idb\";\nimport {firstValueFrom} from \"rxjs\";\n\nimport {Resolution} from \"./resolution\";\nimport {LayerData, ShapeData, GeoJsonObject} from \"./layer-data\";\nimport {USE_API_URL} from \"../http-context/use-api-url\";\nimport {USE_LOADER} from \"../http-context/use-loader\";\n\nconst API_URL = \"geodata\";\nconst DB_NAME = \"map-db\";\nconst SCHEMA_V = 1;\n\n/** The schema the map db uses. */\ninterface MapDB extends DBSchema {\n  /**\n   * All cached queries, used to identify if a query is already in the db.\n   *\n   * The key[0] represents the resolution of the query, a -1 represents no\n   * resolution.\n   * The rest are the given keys.\n   *\n   * The value is an array of all the keys the query returned.\n   */\n  queries: {\n    key: [number, ...string[]],\n    value: string[]\n  },\n\n  /**\n   * All shapes in the indexed db.\n   *\n   * The key is the key of the shape.\n   *\n   * The value is some {@link ShapeData}.\n   * Since {@link LayerData} is simply an array of {@link ShapeData}, this may\n   * be used to reconstruct some layer data.\n   */\n  shapes: {\n    key: string,\n    value: ShapeData\n  }\n}\n\n/**\n * Service to interact with the geo data api to fetch map data.\n *\n * Fetched map data is cached in the indexedDB and therefore only retrieved\n * lazily.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n\n  private readonly idb;\n\n  /**\n   * Constructor.\n   * @param http Client to request geo data\n   */\n  constructor(private http: HttpClient) {\n    this.idb = openDB(DB_NAME, SCHEMA_V, {\n      upgrade(db) {\n        db.createObjectStore(\"queries\");\n        db.createObjectStore(\"shapes\");\n      }\n    });\n  }\n\n  /**\n   * Asynchronously fetch the map from the geo data rest api.\n   *\n   * Will only fetch data if not already stored in the indexedDB.\n   * @param resolution The resolution the of the shapes returned by the service\n   * @param keys The keys given to look for shapes\n   * @param force If true, this will ignore the cache and request everything\n   */\n  async fetchLayerData(\n    resolution: Resolution | null | undefined,\n    keys?: string[] | null,\n    force: boolean = false\n  ): Promise {\n    // prepare db and keys\n    let idb = await this.idb;\n    let trimmedKeys = keys ?? [];\n    let resolutionNum = resolution ? Resolution.toKeyLength(resolution) : -1;\n    let queryKey = [resolutionNum, ...trimmedKeys] as [number, ...string[]];\n\n    // check for cached keys or ignore if is force is true\n    let cachedKeys = force ? undefined : await idb.get(\"queries\", queryKey);\n    if (cachedKeys) {\n      let tx = idb.transaction(\"shapes\", \"readonly\");\n      let store = tx.objectStore(\"shapes\");\n      let shapes: ShapeData[] = [];\n      let operations = [];\n      for (let key of cachedKeys) {\n        operations.push(store.get(key).then(shape => {\n          if (shape) shapes.push(shape);\n        }));\n      }\n      operations.push(tx.done);\n      await Promise.all(operations);\n      return shapes;\n    }\n\n    // if cachedKeys was empty, request data from the server\n    let params = new HttpParams();\n    if (resolution) params = params.set(\"resolution\", resolution);\n    if (keys && keys.length) params = params.appendAll({key: keys.map(k => {\n      if (resolution) return k.substring(0, resolutionNum);\n      return k;\n    })});\n\n    let layerData: LayerData = (await firstValueFrom(this.http.get(`${API_URL}/`, {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      }),\n      params,\n      responseType: \"json\",\n      context: new HttpContext()\n        .set(USE_API_URL, true)\n        .set(USE_LOADER, \"fetching map data\")\n    })) ?? []).map(rawShape => ({\n      nutsKey: rawShape.nuts_key,\n      geoJson: rawShape.geojson,\n      ...rawShape\n    }));\n\n    // store the requested data back into the db\n    let tx = idb.transaction([\"queries\", \"shapes\"], \"readwrite\");\n    let operations = [];\n    let shapeStore = tx.objectStore(\"shapes\");\n    let shapeKeys = [];\n    for (let shape of layerData) {\n      operations.push(shapeStore.put(shape, shape.key));\n      shapeKeys.push(shape.key);\n    }\n    let queryStore = tx.objectStore(\"queries\");\n    operations.push(queryStore.put(shapeKeys, queryKey));\n    await Promise.all(operations);\n\n    return layerData;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ShapeData.html":{"url":"interfaces/ShapeData.html","title":"interface - ShapeData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ShapeData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/map/layer-data.ts\n        \n\n\n            \n                Description\n            \n            \n                Type to represent layer data received from the geo data server.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            geoJson\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            nutsKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        geoJson\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        geoJson:         GeoJsonObject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         GeoJsonObject\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nutsKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nutsKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as L from \"leaflet\";\n\n/**\n * GeoJSON data type used by Leaflet.\n * @private\n */\nexport type GeoJsonObject = Parameters[0];\n/** Type to represent layer data received from the geo data server. */\nexport interface ShapeData {\n  name: string,\n  key: string,\n  nutsKey: string,\n  geoJson: GeoJsonObject\n};\n\nexport type LayerData = ShapeData[];\n\nexport default LayerData;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WisdomInterface.html":{"url":"interfaces/WisdomInterface.html","title":"interface - WisdomInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WisdomInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/WisdomInterface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for the wisdom modules.\nEvery wisdom module must provide such an object implementing this interface.\nThe object must be exported under the name \"wisdomInterface\".\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            entryComponent\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            scopes\n                                        \n                                \n                                \n                                        \n                                            translations\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entryComponent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entryComponent:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The entry component that should be displayed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The path to the component displaying the module.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scopes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scopes:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The scopes required to see the component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translations:     Record>>>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record>>>\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The translations the modules provides and uses.\nThe top most entry should be the namespace, the following the component and\nin the component there should be keys for the translation keys.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface WisdomInterface {\n  /** The path to the component displaying the module. */\n  path: string;\n  /** The scopes required to see the component. */\n  scopes: string[];\n  /** The entry component that should be displayed. */\n  entryComponent: any;\n  /**\n   * The translations the modules provides and uses.\n   *\n   * The top most entry should be the namespace, the following the component and\n   * in the component there should be keys for the translation keys.\n   */\n  translations: Record>>>\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WisdomModule.html":{"url":"modules/WisdomModule.html","title":"module - WisdomModule","body":"\n                   \n\n\n\n\n    Modules\n    WisdomModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WisdomModule\n\n\n\ncluster_WisdomModule_declarations\n\n\n\ncluster_WisdomModule_exports\n\n\n\n\nBulmaIsToggleableDirective\n\nBulmaIsToggleableDirective\n\n\n\nWisdomModule\n\nWisdomModule\n\nWisdomModule -->\n\nBulmaIsToggleableDirective->WisdomModule\n\n\n\n\n\nIonIconComponent\n\nIonIconComponent\n\nWisdomModule -->\n\nIonIconComponent->WisdomModule\n\n\n\n\n\nMapComponent\n\nMapComponent\n\nWisdomModule -->\n\nMapComponent->WisdomModule\n\n\n\n\n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective  -->\n\nWisdomModule->BulmaIsToggleableDirective \n\n\n\n\n\nChartModule \n\nChartModule \n\nChartModule  -->\n\nWisdomModule->ChartModule \n\n\n\n\n\nIonIconComponent \n\nIonIconComponent \n\nIonIconComponent  -->\n\nWisdomModule->IonIconComponent \n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nWisdomModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/wisdom.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BulmaIsToggleableDirective\n                        \n                        \n                            IonIconComponent\n                        \n                        \n                            MapComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BulmaIsToggleableDirective\n                        \n                        \n                            ChartModule\n                        \n                        \n                            IonIconComponent\n                        \n                        \n                            MapComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\n\nimport {\n  BulmaIsToggleableDirective\n} from \"./bulma/bulma-is-toggleable.directive\";\nimport {ChartModule} from \"./chart/chart.module\";\nimport {IonIconComponent} from \"./ion-icon/ion-icon.component\";\nimport {MapComponent} from \"./map/map.component\";\nimport {TranslateModule} from \"@ngx-translate/core\";\n\n@NgModule({\n  declarations: [\n    IonIconComponent,\n    BulmaIsToggleableDirective,\n    MapComponent\n  ],\n  imports: [\n    TranslateModule\n  ],\n  exports: [\n    IonIconComponent,\n    BulmaIsToggleableDirective,\n    MapComponent,\n    ChartModule\n  ]\n})\nexport class WisdomModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/WisdomInterface.ts\n            \n            interface\n            WisdomInterface\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/bulma/bulma-is-toggleable.directive.ts\n            \n            directive\n            BulmaIsToggleableDirective\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/chart/bar-chart.component.ts\n            \n            component\n            BarChartComponent\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/lib/chart/line-chart.component.ts\n            \n            component\n            LineChartComponent\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-api-url.ts\n            \n            variable\n            USE_API_URL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-base-url.ts\n            \n            variable\n            USE_BASE_URL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-cache.ts\n            \n            variable\n            USE_CACHE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/http-context/use-loader.ts\n            \n            variable\n            USE_LOADER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/ion-icon/ion-icon.component.ts\n            \n            component\n            IonIconComponent\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/lib/map/invert-selection.ts\n            \n            variable\n            control\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/map/layer-data.ts\n            \n            interface\n            ShapeData\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/lib/map/map.component.ts\n            \n            component\n            MapComponent\n            \n                88 %\n                (22/25)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            injectable\n            MapService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            interface\n            MapDB\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            API_URL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            DB_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/map/map.service.ts\n            \n            variable\n            SCHEMA_V\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/map/resolution.ts\n            \n            function\n            toEnum\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/map/resolution.ts\n            \n            function\n            toKeyLength\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            prettyPrintNum\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            stringToColor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/util.ts\n            \n            function\n            translateObject\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^13.2.0\n        \n            @angular/core : ^13.2.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Resolution   (src/.../resolution.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/map/resolution.ts\n    \n        \n            \n                \n                    \n                        \n                        Resolution\n                    \n                \n                        \n                            \n                                 STATE\n                            \n                        \n                        \n                            \n                                Value : state\n                            \n                        \n                        \n                            \n                                 DISTRICT\n                            \n                        \n                        \n                            \n                                Value : district\n                            \n                        \n                        \n                            \n                                 ADMINISTRATION\n                            \n                        \n                        \n                            \n                                Value : administration\n                            \n                        \n                        \n                            \n                                 MUNICIPAL\n                            \n                        \n                        \n                            \n                                Value : municipal\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            prettyPrintNum   (src/.../util.ts)\n                        \n                        \n                            stringToColor   (src/.../util.ts)\n                        \n                        \n                            toEnum   (src/.../resolution.ts)\n                        \n                        \n                            toKeyLength   (src/.../resolution.ts)\n                        \n                        \n                            translateObject   (src/.../util.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prettyPrintNum\n                        \n                    \n                \n            \n            \n                \nprettyPrintNum(num: number)\n                \n            \n\n\n\n\n            \n                \n                    Returns a number presentation where every third digit from the end is\nseparated by a dot.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Number to pretty print\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            prettyPrintNum(12345678) =&gt; &quot;12.345.678&quot;\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stringToColor\n                        \n                    \n                \n            \n            \n                \nstringToColor(str: string, map?: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    map\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        translateObject\n                        \n                    \n                \n            \n            \n                \ntranslateObject(service: TranslateService, obj: T)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to translate strings in any data object using the given\ntranslate service.\nInternally the instant() method is used, causing this to be sync, beware.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    service\n                                    \n                                            TranslateService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Translate service to translate with\n\n                                    \n                                \n                                \n                                    obj\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to iterate and translate through\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/map/resolution.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toEnum\n                        \n                    \n                \n            \n            \n                \ntoEnum(length: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Resolution | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toKeyLength\n                        \n                    \n                \n            \n            \n                \ntoKeyLength(res: Resolution)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                                Resolution\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ChartModule\n\n\n\ncluster_ChartModule_declarations\n\n\n\ncluster_ChartModule_exports\n\n\n\ncluster_WisdomModule\n\n\n\ncluster_WisdomModule_declarations\n\n\n\ncluster_WisdomModule_exports\n\n\n\n\nBarChartComponent\n\nBarChartComponent\n\n\n\nChartModule\n\nChartModule\n\nChartModule -->\n\nBarChartComponent->ChartModule\n\n\n\n\n\nLineChartComponent\n\nLineChartComponent\n\nChartModule -->\n\nLineChartComponent->ChartModule\n\n\n\n\n\nBarChartComponent \n\nBarChartComponent \n\nBarChartComponent  -->\n\nChartModule->BarChartComponent \n\n\n\n\n\nLineChartComponent \n\nLineChartComponent \n\nLineChartComponent  -->\n\nChartModule->LineChartComponent \n\n\n\n\n\nBulmaIsToggleableDirective\n\nBulmaIsToggleableDirective\n\n\n\nWisdomModule\n\nWisdomModule\n\nWisdomModule -->\n\nBulmaIsToggleableDirective->WisdomModule\n\n\n\n\n\nIonIconComponent\n\nIonIconComponent\n\nWisdomModule -->\n\nIonIconComponent->WisdomModule\n\n\n\n\n\nMapComponent\n\nMapComponent\n\nWisdomModule -->\n\nMapComponent->WisdomModule\n\n\n\n\n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective \n\nBulmaIsToggleableDirective  -->\n\nWisdomModule->BulmaIsToggleableDirective \n\n\n\n\n\nChartModule \n\nChartModule \n\nChartModule  -->\n\nWisdomModule->ChartModule \n\n\n\n\n\nIonIconComponent \n\nIonIconComponent \n\nIonIconComponent  -->\n\nWisdomModule->IonIconComponent \n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nWisdomModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ChartModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WisdomModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GeoJsonObject   (src/.../layer-data.ts)\n                        \n                        \n                            GeoJsonObject   (src/.../map.component.ts)\n                        \n                        \n                            LayerConfig   (src/.../map.component.ts)\n                        \n                        \n                            LayerData   (src/.../layer-data.ts)\n                        \n                        \n                            LayerKey   (src/.../map.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/map/layer-data.ts\n    \n    \n        \n            \n                \n                    \n                    GeoJsonObject\n                \n            \n            \n                \n                    GeoJSON data type used by Leaflet.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LayerData\n                \n            \n            \n                \n                            ShapeData[]\n\n                \n            \n        \n    \n    src/lib/map/map.component.ts\n    \n    \n        \n            \n                \n                    \n                    GeoJsonObject\n                \n            \n            \n                \n                    GeoJSON data type used by Leaflet.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LayerConfig\n                \n            \n            \n                \n                    A layer config for the input of MapComponent.inputLayers.\n\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LayerKey\n                \n            \n            \n                \n                    Type alias to enforce the meaning of the layer keys.\n\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            API_URL   (src/.../map.service.ts)\n                        \n                        \n                            control   (src/.../invert-selection.ts)\n                        \n                        \n                            DB_NAME   (src/.../map.service.ts)\n                        \n                        \n                            SCHEMA_V   (src/.../map.service.ts)\n                        \n                        \n                            USE_API_URL   (src/.../use-api-url.ts)\n                        \n                        \n                            USE_BASE_URL   (src/.../use-base-url.ts)\n                        \n                        \n                            USE_CACHE   (src/.../use-cache.ts)\n                        \n                        \n                            USE_LOADER   (src/.../use-loader.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/map/map.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        API_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"geodata\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DB_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"map-db\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SCHEMA_V\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n\n\n        \n    \n\n    src/lib/map/invert-selection.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  invertSelection: (callback: (arg0: MouseEvent) => void, options?: L.ControlOptions) => {\n    let InvertSelection = L.Control.extend({\n      options: {\n        position: \"topright\"\n      },\n      initialize: function (options: any) {\n        L.Util.setOptions(this, options);\n      },\n      onAdd: function (map: L.Map) {\n        let centerContent = [\n          \"is-flex is-align-content-center\",\n          \"is-align-items-center\",\n          \"is-justify-content-center\"\n        ].join(\" \");\n\n        let container = L.DomUtil.create(\n          \"div\",\n          \"select-all-container leaflet-control-layers leaflet-control\"\n        );\n        container.addEventListener(\"click\", callback);\n        let button = L.DomUtil.create(\n          \"a\",\n          \"leaflet-control-layers-toggle \" + centerContent,\n          container\n        );\n        button.style.backgroundImage = \"none\";\n        let icon = L.DomUtil.create(\n          \"ion-icon\",\n          \"select-all-icon\",\n          button\n        );\n        icon.style.pointerEvents = \"none\";\n        icon.setAttribute(\"name\", \"extension-puzzle\");\n        icon.setAttribute(\"size\", \"large\");\n        icon.style.color = \"#a0a0a0\";\n        return container;\n      }\n    });\n    return new InvertSelection(options);\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/lib/http-context/use-api-url.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_API_URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => false)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if the api url should be used.\nDefaults to false.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-base-url.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_BASE_URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => true)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if the base url should be used.\nDefaults to true.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-cache.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_CACHE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => true)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if cache headers should be sent.\nDefaults to true.\n\n                \n            \n\n        \n    \n\n    src/lib/http-context/use-loader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USE_LOADER\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new HttpContextToken(() => false)\n                    \n                \n\n            \n                \n                    HttpContextToken used to determine if loader should be shown.\nA given string will be run through the translator and therefore may get\ntranslated.\nUseful for longer loading times.\nDefaults to false.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
